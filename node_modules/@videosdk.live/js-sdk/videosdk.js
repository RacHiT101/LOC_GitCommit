/*! For license information please see videosdk.js.LICENSE.txt */
!(function (e, t) {
  if ("object" == typeof exports && "object" == typeof module)
    module.exports = t();
  else if ("function" == typeof define && define.amd) define([], t);
  else {
    var r = t();
    for (var n in r) ("object" == typeof exports ? exports : e)[n] = r[n];
  }
})(self, () =>
  (() => {
    var e = {
        7757: (e, t, r) => {
          e.exports = r(5666);
        },
        4180: (e) => {
          self,
            (e.exports = (() => {
              var e = {
                  43: function (e, t, r) {
                    var n, a;
                    !(function (i, s) {
                      "use strict";
                      (n = function () {
                        var e = function () {},
                          t = "undefined",
                          r =
                            typeof window !== t &&
                            typeof window.navigator !== t &&
                            /Trident\/|MSIE /.test(window.navigator.userAgent),
                          n = ["trace", "debug", "info", "warn", "error"];
                        function a(e, t) {
                          var r = e[t];
                          if ("function" == typeof r.bind) return r.bind(e);
                          try {
                            return Function.prototype.bind.call(r, e);
                          } catch (t) {
                            return function () {
                              return Function.prototype.apply.apply(r, [
                                e,
                                arguments,
                              ]);
                            };
                          }
                        }
                        function i() {
                          console.log &&
                            (console.log.apply
                              ? console.log.apply(console, arguments)
                              : Function.prototype.apply.apply(console.log, [
                                  console,
                                  arguments,
                                ])),
                            console.trace && console.trace();
                        }
                        function s(n) {
                          return (
                            "debug" === n && (n = "log"),
                            typeof console !== t &&
                              ("trace" === n && r
                                ? i
                                : void 0 !== console[n]
                                ? a(console, n)
                                : void 0 !== console.log
                                ? a(console, "log")
                                : e)
                          );
                        }
                        function o(t, r) {
                          for (var a = 0; a < n.length; a++) {
                            var i = n[a];
                            this[i] = a < t ? e : this.methodFactory(i, t, r);
                          }
                          this.log = this.debug;
                        }
                        function c(e, r, n) {
                          return function () {
                            typeof console !== t &&
                              (o.call(this, r, n),
                              this[e].apply(this, arguments));
                          };
                        }
                        function d(e, t, r) {
                          return s(e) || c.apply(this, arguments);
                        }
                        function l(e, r, a) {
                          var i,
                            s = this,
                            c = "loglevel";
                          function l() {
                            var e;
                            if (typeof window !== t && c) {
                              try {
                                e = window.localStorage[c];
                              } catch (e) {}
                              if (typeof e === t)
                                try {
                                  var r = window.document.cookie,
                                    n = r.indexOf(encodeURIComponent(c) + "=");
                                  -1 !== n &&
                                    (e = /^([^;]+)/.exec(r.slice(n))[1]);
                                } catch (e) {}
                              return void 0 === s.levels[e] && (e = void 0), e;
                            }
                          }
                          "string" == typeof e
                            ? (c += ":" + e)
                            : "symbol" == typeof e && (c = void 0),
                            (s.name = e),
                            (s.levels = {
                              TRACE: 0,
                              DEBUG: 1,
                              INFO: 2,
                              WARN: 3,
                              ERROR: 4,
                              SILENT: 5,
                            }),
                            (s.methodFactory = a || d),
                            (s.getLevel = function () {
                              return i;
                            }),
                            (s.setLevel = function (r, a) {
                              if (
                                ("string" == typeof r &&
                                  void 0 !== s.levels[r.toUpperCase()] &&
                                  (r = s.levels[r.toUpperCase()]),
                                !(
                                  "number" == typeof r &&
                                  r >= 0 &&
                                  r <= s.levels.SILENT
                                ))
                              )
                                throw (
                                  "log.setLevel() called with invalid level: " +
                                  r
                                );
                              if (
                                ((i = r),
                                !1 !== a &&
                                  (function (e) {
                                    var r = (n[e] || "silent").toUpperCase();
                                    if (typeof window !== t && c) {
                                      try {
                                        return void (window.localStorage[c] =
                                          r);
                                      } catch (e) {}
                                      try {
                                        window.document.cookie =
                                          encodeURIComponent(c) + "=" + r + ";";
                                      } catch (e) {}
                                    }
                                  })(r),
                                o.call(s, r, e),
                                typeof console === t && r < s.levels.SILENT)
                              )
                                return "No console available for logging";
                            }),
                            (s.setDefaultLevel = function (e) {
                              l() || s.setLevel(e, !1);
                            }),
                            (s.enableAll = function (e) {
                              s.setLevel(s.levels.TRACE, e);
                            }),
                            (s.disableAll = function (e) {
                              s.setLevel(s.levels.SILENT, e);
                            });
                          var u = l();
                          null == u && (u = null == r ? "WARN" : r),
                            s.setLevel(u, !1);
                        }
                        var u = new l(),
                          p = {};
                        u.getLogger = function (e) {
                          if (
                            ("symbol" != typeof e && "string" != typeof e) ||
                            "" === e
                          )
                            throw new TypeError(
                              "You must supply a name when creating a logger."
                            );
                          var t = p[e];
                          return (
                            t ||
                              (t = p[e] =
                                new l(e, u.getLevel(), u.methodFactory)),
                            t
                          );
                        };
                        var h = typeof window !== t ? window.log : void 0;
                        return (
                          (u.noConflict = function () {
                            return (
                              typeof window !== t &&
                                window.log === u &&
                                (window.log = h),
                              u
                            );
                          }),
                          (u.getLoggers = function () {
                            return p;
                          }),
                          (u.default = u),
                          u
                        );
                      }),
                        void 0 === (a = n.call(t, r, t, e)) || (e.exports = a);
                    })();
                  },
                },
                t = {};
              function r(n) {
                var a = t[n];
                if (void 0 !== a) return a.exports;
                var i = (t[n] = { exports: {} });
                return e[n].call(i.exports, i, i.exports, r), i.exports;
              }
              (r.d = (e, t) => {
                for (var n in t)
                  r.o(t, n) &&
                    !r.o(e, n) &&
                    Object.defineProperty(e, n, { enumerable: !0, get: t[n] });
              }),
                (r.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t)),
                (r.r = (e) => {
                  "undefined" != typeof Symbol &&
                    Symbol.toStringTag &&
                    Object.defineProperty(e, Symbol.toStringTag, {
                      value: "Module",
                    }),
                    Object.defineProperty(e, "__esModule", { value: !0 });
                });
              var n = {};
              return (
                (() => {
                  "use strict";
                  r.r(n), r.d(n, { VideoSDKMetrics: () => ae });
                  const e = "inbound",
                    t = "outbound",
                    a = {
                      codec_id_in: "",
                      codec_in: {
                        mime_type: null,
                        clock_rate: null,
                        sdp_fmtp_line: null,
                      },
                      delta_jitter_ms_in: 0,
                      delta_rtt_ms_out: null,
                      percent_packets_lost_in: 0,
                      delta_packets_in: 0,
                      delta_packets_lost_in: 0,
                      total_packets_in: 0,
                      total_packets_lost_in: 0,
                      total_KBytes_in: 0,
                      delta_KBytes_in: 0,
                      delta_kbs_in: 0,
                      timestamp_in: null,
                      ssrc: "",
                      total_concealment_events: 0,
                      delta_concealment_events: 0,
                      total_inserted_samples_for_decelaration: 0,
                      delta_inserted_samples_for_decelaration: 0,
                      total_removed_samples_for_accelaration: 0,
                      delta_removed_samples_for_accelaration: 0,
                      direction: e,
                    },
                    i = {
                      codec_id_out: "",
                      codec_out: {
                        mime_type: null,
                        clock_rate: null,
                        sdp_fmtp_line: null,
                      },
                      delta_jitter_ms_out: 0,
                      delta_rtt_ms_out: null,
                      percent_packets_lost_out: 0,
                      delta_packets_out: 0,
                      delta_packets_lost_out: 0,
                      total_packets_out: 0,
                      total_packets_lost_out: 0,
                      total_KBytes_out: 0,
                      delta_KBytes_out: 0,
                      delta_kbs_out: 0,
                      timestamp_out: null,
                      ssrc: "",
                      direction: t,
                    },
                    s = {
                      codec_id_in: "",
                      size_in: { width: null, height: null, framerate: null },
                      codec_in: { mime_type: null, clock_rate: null },
                      delta_jitter_ms_in: 0,
                      percent_packets_lost_in: 0,
                      delta_packets_in: 0,
                      delta_packets_lost_in: 0,
                      total_packets_in: 0,
                      total_packets_lost_in: 0,
                      total_KBytes_in: 0,
                      delta_KBytes_in: 0,
                      delta_kbs_in: 0,
                      ssrc: "",
                      direction: e,
                    },
                    o = {
                      codec_id_out: "",
                      size_out: { width: null, height: null, framerate: null },
                      codec_out: { mime_type: null, clock_rate: null },
                      delta_jitter_ms_out: 0,
                      delta_rtt_ms_out: null,
                      percent_packets_lost_out: 0,
                      delta_packets_out: 0,
                      delta_packets_lost_out: 0,
                      total_packets_out: 0,
                      total_packets_lost_out: 0,
                      total_KBytes_out: 0,
                      delta_KBytes_out: 0,
                      delta_kbs_out: 0,
                      limitation_out: {
                        reason: null,
                        durations: null,
                        resolutionChanges: 0,
                      },
                      timestamp_out: null,
                      ssrc: "",
                      direction: t,
                    },
                    c = "inbound-rtp",
                    d = "bytesReceived",
                    l = "bytesSent",
                    u = "currentRoundTripTime",
                    p = "roundTripTime",
                    h = "fractionLost",
                    m = "frameHeight",
                    f = "frameWidth",
                    v = "qualityLimitationReason",
                    _ = "qualityLimitationDurations",
                    g = "qualityLimitationResolutionChanges",
                    y = "jitter",
                    b = "packetsLost",
                    w = "packetsReceived",
                    S = "packetsSent",
                    k = "responsesReceived",
                    R = "selected",
                    E = "totalRoundTripTime",
                    T = "roundTripTimeMeasurements",
                    P = "framesDecoded",
                    C = "framesEncoded",
                    x = "totalDecodeTime",
                    O = "totalEncodeTime",
                    D = "pliCount",
                    I = "nackCount",
                    M = "audio",
                    L = "video",
                    A = {
                      0: "ETHERNET",
                      2: "CELLULAR_5G",
                      3: "WIFI",
                      5: "CELLULAR_4G",
                      10: "CELLULAR",
                    },
                    j = "audio",
                    N = "video",
                    B = "network",
                    F = "data";
                  var U = r(43);
                  const W = () => `${new Date().toISOString()} | metrics`,
                    V = (e, t, r) => `${e} | ${t} | ${r}`;
                  U.setDefaultLevel(U.levels.TRACE);
                  const H = (e, t, r) => {
                      r ? U.debug(V(W(), e, t), r) : U.debug(V(W(), e, t));
                    },
                    Z = (e, t) => {
                      U.warn(V(W(), e, t));
                    },
                    q = (e, t) => {
                      U.error(V(W(), e, t));
                    },
                    z = "extractor   ",
                    G = (t, r, n) => {
                      if (!r) return null;
                      const c = {};
                      let d = r.audio[t];
                      d || (d = n === e ? { ...a } : { ...i }), (c.audio = d);
                      let l = r.video[t];
                      return (
                        l || (l = n === e ? { ...s } : { ...o }),
                        (c.video = l),
                        c
                      );
                    },
                    K = (e, t, r, n) => {
                      let a = !1;
                      const i = n[t].total_rtt_ms_out,
                        s = n[t].total_rtt_measure_out,
                        o = r ? r[t].total_rtt_ms_out : 0,
                        c = r ? r[t].total_rtt_measure_out : 0,
                        d = { rtt: null, totalRTT: i, totalRTTMeasurements: s };
                      if (e.timestamp === n[t].timestamp_out) return d;
                      if (!Object.prototype.hasOwnProperty.call(e, p)) return d;
                      if (
                        Object.prototype.hasOwnProperty.call(e, T) &&
                        ((a = !0),
                        0 === Number(e.roundTripTimeMeasurements) ||
                          Number(e.roundTripTimeMeasurements) - c === s)
                      )
                        return d;
                      const l = Number(1e3) * Number(e.roundTripTime);
                      let u = i + l,
                        h = s + 1;
                      return (
                        a &&
                          ((u = Number(1e3) * Number(e.totalRoundTripTime) - o),
                          (h = Number(e.roundTripTimeMeasurements) - c)),
                        { rtt: l, totalRTT: u, totalRTTMeasurements: h }
                      );
                    },
                    $ = (e, t, r) =>
                      e.timestamp === r[t].timestamp_out
                        ? null
                        : Object.prototype.hasOwnProperty.call(e, y)
                        ? Number(1e3) * (Number(e.jitter) || 0)
                        : null,
                    J = (e, t, r, n) => {
                      if (
                        !Object.prototype.hasOwnProperty.call(e, S) ||
                        !Object.prototype.hasOwnProperty.call(e, l)
                      )
                        return {
                          packetsSent: r[t].total_packets_out,
                          packetsLost: r[t].total_packets_lost_out,
                          bytesSent: r[t].total_KBytes_out,
                        };
                      const a =
                          Number(e.packetsSent) ||
                          0 - (n ? n[t].total_packets_out : 0),
                        i = a - r[t].total_packets_out,
                        s =
                          Number(e.bytesSent) / 1024 -
                          (n ? n[t].total_KBytes_out : 0),
                        o = s - r[t].total_KBytes_out,
                        c = e.timestamp || Date.now(),
                        d = n ? n.timestamp : null;
                      let u = r.timestamp;
                      !u && d && (u = d);
                      const p = u ? c - u : 0;
                      return {
                        packetsSent: a,
                        deltaPacketsSent: i,
                        KBytesSent: s,
                        deltaKBytesSent: o,
                        kbsSent: p > 0 ? ((0.008 * o * 1024) / p) * 1e3 : 0,
                      };
                    },
                    Q = (e, t, r, n) => {
                      let a = r[t].total_packets_lost_out,
                        i = 0,
                        s = 0;
                      return (
                        Object.prototype.hasOwnProperty.call(e, b) &&
                          ((a =
                            Number(e.packetsLost) ||
                            0 - (n ? n[t].total_packets_lost_out : 0)),
                          (i = a - r[t].total_packets_lost_out)),
                        Object.prototype.hasOwnProperty.call(e, h) &&
                          (s = Number(100 * e.fractionLost)),
                        { packetsLost: a, deltaPacketsLost: i, fractionLost: s }
                      );
                    },
                    Y = (e, t, r, n) => {
                      if (
                        !Object.prototype.hasOwnProperty.call(e, w) ||
                        !Object.prototype.hasOwnProperty.call(e, b) ||
                        !Object.prototype.hasOwnProperty.call(e, d)
                      )
                        return {
                          percent_packets_lost: r[t].percent_packets_lost_in,
                          packetsReceived: r[t].total_packets_in,
                          packetsLost: r[t].total_packets_lost_in,
                          bytesReceived: r[t].total_KBytes_in,
                        };
                      const a =
                          (Number(e.packetsReceived) || 0) -
                          (n ? n[t].total_packets_in : 0),
                        i =
                          (Number(e.packetsLost) || 0) -
                          (n ? n[t].total_packets_lost_in : 0),
                        s = i - r[t].total_packets_lost_in,
                        o = a - r[t].total_packets_in,
                        c =
                          a !== r[t].total_packets_in ? (100 * s) / (s + o) : 0,
                        l =
                          Number(e.bytesReceived) / 1024 -
                          (n ? n[t].total_KBytes_in : 0),
                        u = l - r[t].total_KBytes_in,
                        p = e.timestamp || Date.now(),
                        h = n ? n.timestamp : null;
                      let m = r.timestamp;
                      !m && h && (m = h);
                      const f = m ? p - m : 0;
                      return {
                        percentPacketsLost: c,
                        packetsReceived: a,
                        deltaPacketsReceived: o,
                        packetsLost: i,
                        deltaPacketsLost: s,
                        KBytesReceived: l,
                        deltaKBytesReceived: u,
                        kbsReceived: f > 0 ? ((0.008 * u * 1024) / f) * 1e3 : 0,
                      };
                    },
                    X = (e) =>
                      "relay" !== e.candidateType ? "" : e.relayProtocol || "",
                    ee = (e) =>
                      Object.prototype.hasOwnProperty.call(e, m) &&
                      Object.prototype.hasOwnProperty.call(e, f)
                        ? {
                            width: e.frameWidth || null,
                            height: e.frameHeight || null,
                            framerate: e.framesPerSecond,
                          }
                        : { width: null, height: null, framerate: null };
                  class te {
                    constructor(e, t) {
                      (this._callbacks = { onStatsCollected: null }),
                        (this._id = `collector-${t}`),
                        (this._moduleName = this._id),
                        (this._probeId = t),
                        (this._config = e),
                        (this._state = "idle"),
                        (this._statsReports = []);
                    }
                    registerCallback(e, t, r) {
                      e in this._callbacks
                        ? ((this._callbacks[e] = { callback: t, context: r }),
                          H(this._moduleName, `registered callback '${e}'`))
                        : q(
                            this._moduleName,
                            `can't register callback for '${e}' - not found`
                          );
                    }
                    unregisterCallback(e) {
                      e in this._callbacks
                        ? ((this._callbacks[e] = null),
                          delete this._callbacks[e],
                          H(this._moduleName, `unregistered callback '${e}'`))
                        : q(
                            this._moduleName,
                            `can't unregister callback for '${e}' - not found`
                          );
                    }
                    analyze(r, n) {
                      const d = ((e) => {
                        const t = {
                          name: "",
                          meetingId: "",
                          peerId: "",
                          timestamp: null,
                          count: 0,
                          audio: {},
                          video: {},
                          network: { infrastructure: 3 },
                          data: {
                            delta_kbs_bandwidth_in: 0,
                            delta_kbs_bandwidth_out: 0,
                            delta_rtt_connectivity_ms: null,
                            total_rtt_connectivity_ms: 0,
                          },
                        };
                        if (e) {
                          const t = {
                            ...e,
                            audio: {},
                            video: {},
                            data: { ...e.data },
                            network: { ...e.network },
                          };
                          return (
                            Object.keys(e.audio).forEach((r) => {
                              t.audio[r] = { ...e.audio[r] };
                            }),
                            Object.keys(e.video).forEach((r) => {
                              t.video[r] = { ...e.video[r] };
                            }),
                            t
                          );
                        }
                        return {
                          ...t,
                          audio: {},
                          video: {},
                          data: { ...t.data },
                          network: { ...t.network },
                        };
                      })(n);
                      (d.name = this._config.name),
                        (d.meetingId = this._config.meetingId),
                        (d.peerId = this._config.peerId),
                        (d.count = n ? n.count + 1 : 1);
                      let l = null;
                      return (
                        r.forEach((r) => {
                          !l && r.timestamp && (l = r.timestamp),
                            ((r, n, a, i) => {
                              if (!r) return [];
                              switch (r.type) {
                                case "candidate-pair":
                                  let s = !1;
                                  if (
                                    (r.nominated &&
                                      "succeeded" === r.state &&
                                      ((s = !0),
                                      H(
                                        z,
                                        `analyze() - got stats ${r.type} for ${a}`,
                                        r
                                      ),
                                      R in r && !r.selected && (s = !1)),
                                    s)
                                  ) {
                                    r.localCandidateId, r.remoteCandidateId;
                                    const e = ((e, t, r) => {
                                        const n =
                                            (e.bytesReceived || 0) / 1024 -
                                            (r ? r.data.total_KBytes_in : 0),
                                          a =
                                            (e.bytesSent || 0) / 1024 -
                                            (r ? r.data.total_KBytes_out : 0),
                                          i = e.timestamp || Date.now(),
                                          s = n - t.data.total_KBytes_in,
                                          o = a - t.data.total_KBytes_out,
                                          c = r ? r.timestamp : null;
                                        let d = t.timestamp;
                                        !d && c && (d = c);
                                        const l = d ? i - d : 0;
                                        return {
                                          total_KBytes_received: n,
                                          total_KBytes_sent: a,
                                          delta_KBytes_received: s,
                                          delta_KBytes_sent: o,
                                          kbs_speed_received:
                                            l > 0
                                              ? ((0.008 * s * 1024) / l) * 1e3
                                              : 0,
                                          kbs_speed_sent:
                                            l > 0
                                              ? ((0.008 * o * 1024) / l) * 1e3
                                              : 0,
                                        };
                                      })(r, n, i),
                                      t =
                                        (((e) => {
                                          e.availableIncomingBitrate,
                                            e.availableOutgoingBitrate;
                                        })(r),
                                        ((e, t, r, n) => {
                                          if (
                                            !Object.prototype.hasOwnProperty.call(
                                              e,
                                              u
                                            )
                                          )
                                            return {
                                              rtt: null,
                                              totalRTT:
                                                n.data
                                                  .total_rtt_connectivity_ms,
                                              totalRTTMeasurements:
                                                n.data
                                                  .total_rtt_connectivity_measure,
                                            };
                                          const a =
                                            Number(1e3) *
                                            Number(e.currentRoundTripTime);
                                          let i =
                                              n.data.total_rtt_connectivity_ms +
                                              a,
                                            s =
                                              n.data
                                                .total_rtt_connectivity_measure +
                                              1;
                                          return (
                                            Object.prototype.hasOwnProperty.call(
                                              e,
                                              E
                                            ) &&
                                              (i =
                                                Number(1e3) *
                                                  Number(e.totalRoundTripTime) -
                                                (r
                                                  ? r.data
                                                      .total_rtt_connectivity_ms
                                                  : 0)),
                                            Object.prototype.hasOwnProperty.call(
                                              e,
                                              k
                                            ) &&
                                              (s =
                                                Number(e.responsesReceived) -
                                                (r
                                                  ? r.data
                                                      .total_rtt_connectivity_measure
                                                  : 0)),
                                            {
                                              rtt: a,
                                              totalRTT: i,
                                              totalRTTMeasurements: s,
                                            }
                                          );
                                        })(r, 0, i, n));
                                    return [
                                      {
                                        type: F,
                                        value: {
                                          total_KBytes_in:
                                            e.total_KBytes_received,
                                        },
                                      },
                                      {
                                        type: F,
                                        value: {
                                          total_KBytes_out: e.total_KBytes_sent,
                                        },
                                      },
                                      {
                                        type: F,
                                        value: {
                                          delta_KBytes_in:
                                            e.delta_KBytes_received,
                                        },
                                      },
                                      {
                                        type: F,
                                        value: {
                                          delta_KBytes_out: e.delta_KBytes_sent,
                                        },
                                      },
                                      {
                                        type: F,
                                        value: {
                                          delta_kbs_in: e.kbs_speed_received,
                                        },
                                      },
                                      {
                                        type: F,
                                        value: {
                                          delta_kbs_out: e.kbs_speed_sent,
                                        },
                                      },
                                      {
                                        type: F,
                                        value: {
                                          delta_rtt_connectivity_ms: t.rtt,
                                        },
                                      },
                                    ];
                                  }
                                  break;
                                case "local-candidate":
                                  if (r.id === n.network.local_candidate_id)
                                    return [
                                      {
                                        type: B,
                                        value: {
                                          infrastructure: r.networkType,
                                        },
                                      },
                                      {
                                        type: B,
                                        value: {
                                          local_candidate_protocol:
                                            r.protocol || "",
                                        },
                                      },
                                      {
                                        type: B,
                                        value: {
                                          local_candidate_relay_protocol: X(r),
                                        },
                                      },
                                    ];
                                  break;
                                case c: {
                                  H(
                                    z,
                                    `analyze() - got stats ${r.type} for ${a}`,
                                    r
                                  );
                                  const t = r.ssrc,
                                    s = G(t, n, e);
                                  s && (s.timestamp = n.timestamp);
                                  const o = G(t, i, e);
                                  if (
                                    (o && (o.timestamp = i.timestamp),
                                    r.mediaType === M)
                                  ) {
                                    const e = Y(r, M, s, o),
                                      n = $(r, M, s),
                                      a = r.codecId || "",
                                      i = ((e, t, r, n) => {
                                        const a =
                                            Number(e.concealmentEvents) || 0,
                                          i =
                                            a -
                                            (r.audio.total_concealment_events ||
                                              0),
                                          s =
                                            Number(
                                              e.insertedSamplesForDeceleration
                                            ) || 0,
                                          o =
                                            s -
                                            (r.audio
                                              .total_inserted_samples_for_decelaration ||
                                              0),
                                          c =
                                            Number(
                                              e.removedSamplesForAcceleration
                                            ) || 0;
                                        return {
                                          totalConcealmentEvents: a,
                                          deltaConcealmentEvents: i,
                                          totalInsertedSamplesForDecelaration:
                                            s,
                                          deltaInsertedSamplesForDecelaration:
                                            o,
                                          totalRemovedSamplesForAccelaration: c,
                                          deltaRemovedSampleForAccelaration:
                                            c -
                                            (r.audio
                                              .total_removed_samples_for_accelaration ||
                                              0),
                                        };
                                      })(r, 0, s);
                                    return [
                                      {
                                        ssrc: t,
                                        type: j,
                                        value: { codec_id_in: a },
                                      },
                                      {
                                        ssrc: t,
                                        type: j,
                                        value: {
                                          total_packets_in: e.packetsReceived,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: j,
                                        value: {
                                          delta_packets_in:
                                            e.deltaPacketsReceived,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: j,
                                        value: {
                                          total_packets_lost_in: e.packetsLost,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: j,
                                        value: {
                                          delta_packets_lost_in:
                                            e.deltaPacketsLost,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: j,
                                        value: {
                                          percent_packets_lost_in:
                                            e.percentPacketsLost,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: j,
                                        value: {
                                          total_KBytes_in: e.KBytesReceived,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: j,
                                        value: {
                                          delta_KBytes_in:
                                            e.deltaKBytesReceived,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: j,
                                        value: { delta_kbs_in: e.kbsReceived },
                                      },
                                      {
                                        ssrc: t,
                                        type: j,
                                        value: { delta_jitter_ms_in: n },
                                      },
                                      {
                                        ssrc: t,
                                        type: j,
                                        value: {
                                          total_concealment_events:
                                            i.totalConcealmentEvents,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: j,
                                        value: {
                                          delta_concealment_events:
                                            i.deltaConcealmentEvents,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: j,
                                        value: {
                                          total_inserted_samples_for_decelaration:
                                            i.totalInsertedSamplesForDecelaration,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: j,
                                        value: {
                                          delta_inserted_samples_for_decelaration:
                                            i.deltaInsertedSamplesForDecelaration,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: j,
                                        value: {
                                          total_removed_samples_for_accelaration:
                                            i.totalRemovedSamplesForAccelaration,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: j,
                                        value: {
                                          delta_removed_samples_for_accelaration:
                                            i.deltaRemovedSampleForAccelaration,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: j,
                                        value: { track_in: r.trackId },
                                      },
                                      {
                                        ssrc: t,
                                        type: j,
                                        value: {
                                          track_id_in: r.trackIdentifier,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: j,
                                        value: {
                                          media_source_id: r.mediaSourceId,
                                        },
                                      },
                                    ];
                                  }
                                  if (r.mediaType === L) {
                                    ((e, t) => {
                                      if (
                                        !Object.prototype.hasOwnProperty.call(
                                          e,
                                          P
                                        ) ||
                                        !Object.prototype.hasOwnProperty.call(
                                          e,
                                          x
                                        )
                                      )
                                        return {
                                          delta_ms_decode_frame:
                                            t.video.delta_ms_decode_frame_in,
                                          frames_decoded:
                                            t.video.total_frames_decoded_in,
                                          total_decode_time:
                                            t.video.total_time_decoded_in,
                                        };
                                      e.framesDecoded,
                                        e.totalDecodeTime,
                                        t.video.total_time_decoded_in,
                                        t.video.total_frames_decoded_in;
                                    })(r, s);
                                    const e = Y(r, L, s, o),
                                      n = $(r, L, s),
                                      a =
                                        (r.decoderImplementation,
                                        r.codecId || null),
                                      i = ee(r);
                                    return (
                                      ((e, t, r) => {
                                        if (
                                          !Object.prototype.hasOwnProperty.call(
                                            e,
                                            D
                                          ) ||
                                          !Object.prototype.hasOwnProperty.call(
                                            e,
                                            I
                                          )
                                        )
                                          return {
                                            pliCount: t.total_pli_sent_in,
                                            nackCount: t.total_nack_sent_in,
                                            deltaPliCount: 0,
                                            deltaNackCount: 0,
                                          };
                                        e.pliCount,
                                          r && r.video.total_pli_sent_in,
                                          e.nackCount,
                                          r && r.video.total_nack_sent_in,
                                          t.video.total_pli_sent_in,
                                          t.video.total_nack_sent_in;
                                      })(r, s, o),
                                      [
                                        {
                                          ssrc: t,
                                          type: N,
                                          value: { codec_id_in: a },
                                        },
                                        {
                                          ssrc: t,
                                          type: N,
                                          value: {
                                            total_packets_in: e.packetsReceived,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: N,
                                          value: {
                                            delta_packets_in:
                                              e.deltaPacketsReceived,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: N,
                                          value: {
                                            total_packets_lost_in:
                                              e.packetsLost,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: N,
                                          value: {
                                            delta_packets_lost_in:
                                              e.deltaPacketsLost,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: N,
                                          value: {
                                            percent_packets_lost_in:
                                              e.percentPacketsLost,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: N,
                                          value: {
                                            total_KBytes_in: e.KBytesReceived,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: N,
                                          value: {
                                            delta_KBytes_in:
                                              e.deltaKBytesReceived,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: N,
                                          value: {
                                            delta_kbs_in: e.kbsReceived,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: N,
                                          value: { delta_jitter_ms_in: n },
                                        },
                                        {
                                          ssrc: t,
                                          type: N,
                                          value: { size_in: i },
                                        },
                                        {
                                          ssrc: t,
                                          type: N,
                                          value: { track_in: r.trackId },
                                        },
                                        {
                                          ssrc: t,
                                          type: N,
                                          value: {
                                            track_id_in: r.trackIdentifier,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: N,
                                          value: {
                                            media_source_id: r.mediaSourceId,
                                          },
                                        },
                                      ]
                                    );
                                  }
                                  break;
                                }
                                case "outbound-rtp": {
                                  H(
                                    z,
                                    `analyze() - got stats ${r.type} for ${a}`,
                                    r
                                  );
                                  const e = r.ssrc,
                                    s = G(e, n, t);
                                  s && (s.timestamp = n.timestamp);
                                  const o = G(e, i, t);
                                  if (
                                    (o && (o.timestamp = i.timestamp),
                                    r.mediaType === M)
                                  ) {
                                    const t = r.codecId || null,
                                      n = J(r, M, s, o);
                                    return [
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: { codec_id_out: t },
                                      },
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: {
                                          total_packets_out: n.packetsSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: {
                                          delta_packets_out: n.deltaPacketsSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: {
                                          total_KBytes_out: n.KBytesSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: {
                                          delta_KBytes_out: n.deltaKBytesSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: { delta_kbs_out: n.kbsSent },
                                      },
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: { track_out: r.trackId },
                                      },
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: {
                                          track_id_out: r.trackIdentifier,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: {
                                          media_source_id: r.mediaSourceId,
                                        },
                                      },
                                    ];
                                  }
                                  if (r.mediaType === L) {
                                    r.encoderImplementation;
                                    const t = r.codecId || null,
                                      n =
                                        (((e, t) => {
                                          if (
                                            !Object.prototype.hasOwnProperty.call(
                                              e,
                                              C
                                            ) ||
                                            !Object.prototype.hasOwnProperty.call(
                                              e,
                                              O
                                            )
                                          )
                                            return {
                                              delta_ms_encode_frame:
                                                t.video
                                                  .delta_ms_encode_frame_out,
                                              frames_encoded:
                                                t.video
                                                  .total_frames_encoded_out,
                                              total_encode_time:
                                                t.video.total_time_encoded_out,
                                            };
                                          e.framesEncoded,
                                            e.totalEncodeTime,
                                            t.video.total_time_encoded_out,
                                            t.video.total_frames_encoded_out;
                                        })(r, s),
                                        ee(r)),
                                      a = ((e) => {
                                        const t =
                                            Object.prototype.hasOwnProperty.call(
                                              e,
                                              v
                                            )
                                              ? e.qualityLimitationReason
                                              : null,
                                          r =
                                            Object.prototype.hasOwnProperty.call(
                                              e,
                                              g
                                            )
                                              ? e.qualityLimitationResolutionChanges
                                              : null,
                                          n =
                                            Object.prototype.hasOwnProperty.call(
                                              e,
                                              _
                                            )
                                              ? e.qualityLimitationDurations
                                              : null;
                                        return (
                                          n &&
                                            Object.keys(n).forEach((e) => {
                                              n[e] > 1e3 &&
                                                (n[e] = Number(n[e] / 1e3));
                                            }),
                                          {
                                            reason: t,
                                            durations: n,
                                            resolutionChanges: r,
                                          }
                                        );
                                      })(r),
                                      i =
                                        (((e, t, r) => {
                                          if (
                                            !Object.prototype.hasOwnProperty.call(
                                              e,
                                              D
                                            ) ||
                                            !Object.prototype.hasOwnProperty.call(
                                              e,
                                              I
                                            )
                                          )
                                            return {
                                              pliCount:
                                                t.total_pli_received_out,
                                              nackCount:
                                                t.total_nack_received_out,
                                              deltaPliCount: 0,
                                              deltaNackCount: 0,
                                            };
                                          e.pliCount,
                                            r && r.video.total_pli_received_out,
                                            e.nackCount,
                                            r &&
                                              r.video.total_nack_received_out,
                                            t.video.total_pli_received_out,
                                            t.video.total_nack_received_out;
                                        })(r, s, o),
                                        J(r, L, s, o));
                                    return [
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: { codec_id_out: t },
                                      },
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: {
                                          total_packets_out: i.packetsSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: {
                                          delta_packets_out: i.deltaPacketsSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: {
                                          total_KBytes_out: i.KBytesSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: {
                                          delta_KBytes_out: i.deltaKBytesSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: { delta_kbs_out: i.kbsSent },
                                      },
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: { size_out: n },
                                      },
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: { limitation_out: a },
                                      },
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: { track_out: r.trackId },
                                      },
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: {
                                          track_id_out: r.trackIdentifier,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: {
                                          media_source_id: r.mediaSourceId,
                                        },
                                      },
                                    ];
                                  }
                                  break;
                                }
                                case "media-source": {
                                  H(
                                    z,
                                    `analyze() - got stats ${r.type} for ${a}`,
                                    r
                                  );
                                  const e = [];
                                  return (
                                    Object.keys(n.audio).forEach((t) => {
                                      const i = n.audio[t];
                                      if (i.media_source_id === r.id) {
                                        H(
                                          z,
                                          `analyze() - got stats ${r.type} for ${a}`,
                                          r
                                        );
                                        var s = r.trackIdentifier;
                                        e.push({
                                          ssrc: i.ssrc,
                                          type: j,
                                          value: { track_id_out: s },
                                        });
                                      }
                                    }),
                                    Object.keys(n.video).forEach((t) => {
                                      const i = n.video[t];
                                      if (i.media_source_id === r.id) {
                                        H(
                                          z,
                                          `analyze() - got stats ${r.type} for ${a}`,
                                          r
                                        );
                                        var s = r.trackIdentifier;
                                        e.push({
                                          ssrc: i.ssrc,
                                          type: N,
                                          value: { track_id_out: s },
                                        });
                                      }
                                    }),
                                    e
                                  );
                                }
                                case "track": {
                                  H(
                                    z,
                                    `analyze() - got stats ${r.type} for ${a}`,
                                    r
                                  );
                                  const e = [];
                                  return (
                                    Object.keys(n.audio).forEach((t) => {
                                      const i = n.audio[t];
                                      if (
                                        i.track_in === r.id ||
                                        i.track_out === r.id
                                      ) {
                                        H(
                                          z,
                                          `analyze() - got stats ${r.type} for ${a}`,
                                          r
                                        );
                                        var s = r.trackIdentifier;
                                        r.id === i.track_in
                                          ? e.push({
                                              ssrc: i.ssrc,
                                              type: j,
                                              value: { track_id_in: s },
                                            })
                                          : e.push({
                                              ssrc: i.ssrc,
                                              type: j,
                                              value: { track_id_out: s },
                                            });
                                      }
                                    }),
                                    Object.keys(n.video).forEach((t) => {
                                      const i = n.video[t];
                                      if (
                                        i.track_in === r.id ||
                                        i.track_out === r.id
                                      ) {
                                        H(
                                          z,
                                          `analyze() - got stats ${r.type} for ${a}`,
                                          r
                                        );
                                        var s = r.trackIdentifier;
                                        r.id === i.track_in
                                          ? e.push({
                                              ssrc: i.ssrc,
                                              type: N,
                                              value: { track_id_in: s },
                                            })
                                          : e.push({
                                              ssrc: i.ssrc,
                                              type: N,
                                              value: { track_id_out: s },
                                            });
                                      }
                                    }),
                                    e
                                  );
                                }
                                case "codec":
                                  const o = [];
                                  return (
                                    Object.keys(n.audio).forEach((e) => {
                                      const t = n.audio[e];
                                      if (
                                        t.codec_id_in === r.id ||
                                        t.codec_id_out === r.id
                                      ) {
                                        H(
                                          z,
                                          `analyze() - got stats ${r.type} for ${a}`,
                                          r
                                        );
                                        const e = ((e) => ({
                                          channels: e.channels || null,
                                          clock_rate: e.clockRate || null,
                                          mime_type: e.mimeType || null,
                                          sdp_fmtp_line: e.sdpFmtpLine || null,
                                        }))(r);
                                        r.id === t.codec_id_in
                                          ? o.push({
                                              ssrc: t.ssrc,
                                              type: j,
                                              value: { codec_in: e },
                                            })
                                          : o.push({
                                              ssrc: t.ssrc,
                                              type: j,
                                              value: { codec_out: e },
                                            });
                                      }
                                    }),
                                    Object.keys(n.video).forEach((e) => {
                                      const t = n.video[e];
                                      if (
                                        t.codec_id_in === r.id ||
                                        t.codec_id_out === r.id
                                      ) {
                                        H(
                                          z,
                                          `analyze() - got stats ${r.type} for ${a}`,
                                          r
                                        );
                                        const e = ((e) => ({
                                          clock_rate: e.clockRate || null,
                                          mime_type: e.mimeType || null,
                                        }))(r);
                                        r.id === t.codec_id_in
                                          ? o.push({
                                              ssrc: t.ssrc,
                                              type: N,
                                              value: { codec_in: e },
                                            })
                                          : o.push({
                                              ssrc: t.ssrc,
                                              type: N,
                                              value: { codec_out: e },
                                            });
                                      }
                                    }),
                                    o
                                  );
                                case "remote-inbound-rtp": {
                                  H(
                                    z,
                                    `analyze() - got stats ${r.type} for ${a}`,
                                    r
                                  );
                                  const e = r.ssrc,
                                    s = G(e, n, t),
                                    o = G(e, i, t);
                                  if (r.kind === M) {
                                    const t = K(r, M, o, s),
                                      n = $(r, M, s),
                                      a = Q(r, M, s, o);
                                    return [
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: { delta_rtt_ms_out: t.rtt },
                                      },
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: { delta_jitter_ms_out: n },
                                      },
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: { timestamp_out: r.timestamp },
                                      },
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: {
                                          total_packets_lost_out: a.packetsLost,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: {
                                          delta_packets_lost_out:
                                            a.deltaPacketsLost,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: {
                                          percent_packets_lost_out:
                                            a.fractionLost,
                                        },
                                      },
                                    ];
                                  }
                                  if (r.kind === L) {
                                    const t = K(r, L, o, s),
                                      n = $(r, L, s),
                                      a = Q(r, L, s, o);
                                    return [
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: { delta_rtt_ms_out: t.rtt },
                                      },
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: { delta_jitter_ms_out: n },
                                      },
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: { timestamp_out: r.timestamp },
                                      },
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: {
                                          total_packets_lost_out: a.packetsLost,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: {
                                          delta_packets_lost_out:
                                            a.deltaPacketsLost,
                                        },
                                      },
                                    ];
                                  }
                                  break;
                                }
                                case "remote-outbound-rtp": {
                                  H(
                                    z,
                                    `analyze() - got stats ${r.type} for ${a}`,
                                    r
                                  );
                                  const e = r.ssrc,
                                    s = G(e, n, t),
                                    o = G(e, i, t);
                                  if (r.kind === M) {
                                    const t = K(r, M, o, s);
                                    return [
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: { delta_rtt_ms_in: t.rtt },
                                      },
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: { timestamp_in: r.timestamp },
                                      },
                                    ];
                                  }
                                  break;
                                }
                              }
                              return [];
                            })(r, d, d.name, null).forEach((e) => {
                              if (e.value && e.type)
                                if (e.ssrc) {
                                  let l = d[e.type][e.ssrc];
                                  l ||
                                    ((t = e.type),
                                    (n = r.type),
                                    (l =
                                      t === M
                                        ? n === c
                                          ? { ...a }
                                          : { ...i }
                                        : n === c
                                        ? { ...s }
                                        : { ...o }),
                                    (l.ssrc = e.ssrc),
                                    (d[e.type][e.ssrc] = l)),
                                    Object.keys(e.value).forEach((t) => {
                                      void 0 !== e.value[t] &&
                                        (l[t] = e.value[t]);
                                    });
                                } else
                                  Object.keys(e.value).forEach((t) => {
                                    void 0 !== e.value[t] &&
                                      (d[e.type][t] = e.value[t]);
                                  });
                              var t, n;
                            });
                        }),
                        (d.timestamp = l),
                        d
                      );
                    }
                    async collectStats() {
                      try {
                        const e =
                            await this._config.monitoringObject.getStats(),
                          t = this.analyze(
                            e,
                            this._statsReports.slice().pop() || null
                          );
                        return (
                          this._statsReports.push(t),
                          this.fireOnStatsCollected(t),
                          e
                        );
                      } catch (e) {
                        return q(this._moduleName, `got error ${e}`), null;
                      }
                    }
                    fireOnStatsCollected(r) {
                      if (this._callbacks.onStatsCollected) {
                        const n = {};
                        (n.meetingId = r.meetingId),
                          (n.peerId = r.peerId),
                          (n.name = r.name),
                          (n.audio = []),
                          (n.video = []),
                          Object.values(r.audio).forEach((a) => {
                            const i = {};
                            (i.network = A[r.network.infrastructure]),
                              (i.timestamp = r.timestamp),
                              a.direction == e
                                ? ((i.codec = a.codec_in.mime_type),
                                  (i.jitter = a.delta_jitter_ms_in),
                                  (i.bitrate = a.delta_kbs_in),
                                  (i.packetsLost = a.delta_packets_lost_in),
                                  (i.rtt =
                                    r.data.delta_rtt_connectivity_ms || 0),
                                  (i.totalPackets = a.delta_packets_in),
                                  (i.concealmentEvents =
                                    a.delta_concealment_events),
                                  (i.removedSampleForAccelaration =
                                    a.delta_removed_samples_for_accelaration),
                                  (i.insertedSamplesForDecelaration =
                                    a.delta_inserted_samples_for_decelaration),
                                  (i.trackId = a.track_id_in))
                                : a.direction == t &&
                                  ((i.codec = a.codec_out.mime_type),
                                  (i.jitter = a.delta_jitter_ms_out),
                                  (i.bitrate = a.delta_kbs_out),
                                  (i.packetsLost = a.delta_packets_lost_out),
                                  (i.rtt =
                                    r.data.delta_rtt_connectivity_ms || 0),
                                  (i.totalPackets = a.delta_packets_out),
                                  (i.trackId = a.track_id_out)),
                              n.audio.push(i);
                          }),
                          Object.values(r.video).forEach((a) => {
                            const i = {};
                            (i.network = A[r.network.infrastructure]),
                              (i.timestamp = r.timestamp),
                              a.direction == e
                                ? ((i.codec = a.codec_in.mime_type),
                                  (i.jitter = a.delta_jitter_ms_in),
                                  (i.bitrate = a.delta_kbs_in),
                                  (i.packetsLost = a.delta_packets_lost_in),
                                  (i.rtt =
                                    r.data.delta_rtt_connectivity_ms || 0),
                                  (i.totalPackets = a.delta_packets_in),
                                  (i.size = a.size_in),
                                  (i.trackId = a.track_id_in))
                                : a.direction == t &&
                                  ((i.codec = a.codec_out.mime_type),
                                  (i.jitter = a.delta_jitter_ms_out),
                                  (i.bitrate = a.delta_kbs_out),
                                  (i.packetsLost = a.delta_packets_lost_out),
                                  (i.rtt =
                                    r.data.delta_rtt_connectivity_ms || 0),
                                  (i.totalPackets = a.delta_packets_out),
                                  (i.limitation = a.limitation_out),
                                  (i.size = a.size_out),
                                  (i.trackId = a.track_id_out)),
                              n.video.push(i);
                          }),
                          this._callbacks.onStatsCollected.callback(n);
                      }
                    }
                  }
                  class re {
                    constructor(e) {
                      (this._id =
                        e.name && e.name.substr(0, 12).padEnd(12, " ")),
                        (this._moduleName = this._id),
                        (this._config = e),
                        (this._collector = new te(this._config, this._id));
                    }
                    get id() {
                      return this._id;
                    }
                    start() {
                      this._collectorIntervalId
                        ? Z("Probe already started.")
                        : (H(this._moduleName, "Probe Started"),
                          (this._collectorIntervalId = setInterval(() => {
                            H(this._moduleName, "Collector collecting stats"),
                              this._collector.collectStats();
                          }, this._config.refreshEvery)));
                    }
                    stop() {
                      this._collectorIntervalId
                        ? (clearInterval(this._collectorIntervalId),
                          H(this._moduleName, "Probe Stopped"))
                        : Z("Probe not running, Please start first.");
                    }
                    set onStatsCollected(e) {
                      e
                        ? this._collector.registerCallback(
                            "onStatsCollected",
                            e
                          )
                        : this._collector.unregisterCallback(
                            "onStatsCollected"
                          );
                    }
                  }
                  const ne = {
                    refreshEvery: 2e3,
                    startAfter: 0,
                    stopAfter: -1,
                    verbose: !1,
                    peerId: "peerId",
                    meetingId: "meetingId",
                    name: "name",
                  };
                  class ae {
                    constructor(e) {
                      var t;
                      (this._config = { defaultConfig: ne, ...e }),
                        (this._probes = []),
                        (t = this._config.verbose || !1),
                        U.setLevel(t ? U.levels.TRACE : U.levels.INFO),
                        H("VideoSDKMetrics", "VideoSDKMetrics initialized");
                    }
                    get probes() {
                      return this._probes;
                    }
                    addNewProbe(e, t) {
                      if (!e) throw new Error("undefined monitoring object");
                      const r = { monitoringObject: e, ...t, ...this._config },
                        n = new re(r);
                      return this._probes.push(n), n;
                    }
                    removeExistingProbe(e) {
                      if (!e) throw new Error("undefined probe");
                      e.stop(),
                        (this._probes = this._probes.filter(
                          (t) => e.id !== t.id
                        ));
                    }
                    startAllProbes() {
                      this._probes.forEach((e, t) => {
                        e.start();
                      });
                    }
                    stopAllProbes() {
                      this._probes.forEach((e) => e.stop());
                    }
                  }
                })(),
                n
              );
            })());
        },
        2186: function (e, t) {
          "use strict";
          var r =
            (this && this.__awaiter) ||
            function (e, t, r, n) {
              return new (r || (r = Promise))(function (a, i) {
                function s(e) {
                  try {
                    c(n.next(e));
                  } catch (e) {
                    i(e);
                  }
                }
                function o(e) {
                  try {
                    c(n.throw(e));
                  } catch (e) {
                    i(e);
                  }
                }
                function c(e) {
                  var t;
                  e.done
                    ? a(e.value)
                    : ((t = e.value),
                      t instanceof r
                        ? t
                        : new r(function (e) {
                            e(t);
                          })).then(s, o);
                }
                c((n = n.apply(e, t || [])).next());
              });
            };
          Object.defineProperty(t, "__esModule", { value: !0 });
          t.AwaitQueue = class {
            constructor(
              { ClosedErrorClass: e = Error, StoppedErrorClass: t = Error } = {
                ClosedErrorClass: Error,
                StoppedErrorClass: Error,
              }
            ) {
              (this.closed = !1),
                (this.pendingTasks = []),
                (this.ClosedErrorClass = Error),
                (this.StoppedErrorClass = Error),
                (this.ClosedErrorClass = e),
                (this.StoppedErrorClass = t);
            }
            get size() {
              return this.pendingTasks.length;
            }
            close() {
              if (!this.closed) {
                this.closed = !0;
                for (const e of this.pendingTasks)
                  (e.stopped = !0),
                    e.reject(new this.ClosedErrorClass("AwaitQueue closed"));
                this.pendingTasks.length = 0;
              }
            }
            push(e, t) {
              return r(this, void 0, void 0, function* () {
                if (this.closed)
                  throw new this.ClosedErrorClass("AwaitQueue closed");
                if ("function" != typeof e)
                  throw new TypeError("given task is not a function");
                if (!e.name && t)
                  try {
                    Object.defineProperty(e, "name", { value: t });
                  } catch (e) {}
                return new Promise((r, n) => {
                  const a = {
                    task: e,
                    name: t,
                    resolve: r,
                    reject: n,
                    stopped: !1,
                    enqueuedAt: new Date(),
                    executedAt: void 0,
                  };
                  this.pendingTasks.push(a),
                    1 === this.pendingTasks.length && this.next();
                });
              });
            }
            stop() {
              if (!this.closed) {
                for (const e of this.pendingTasks)
                  (e.stopped = !0),
                    e.reject(new this.StoppedErrorClass("AwaitQueue stopped"));
                this.pendingTasks.length = 0;
              }
            }
            dump() {
              const e = new Date();
              return this.pendingTasks.map((t) => ({
                task: t.task,
                name: t.name,
                enqueuedTime: t.executedAt
                  ? t.executedAt.getTime() - t.enqueuedAt.getTime()
                  : e.getTime() - t.enqueuedAt.getTime(),
                executingTime: t.executedAt
                  ? e.getTime() - t.executedAt.getTime()
                  : 0,
              }));
            }
            next() {
              return r(this, void 0, void 0, function* () {
                const e = this.pendingTasks[0];
                e &&
                  (yield this.executeTask(e),
                  this.pendingTasks.shift(),
                  this.next());
              });
            }
            executeTask(e) {
              return r(this, void 0, void 0, function* () {
                if (!e.stopped) {
                  e.executedAt = new Date();
                  try {
                    const t = yield e.task();
                    if (e.stopped) return;
                    e.resolve(t);
                  } catch (t) {
                    if (e.stopped) return;
                    e.reject(t);
                  }
                }
              });
            }
          };
        },
        8962: (e, t, r) => {
          "use strict";
          r.d(t, { v: () => n });
          var n = {
            networkPriorities: {
              audio: "high",
              dominatingVideo: "high",
              otherVideos: "medium",
              screenShare: "medium",
            },
            aspectRatios: {
              fourThree: { label: "fourThree", value: 1.333 },
              oneSixNine: { label: "oneSixNine", value: 1.777 },
            },
            audioProfiles: {
              speech_low_quality: {
                sampleRate: 16e3,
                bitRate: 24,
                sampleSize: 16,
                stereo: !1,
                dtx: !0,
                fec: !0,
                maxPlaybackRate: 16e3,
                packetTime: 20,
                autoGainControl: !0,
                echoCancellation: !0,
                noiseSuppression: !0,
                channelCount: 1,
              },
              speech_standard: {
                sampleRate: 32e3,
                bitRate: 24,
                sampleSize: 24,
                stereo: !1,
                dtx: !0,
                fec: !0,
                maxPlaybackRate: 32e3,
                packetTime: 30,
                autoGainControl: !0,
                echoCancellation: !0,
                noiseSuppression: !0,
                channelCount: 1,
              },
              music_standard: {
                sampleRate: 48e3,
                bitRate: 40,
                sampleSize: 32,
                stereo: !1,
                dtx: !1,
                fec: !0,
                maxPlaybackRate: 48e3,
                packetTime: 40,
                autoGainControl: !1,
                echoCancellation: !1,
                noiseSuppression: !1,
                channelCount: 1,
              },
              standard_stereo: {
                sampleRate: 48e3,
                sampleSize: 32,
                bitRate: 64,
                stereo: !0,
                dtx: !1,
                fec: !0,
                maxPlaybackRate: 48e3,
                packetTime: 40,
                autoGainControl: !1,
                echoCancellation: !1,
                noiseSuppression: !1,
                channelCount: 2,
              },
              high_quality: {
                sampleRate: 48e3,
                sampleSize: 32,
                bitRate: 128,
                stereo: !1,
                dtx: !1,
                fec: !0,
                maxPlaybackRate: 48e3,
                packetTime: 60,
                autoGainControl: !1,
                echoCancellation: !1,
                noiseSuppression: !1,
                channelCount: 1,
              },
              high_quality_stereo: {
                sampleRate: 48e3,
                sampleSize: 32,
                bitRate: 192,
                stereo: !0,
                dtx: !1,
                fec: !0,
                maxPlaybackRate: 48e3,
                packetTime: 60,
                autoGainControl: !1,
                echoCancellation: !1,
                noiseSuppression: !1,
                channelCount: 2,
              },
            },
            videoProfiles: {
              h90p_w160p: {
                width: 160,
                height: 90,
                bitRate: 6e4,
                frameRate: 15,
                aspectRatio: "oneSixNine",
              },
              h180p_w320p: {
                width: 320,
                height: 180,
                bitRate: 12e4,
                frameRate: 15,
                aspectRatio: "oneSixNine",
              },
              h216p_w384p: {
                width: 384,
                height: 216,
                bitRate: 18e4,
                frameRate: 15,
                aspectRatio: "oneSixNine",
              },
              h360p_w640p: {
                width: 640,
                height: 360,
                bitRate: 3e5,
                frameRate: 20,
                aspectRatio: "oneSixNine",
              },
              h540p_w960p: {
                width: 960,
                height: 540,
                bitRate: 6e5,
                frameRate: 25,
                aspectRatio: "oneSixNine",
              },
              h720p_w1280p: {
                width: 1280,
                height: 720,
                bitRate: 2e6,
                frameRate: 30,
                aspectRatio: "oneSixNine",
              },
              h1080p_w1920p: {
                width: 1920,
                height: 1080,
                bitRate: 3e6,
                frameRate: 30,
                aspectRatio: "oneSixNine",
              },
              h1440p_w2560p: {
                width: 2560,
                height: 1440,
                bitRate: 5e6,
                frameRate: 30,
                aspectRatio: "oneSixNine",
              },
              h2160p_w3840p: {
                width: 3840,
                height: 2160,
                bitRate: 8e6,
                frameRate: 30,
                aspectRatio: "oneSixNine",
              },
              h120p_w160p: {
                width: 160,
                height: 120,
                bitRate: 8e4,
                frameRate: 15,
                aspectRatio: "fourThree",
              },
              h180p_w240p: {
                width: 240,
                height: 180,
                bitRate: 1e5,
                frameRate: 15,
                aspectRatio: "fourThree",
              },
              h240p_w320p: {
                width: 320,
                height: 240,
                bitRate: 15e4,
                frameRate: 15,
                aspectRatio: "fourThree",
              },
              h360p_w480p: {
                width: 480,
                height: 360,
                bitRate: 225e3,
                frameRate: 20,
                aspectRatio: "fourThree",
              },
              h480p_w640p: {
                width: 640,
                height: 480,
                bitRate: 3e5,
                frameRate: 25,
                aspectRatio: "fourThree",
              },
              h540p_w720p: {
                width: 720,
                height: 540,
                bitRate: 45e4,
                frameRate: 30,
                aspectRatio: "fourThree",
              },
              h720p_w960p: {
                width: 960,
                height: 720,
                bitRate: 15e5,
                frameRate: 30,
                aspectRatio: "fourThree",
              },
              h1080p_w1440p: {
                width: 1440,
                height: 1080,
                bitRate: 25e5,
                frameRate: 30,
                aspectRatio: "fourThree",
              },
              h1440p_w1920p: {
                width: 1920,
                height: 1440,
                bitRate: 35e5,
                frameRate: 30,
                aspectRatio: "fourThree",
              },
            },
            screenShareProfiles: {
              h360p_30fps: {
                width: 640,
                height: 360,
                bitRate: 2e5,
                frameRate: 3,
              },
              h720p_5fps: {
                width: 1280,
                height: 720,
                bitRate: 4e5,
                frameRate: 5,
              },
              h720p_15fps: {
                width: 1280,
                height: 720,
                bitRate: 1e6,
                frameRate: 15,
              },
              h1080p_15fps: {
                width: 1920,
                height: 1080,
                bitRate: 15e5,
                frameRate: 15,
              },
              h1080p_30fps: {
                width: 1920,
                height: 1080,
                bitRate: 1e6,
                frameRate: 15,
              },
            },
            simulcastProfiles: {
              3840: [
                { scaleResolutionDownBy: 12, maxBitRate: 15e4 },
                { scaleResolutionDownBy: 6, maxBitRate: 5e5 },
                { scaleResolutionDownBy: 1, maxBitRate: 1e7 },
              ],
              1920: [
                { scaleResolutionDownBy: 6, maxBitRate: 15e4 },
                { scaleResolutionDownBy: 3, maxBitRate: 5e5 },
                { scaleResolutionDownBy: 1, maxBitRate: 35e5 },
              ],
              1280: [
                { scaleResolutionDownBy: 4, maxBitRate: 15e4 },
                { scaleResolutionDownBy: 2, maxBitRate: 5e5 },
                { scaleResolutionDownBy: 1, maxBitRate: 12e5 },
              ],
              640: [
                { scaleResolutionDownBy: 2, maxBitRate: 15e4 },
                { scaleResolutionDownBy: 1, maxBitRate: 5e5 },
              ],
              320: [{ scaleResolutionDownBy: 1, maxBitRate: 15e4 }],
            },
            requestTimeout: 2e4,
            requestRetries: 3,
            transportOptions: { tcp: !0 },
            videoKSVCEncodings: [{ scalabilityMode: "S3T3_KEY" }],
            videoSVCEncodings: [{ scalabilityMode: "S3T3", dtx: !0 }],
          };
        },
        6900: (e, t, r) => {
          "use strict";
          r.d(t, { H: () => a, R: () => n });
          var n = {
              INVALID_API_KEY: 4001,
              INVALID_TOKEN: 4002,
              INVALID_MEETING_ID: 4003,
              INVALID_PARTICIPANT_ID: 4004,
              DUPLICATE_PARTICIPANT: 4005,
              ACCOUNT_DEACTIVATED: 4006,
              ACCOUNT_DISCONTINUED: 4007,
              INVALID_PERMISSIONS: 4008,
              MAX_PARTCIPANT_REACHED: 4009,
              MAX_SPEAKER_REACHED: 4010,
              START_RECORDING_FAILED: 4011,
              STOP_RECORDING_FAILED: 4012,
              START_LIVESTREAM_FAILED: 4013,
              STOP_LIVESTREAM_FAILED: 4014,
              INVALID_LIVESTREAM_CONFIG: 4015,
              START_HLS_FAILED: 4016,
              STOP_HLS_FAILED: 4017,
              RECORDING_FAILED: 5001,
              LIVESTREAM_FAILED: 5002,
              HLS_FAILED: 5003,
              ERROR_GET_VIDEO_MEDIA: 3011,
              ERROR_GET_AUDIO_MEDIA: 3012,
              ERROR_GET_DISPLAY_MEDIA: 3013,
              ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED: 3014,
              ERROR_GET_AUDIO_MEDIA_PERMISSION_DENIED: 3015,
              ERROR_GET_DISPLAY_MEDIA_PERMISSION_DENIED: 3016,
            },
            a = {
              ERROR_GET_VIDEO_MEDIA: {
                code: 3011,
                message: "Your browser/Device does not support Video.",
              },
              ERROR_GET_AUDIO_MEDIA: {
                code: 3012,
                message: "Your browser/Device does not support Audio.",
              },
              ERROR_GET_DISPLAY_MEDIA: {
                code: 3013,
                message: "Your browser/Device does not support Screen Sharing.",
              },
              ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED: {
                code: 3014,
                message: "Video capture permission denied.",
              },
              ERROR_GET_AUDIO_MEDIA_PERMISSION_DENIED: {
                code: 3015,
                message: "Audio capture permission denied.",
              },
              ERROR_GET_DISPLAY_MEDIA_PERMISSION_DENIED: {
                code: 3016,
                message: "Screen sharing permission denied.",
              },
            };
        },
        6380: (e, t, r) => {
          "use strict";
          r.d(t, { o: () => n });
          var n = {
            HLS_STARTING: "HLS_STARTING",
            HLS_STARTED: "HLS_STARTED",
            HLS_PLAYABLE: "HLS_PLAYABLE",
            HLS_STOPPING: "HLS_STOPPING",
            HLS_STOPPED: "HLS_STOPPED",
          };
        },
        3430: (e, t, r) => {
          "use strict";
          r.d(t, { S: () => n });
          var n = { CONFERENCE: "CONFERENCE", VIEWER: "VIEWER" };
        },
        8225: (e, t, r) => {
          "use strict";
          r.r(t),
            r.d(t, {
              CameraDeviceInfo: () => Pt,
              DeviceInfo: () => Tt,
              MicrophoneDeviceInfo: () => Ct,
              VideoSDK: () => si,
              ZujoSDK: () => oi,
            });
          var n = r(1002),
            a = r(5861),
            i = r(5671),
            s = r(3144),
            o = r(4942),
            c = r(7757),
            d = r.n(c),
            l = r(1206),
            u = r.n(l);
          function p(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t &&
                (n = n.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, n);
            }
            return r;
          }
          function h(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2
                ? p(Object(r), !0).forEach(function (t) {
                    (0, o.Z)(e, t, r[t]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    e,
                    Object.getOwnPropertyDescriptors(r)
                  )
                : p(Object(r)).forEach(function (t) {
                    Object.defineProperty(
                      e,
                      t,
                      Object.getOwnPropertyDescriptor(r, t)
                    );
                  });
            }
            return e;
          }
          function m(e) {
            return (
              "Minified Redux error #" +
              e +
              "; visit https://redux.js.org/Errors?code=" +
              e +
              " for the full message or use the non-minified dev environment for full errors. "
            );
          }
          var f =
              ("function" == typeof Symbol && Symbol.observable) ||
              "@@observable",
            v = function () {
              return Math.random()
                .toString(36)
                .substring(7)
                .split("")
                .join(".");
            },
            _ = {
              INIT: "@@redux/INIT" + v(),
              REPLACE: "@@redux/REPLACE" + v(),
              PROBE_UNKNOWN_ACTION: function () {
                return "@@redux/PROBE_UNKNOWN_ACTION" + v();
              },
            };
          function g(e) {
            if ("object" != typeof e || null === e) return !1;
            for (var t = e; null !== Object.getPrototypeOf(t); )
              t = Object.getPrototypeOf(t);
            return Object.getPrototypeOf(e) === t;
          }
          function y(e, t, r) {
            var n;
            if (
              ("function" == typeof t && "function" == typeof r) ||
              ("function" == typeof r && "function" == typeof arguments[3])
            )
              throw new Error(m(0));
            if (
              ("function" == typeof t &&
                void 0 === r &&
                ((r = t), (t = void 0)),
              void 0 !== r)
            ) {
              if ("function" != typeof r) throw new Error(m(1));
              return r(y)(e, t);
            }
            if ("function" != typeof e) throw new Error(m(2));
            var a = e,
              i = t,
              s = [],
              o = s,
              c = !1;
            function d() {
              o === s && (o = s.slice());
            }
            function l() {
              if (c) throw new Error(m(3));
              return i;
            }
            function u(e) {
              if ("function" != typeof e) throw new Error(m(4));
              if (c) throw new Error(m(5));
              var t = !0;
              return (
                d(),
                o.push(e),
                function () {
                  if (t) {
                    if (c) throw new Error(m(6));
                    (t = !1), d();
                    var r = o.indexOf(e);
                    o.splice(r, 1), (s = null);
                  }
                }
              );
            }
            function p(e) {
              if (!g(e)) throw new Error(m(7));
              if (void 0 === e.type) throw new Error(m(8));
              if (c) throw new Error(m(9));
              try {
                (c = !0), (i = a(i, e));
              } finally {
                c = !1;
              }
              for (var t = (s = o), r = 0; r < t.length; r++) {
                (0, t[r])();
              }
              return e;
            }
            function h(e) {
              if ("function" != typeof e) throw new Error(m(10));
              (a = e), p({ type: _.REPLACE });
            }
            function v() {
              var e,
                t = u;
              return (
                ((e = {
                  subscribe: function (e) {
                    if ("object" != typeof e || null === e)
                      throw new Error(m(11));
                    function r() {
                      e.next && e.next(l());
                    }
                    return r(), { unsubscribe: t(r) };
                  },
                })[f] = function () {
                  return this;
                }),
                e
              );
            }
            return (
              p({ type: _.INIT }),
              ((n = {
                dispatch: p,
                subscribe: u,
                getState: l,
                replaceReducer: h,
              })[f] = v),
              n
            );
          }
          function b() {
            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++)
              t[r] = arguments[r];
            return 0 === t.length
              ? function (e) {
                  return e;
                }
              : 1 === t.length
              ? t[0]
              : t.reduce(function (e, t) {
                  return function () {
                    return e(t.apply(void 0, arguments));
                  };
                });
          }
          function w() {
            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++)
              t[r] = arguments[r];
            return function (e) {
              return function () {
                var r = e.apply(void 0, arguments),
                  n = function () {
                    throw new Error(m(15));
                  },
                  a = {
                    getState: r.getState,
                    dispatch: function () {
                      return n.apply(void 0, arguments);
                    },
                  },
                  i = t.map(function (e) {
                    return e(a);
                  });
                return (
                  (n = b.apply(void 0, i)(r.dispatch)),
                  h(h({}, r), {}, { dispatch: n })
                );
              };
            };
          }
          function S(e) {
            return function (t) {
              var r = t.dispatch,
                n = t.getState;
              return function (t) {
                return function (a) {
                  return "function" == typeof a ? a(r, n, e) : t(a);
                };
              };
            };
          }
          var k = S();
          k.withExtraArgument = S;
          const R = k;
          var E = r(3196),
            T = r.n(E);
          function P(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t &&
                (n = n.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, n);
            }
            return r;
          }
          function C(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2
                ? P(Object(r), !0).forEach(function (t) {
                    (0, o.Z)(e, t, r[t]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    e,
                    Object.getOwnPropertyDescriptors(r)
                  )
                : P(Object(r)).forEach(function (t) {
                    Object.defineProperty(
                      e,
                      t,
                      Object.getOwnPropertyDescriptor(r, t)
                    );
                  });
            }
            return e;
          }
          var x = {
            url: null,
            state: "new",
            activeSpeakerId: null,
            statsPeerId: null,
            faceDetection: !1,
          };
          const O = function () {
            var e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : x,
              t = arguments.length > 1 ? arguments[1] : void 0;
            switch (t.type) {
              case "SET_ROOM_URL":
                var r = t.payload.url;
                return C(C({}, e), {}, { url: r });
              case "SET_ROOM_STATE":
                var n = t.payload.state;
                return C(
                  C({}, e),
                  {},
                  "connected" === n
                    ? { state: n }
                    : { state: n, activeSpeakerId: null, statsPeerId: null }
                );
              case "SET_ROOM_ACTIVE_SPEAKER":
                var a = t.payload.peerId;
                return C(C({}, e), {}, { activeSpeakerId: a });
              case "SET_ROOM_STATS_PEER_ID":
                var i = t.payload.peerId;
                return e.statsPeerId === i
                  ? C(C({}, e), {}, { statsPeerId: null })
                  : C(C({}, e), {}, { statsPeerId: i });
              case "SET_FACE_DETECTION":
                var s = t.payload;
                return C(C({}, e), {}, { faceDetection: s });
              case "REMOVE_PEER":
                var o = t.payload.peerId,
                  c = C({}, e);
                return (
                  o && o === e.activeSpeakerId && (c.activeSpeakerId = null),
                  o && o === e.statsPeerId && (c.statsPeerId = null),
                  c
                );
              default:
                return e;
            }
          };
          function D(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t &&
                (n = n.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, n);
            }
            return r;
          }
          function I(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2
                ? D(Object(r), !0).forEach(function (t) {
                    (0, o.Z)(e, t, r[t]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    e,
                    Object.getOwnPropertyDescriptors(r)
                  )
                : D(Object(r)).forEach(function (t) {
                    Object.defineProperty(
                      e,
                      t,
                      Object.getOwnPropertyDescriptor(r, t)
                    );
                  });
            }
            return e;
          }
          var M = {
            id: null,
            displayName: null,
            displayNameSet: !1,
            device: null,
            canSendMic: !1,
            canSendWebcam: !1,
            canChangeWebcam: !1,
            webcamInProgress: !1,
            shareInProgress: !1,
            audioOnly: !1,
            audioOnlyInProgress: !1,
            audioMuted: !1,
            restartIceInProgress: !1,
          };
          const L = function () {
            var e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : M,
              t = arguments.length > 1 ? arguments[1] : void 0;
            switch (t.type) {
              case "SET_ROOM_STATE":
                var r = t.payload.state;
                return "closed" === r
                  ? I(
                      I({}, e),
                      {},
                      {
                        webcamInProgress: !1,
                        shareInProgress: !1,
                        audioOnly: !1,
                        audioOnlyInProgress: !1,
                        audioMuted: !1,
                        restartIceInProgress: !1,
                      }
                    )
                  : e;
              case "SET_ME":
                var n = t.payload,
                  a = n.peerId,
                  i = n.displayName,
                  s = n.displayNameSet,
                  o = n.device;
                return I(
                  I({}, e),
                  {},
                  { id: a, displayName: i, displayNameSet: s, device: o }
                );
              case "SET_MEDIA_CAPABILITIES":
                var c = t.payload,
                  d = c.canSendMic,
                  l = c.canSendWebcam;
                return I(I({}, e), {}, { canSendMic: d, canSendWebcam: l });
              case "SET_CAN_CHANGE_WEBCAM":
                var u = t.payload;
                return I(I({}, e), {}, { canChangeWebcam: u });
              case "SET_WEBCAM_IN_PROGRESS":
                var p = t.payload.flag;
                return I(I({}, e), {}, { webcamInProgress: p });
              case "SET_SHARE_IN_PROGRESS":
                var h = t.payload.flag;
                return I(I({}, e), {}, { shareInProgress: h });
              case "SET_DISPLAY_NAME":
                var m = t.payload.displayName;
                return (
                  m || (m = e.displayName),
                  I(I({}, e), {}, { displayName: m, displayNameSet: !0 })
                );
              case "SET_AUDIO_ONLY_STATE":
                var f = t.payload.enabled;
                return I(I({}, e), {}, { audioOnly: f });
              case "SET_AUDIO_ONLY_IN_PROGRESS":
                var v = t.payload.flag;
                return I(I({}, e), {}, { audioOnlyInProgress: v });
              case "SET_AUDIO_MUTED_STATE":
                var _ = t.payload.enabled;
                return I(I({}, e), {}, { audioMuted: _ });
              case "SET_RESTART_ICE_IN_PROGRESS":
                var g = t.payload.flag;
                return I(I({}, e), {}, { restartIceInProgress: g });
              default:
                return e;
            }
          };
          function A(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t &&
                (n = n.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, n);
            }
            return r;
          }
          function j(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2
                ? A(Object(r), !0).forEach(function (t) {
                    (0, o.Z)(e, t, r[t]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    e,
                    Object.getOwnPropertyDescriptors(r)
                  )
                : A(Object(r)).forEach(function (t) {
                    Object.defineProperty(
                      e,
                      t,
                      Object.getOwnPropertyDescriptor(r, t)
                    );
                  });
            }
            return e;
          }
          var N = {};
          const B = function () {
            var e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : N,
              t = arguments.length > 1 ? arguments[1] : void 0;
            switch (t.type) {
              case "SET_ROOM_STATE":
                var r = t.payload.state;
                return "closed" === r ? {} : e;
              case "ADD_PRODUCER":
                var n = t.payload.producer;
                return j(j({}, e), {}, (0, o.Z)({}, n.id, n));
              case "REMOVE_PRODUCER":
                var a = t.payload.producerId,
                  i = j({}, e);
                return delete i[a], i;
              case "SET_PRODUCER_PAUSED":
                var s = t.payload.producerId,
                  c = e[s],
                  d = j(j({}, c), {}, { paused: !0 });
                return j(j({}, e), {}, (0, o.Z)({}, s, d));
              case "SET_PRODUCER_RESUMED":
                var l = t.payload.producerId,
                  u = e[l],
                  p = j(j({}, u), {}, { paused: !1 });
                return j(j({}, e), {}, (0, o.Z)({}, l, p));
              case "SET_PRODUCER_TRACK":
                var h = t.payload,
                  m = h.producerId,
                  f = h.track,
                  v = e[m],
                  _ = j(j({}, v), {}, { track: f });
                return j(j({}, e), {}, (0, o.Z)({}, m, _));
              case "SET_PRODUCER_SCORE":
                var g = t.payload,
                  y = g.producerId,
                  b = g.score,
                  w = e[y];
                if (!w) return e;
                var S = j(j({}, w), {}, { score: b });
                return j(j({}, e), {}, (0, o.Z)({}, y, S));
              default:
                return e;
            }
          };
          function F(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t &&
                (n = n.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, n);
            }
            return r;
          }
          function U(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2
                ? F(Object(r), !0).forEach(function (t) {
                    (0, o.Z)(e, t, r[t]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    e,
                    Object.getOwnPropertyDescriptors(r)
                  )
                : F(Object(r)).forEach(function (t) {
                    Object.defineProperty(
                      e,
                      t,
                      Object.getOwnPropertyDescriptor(r, t)
                    );
                  });
            }
            return e;
          }
          var W = {};
          const V = function () {
            var e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : W,
              t = arguments.length > 1 ? arguments[1] : void 0;
            switch (t.type) {
              case "SET_ROOM_STATE":
                var r = t.payload.state;
                return "closed" === r ? {} : e;
              case "ADD_DATA_PRODUCER":
                var n = t.payload.dataProducer;
                return U(U({}, e), {}, (0, o.Z)({}, n.id, n));
              case "REMOVE_DATA_PRODUCER":
                var a = t.payload.dataProducerId,
                  i = U({}, e);
                return delete i[a], i;
              default:
                return e;
            }
          };
          var H = r(2982);
          function Z(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t &&
                (n = n.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, n);
            }
            return r;
          }
          function q(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2
                ? Z(Object(r), !0).forEach(function (t) {
                    (0, o.Z)(e, t, r[t]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    e,
                    Object.getOwnPropertyDescriptors(r)
                  )
                : Z(Object(r)).forEach(function (t) {
                    Object.defineProperty(
                      e,
                      t,
                      Object.getOwnPropertyDescriptor(r, t)
                    );
                  });
            }
            return e;
          }
          var z = {};
          function G(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t &&
                (n = n.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, n);
            }
            return r;
          }
          function K(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2
                ? G(Object(r), !0).forEach(function (t) {
                    (0, o.Z)(e, t, r[t]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    e,
                    Object.getOwnPropertyDescriptors(r)
                  )
                : G(Object(r)).forEach(function (t) {
                    Object.defineProperty(
                      e,
                      t,
                      Object.getOwnPropertyDescriptor(r, t)
                    );
                  });
            }
            return e;
          }
          var $ = {};
          function J(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t &&
                (n = n.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, n);
            }
            return r;
          }
          function Q(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2
                ? J(Object(r), !0).forEach(function (t) {
                    (0, o.Z)(e, t, r[t]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    e,
                    Object.getOwnPropertyDescriptors(r)
                  )
                : J(Object(r)).forEach(function (t) {
                    Object.defineProperty(
                      e,
                      t,
                      Object.getOwnPropertyDescriptor(r, t)
                    );
                  });
            }
            return e;
          }
          var Y = {};
          var X = [];
          const ee = (function (e) {
            for (var t = Object.keys(e), r = {}, n = 0; n < t.length; n++) {
              var a = t[n];
              0, "function" == typeof e[a] && (r[a] = e[a]);
            }
            var i,
              s = Object.keys(r);
            try {
              !(function (e) {
                Object.keys(e).forEach(function (t) {
                  var r = e[t];
                  if (void 0 === r(void 0, { type: _.INIT }))
                    throw new Error(m(12));
                  if (void 0 === r(void 0, { type: _.PROBE_UNKNOWN_ACTION() }))
                    throw new Error(m(13));
                });
              })(r);
            } catch (e) {
              i = e;
            }
            return function (e, t) {
              if ((void 0 === e && (e = {}), i)) throw i;
              for (var n = !1, a = {}, o = 0; o < s.length; o++) {
                var c = s[o],
                  d = r[c],
                  l = e[c],
                  u = d(l, t);
                if (void 0 === u) {
                  t && t.type;
                  throw new Error(m(14));
                }
                (a[c] = u), (n = n || u !== l);
              }
              return (n = n || s.length !== Object.keys(e).length) ? a : e;
            };
          })({
            room: O,
            me: L,
            producers: B,
            dataProducers: V,
            peers: function () {
              var e =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : z,
                t = arguments.length > 1 ? arguments[1] : void 0;
              switch (t.type) {
                case "SET_ROOM_STATE":
                  var r = t.payload.state;
                  return "closed" === r ? {} : e;
                case "ADD_PEER":
                  var n = t.payload.peer;
                  return q(q({}, e), {}, (0, o.Z)({}, n.id, n));
                case "REMOVE_PEER":
                  var a = t.payload.peerId,
                    i = q({}, e);
                  return delete i[a], i;
                case "SET_PEER_DISPLAY_NAME":
                  var s = t.payload,
                    c = s.displayName,
                    d = s.peerId,
                    l = e[d];
                  if (!l) throw new Error("no Peer found");
                  var u = q(q({}, l), {}, { displayName: c });
                  return q(q({}, e), {}, (0, o.Z)({}, u.id, u));
                case "ADD_CONSUMER":
                  var p = t.payload,
                    h = p.consumer,
                    m = p.peerId,
                    f = e[m];
                  if (!f) throw new Error("no Peer found for new Consumer");
                  var v = [].concat((0, H.Z)(f.consumers), [h.id]),
                    _ = q(q({}, f), {}, { consumers: v });
                  return q(q({}, e), {}, (0, o.Z)({}, _.id, _));
                case "REMOVE_CONSUMER":
                  var g = t.payload,
                    y = g.consumerId,
                    b = g.peerId,
                    w = e[b];
                  if (!w) return e;
                  var S = w.consumers.indexOf(y);
                  if (-1 === S) throw new Error("Consumer not found");
                  var k = w.consumers.slice();
                  k.splice(S, 1);
                  var R = q(q({}, w), {}, { consumers: k });
                  return q(q({}, e), {}, (0, o.Z)({}, R.id, R));
                case "ADD_DATA_CONSUMER":
                  var E = t.payload,
                    T = E.dataConsumer,
                    P = E.peerId;
                  if (!P) return e;
                  var C = e[P];
                  if (!C) throw new Error("no Peer found for new DataConsumer");
                  var x = [].concat((0, H.Z)(C.dataConsumers), [T.id]),
                    O = q(q({}, C), {}, { dataConsumers: x });
                  return q(q({}, e), {}, (0, o.Z)({}, O.id, O));
                case "REMOVE_DATA_CONSUMER":
                  var D = t.payload,
                    I = D.dataConsumerId,
                    M = D.peerId;
                  if (!M) return e;
                  var L = e[M];
                  if (!L) return e;
                  var A = L.dataConsumers.indexOf(I);
                  if (-1 === A) throw new Error("DataConsumer not found");
                  var j = L.dataConsumers.slice();
                  j.splice(A, 1);
                  var N = q(q({}, L), {}, { dataConsumers: j });
                  return q(q({}, e), {}, (0, o.Z)({}, N.id, N));
                default:
                  return e;
              }
            },
            consumers: function () {
              var e =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : $,
                t = arguments.length > 1 ? arguments[1] : void 0;
              switch (t.type) {
                case "SET_ROOM_STATE":
                  var r = t.payload.state;
                  return "closed" === r ? {} : e;
                case "ADD_CONSUMER":
                  var n = t.payload.consumer;
                  return K(K({}, e), {}, (0, o.Z)({}, n.id, n));
                case "REMOVE_CONSUMER":
                  var a = t.payload.consumerId,
                    i = K({}, e);
                  return delete i[a], i;
                case "SET_CONSUMER_PAUSED":
                  var s,
                    c = t.payload,
                    d = c.consumerId,
                    l = c.originator,
                    u = e[d];
                  return (
                    (s = K(
                      K({}, u),
                      {},
                      "local" === l
                        ? { locallyPaused: !0 }
                        : { remotelyPaused: !0 }
                    )),
                    K(K({}, e), {}, (0, o.Z)({}, d, s))
                  );
                case "SET_CONSUMER_RESUMED":
                  var p,
                    h = t.payload,
                    m = h.consumerId,
                    f = h.originator,
                    v = e[m];
                  return (
                    (p = K(
                      K({}, v),
                      {},
                      "local" === f
                        ? { locallyPaused: !1 }
                        : { remotelyPaused: !1 }
                    )),
                    K(K({}, e), {}, (0, o.Z)({}, m, p))
                  );
                case "SET_CONSUMER_CURRENT_LAYERS":
                  var _ = t.payload,
                    g = _.consumerId,
                    y = _.spatialLayer,
                    b = _.temporalLayer,
                    w = e[g],
                    S = K(
                      K({}, w),
                      {},
                      { currentSpatialLayer: y, currentTemporalLayer: b }
                    );
                  return K(K({}, e), {}, (0, o.Z)({}, g, S));
                case "SET_CONSUMER_PREFERRED_LAYERS":
                  var k = t.payload,
                    R = k.consumerId,
                    E = k.spatialLayer,
                    T = k.temporalLayer,
                    P = e[R],
                    C = K(
                      K({}, P),
                      {},
                      { preferredSpatialLayer: E, preferredTemporalLayer: T }
                    );
                  return K(K({}, e), {}, (0, o.Z)({}, R, C));
                case "SET_CONSUMER_PRIORITY":
                  var x = t.payload,
                    O = x.consumerId,
                    D = x.priority,
                    I = e[O],
                    M = K(K({}, I), {}, { priority: D });
                  return K(K({}, e), {}, (0, o.Z)({}, O, M));
                case "SET_CONSUMER_TRACK":
                  var L = t.payload,
                    A = L.consumerId,
                    j = L.track,
                    N = e[A],
                    B = K(K({}, N), {}, { track: j });
                  return K(K({}, e), {}, (0, o.Z)({}, A, B));
                case "SET_CONSUMER_SCORE":
                  var F = t.payload,
                    U = F.consumerId,
                    W = F.score,
                    V = e[U];
                  if (!V) return e;
                  var H = K(K({}, V), {}, { score: W });
                  return K(K({}, e), {}, (0, o.Z)({}, U, H));
                default:
                  return e;
              }
            },
            dataConsumers: function () {
              var e =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : Y,
                t = arguments.length > 1 ? arguments[1] : void 0;
              switch (t.type) {
                case "SET_ROOM_STATE":
                  var r = t.payload.state;
                  return "closed" === r ? {} : e;
                case "ADD_DATA_CONSUMER":
                  var n = t.payload.dataConsumer;
                  return Q(Q({}, e), {}, (0, o.Z)({}, n.id, n));
                case "REMOVE_DATA_CONSUMER":
                  var a = t.payload.dataConsumerId,
                    i = Q({}, e);
                  return delete i[a], i;
                default:
                  return e;
              }
            },
            notifications: function () {
              var e =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : X,
                t = arguments.length > 1 ? arguments[1] : void 0;
              switch (t.type) {
                case "ADD_NOTIFICATION":
                  var r = t.payload.notification;
                  return [].concat((0, H.Z)(e), [r]);
                case "REMOVE_NOTIFICATION":
                  var n = t.payload.notificationId;
                  return e.filter(function (e) {
                    return e.id !== n;
                  });
                case "REMOVE_ALL_NOTIFICATIONS":
                  return [];
                default:
                  return e;
              }
            },
          });
          var te = r(3003);
          function re(e, t, r) {
            if (!t.has(e))
              throw new TypeError(
                "attempted to " + r + " private field on non-instance"
              );
            return t.get(e);
          }
          function ne(e, t) {
            return (function (e, t) {
              return t.get ? t.get.call(e) : t.value;
            })(e, re(e, t, "get"));
          }
          function ae(e, t, r) {
            return (
              (function (e, t, r) {
                if (t.set) t.set.call(e, r);
                else {
                  if (!t.writable)
                    throw new TypeError(
                      "attempted to set read only private field"
                    );
                  t.value = r;
                }
              })(e, re(e, t, "set"), r),
              r
            );
          }
          var ie = r(7187),
            se = r(885),
            oe =
              (r(3003).default,
              (0, s.Z)(function e() {
                (0, i.Z)(this, e), (this.roomClient = null);
              })),
            ce = new ((function () {
              function e() {
                (0, i.Z)(this, e), e.instance || (e.instance = new oe());
              }
              return (
                (0, s.Z)(e, [
                  {
                    key: "getInstance",
                    value: function () {
                      return e.instance;
                    },
                  },
                ]),
                e
              );
            })())();
          Object.freeze(ce);
          var de = ce.getInstance(),
            le = (function () {
              function e(t) {
                (0, i.Z)(this, e),
                  (this.id = t.id),
                  (this.kind = t.track.kind),
                  (this.codec = t.codec),
                  (this.track = t.track),
                  (this.producerOrConsumer = t.instance),
                  t.appData &&
                    !0 === t.appData.share &&
                    "video" === t.track.kind &&
                    (this.kind = "share"),
                  t.appData &&
                    !0 === t.appData.share &&
                    "audio" === t.track.kind &&
                    (this.kind = "shareAudio");
              }
              return (
                (0, s.Z)(e, [
                  {
                    key: "pause",
                    value: function () {
                      de.roomClient._pauseConsumer(this.producerOrConsumer);
                    },
                  },
                  {
                    key: "resume",
                    value: function () {
                      de.roomClient._resumeConsumer(this.producerOrConsumer);
                    },
                  },
                  {
                    key: "paused",
                    get: function () {
                      return this.producerOrConsumer.paused;
                    },
                  },
                ]),
                e
              );
            })();
          function ue(e, t) {
            var r =
              ("undefined" != typeof Symbol && e[Symbol.iterator]) ||
              e["@@iterator"];
            if (!r) {
              if (
                Array.isArray(e) ||
                (r = (function (e, t) {
                  if (!e) return;
                  if ("string" == typeof e) return pe(e, t);
                  var r = Object.prototype.toString.call(e).slice(8, -1);
                  "Object" === r && e.constructor && (r = e.constructor.name);
                  if ("Map" === r || "Set" === r) return Array.from(e);
                  if (
                    "Arguments" === r ||
                    /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                  )
                    return pe(e, t);
                })(e)) ||
                (t && e && "number" == typeof e.length)
              ) {
                r && (e = r);
                var n = 0,
                  a = function () {};
                return {
                  s: a,
                  n: function () {
                    return n >= e.length
                      ? { done: !0 }
                      : { done: !1, value: e[n++] };
                  },
                  e: function (e) {
                    throw e;
                  },
                  f: a,
                };
              }
              throw new TypeError(
                "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
              );
            }
            var i,
              s = !0,
              o = !1;
            return {
              s: function () {
                r = r.call(e);
              },
              n: function () {
                var e = r.next();
                return (s = e.done), e;
              },
              e: function (e) {
                (o = !0), (i = e);
              },
              f: function () {
                try {
                  s || null == r.return || r.return();
                } finally {
                  if (o) throw i;
                }
              },
            };
          }
          function pe(e, t) {
            (null == t || t > e.length) && (t = e.length);
            for (var r = 0, n = new Array(t); r < t; r++) n[r] = e[r];
            return n;
          }
          var he = "stream-enabled",
            me = "stream-disabled",
            fe = "media-status-changed",
            ve = "video-quality-changed",
            _e = (function () {
              function e(t) {
                var r = this;
                (0, i.Z)(this, e),
                  (0, o.Z)(
                    this,
                    "captureImage",
                    (0, a.Z)(
                      d().mark(function e() {
                        var t,
                          i,
                          s,
                          o,
                          c,
                          l,
                          u,
                          p,
                          h = arguments;
                        return d().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  (t =
                                    h.length > 0 && void 0 !== h[0]
                                      ? h[0]
                                      : {}),
                                    (i = t.height),
                                    (s = t.width),
                                    (e.prev = 1),
                                    (o = (0, H.Z)(r.streams.values())),
                                    (c = ue(o)),
                                    (e.prev = 4),
                                    c.s();
                                case 6:
                                  if ((l = c.n()).done) {
                                    e.next = 21;
                                    break;
                                  }
                                  if ("video" != (u = l.value).kind) {
                                    e.next = 19;
                                    break;
                                  }
                                  return (
                                    (e.prev = 9),
                                    e.delegateYield(
                                      d().mark(function e() {
                                        var t, r, n, o;
                                        return d().wrap(function (e) {
                                          for (;;)
                                            switch ((e.prev = e.next)) {
                                              case 0:
                                                return (
                                                  (t =
                                                    new MediaStream()).addTrack(
                                                    u.track
                                                  ),
                                                  ((r =
                                                    document.createElement(
                                                      "video"
                                                    )).srcObject = t),
                                                  (r.playsInline = !0),
                                                  ((n =
                                                    document.createElement(
                                                      "canvas"
                                                    )).id = "canvasId"),
                                                  (e.next = 9),
                                                  new Promise(function (e, t) {
                                                    r.addEventListener(
                                                      "loadeddata",
                                                      (0, a.Z)(
                                                        d().mark(function a() {
                                                          var o, c, l, u, p, h;
                                                          return d().wrap(
                                                            function (a) {
                                                              for (;;)
                                                                switch (
                                                                  (a.prev =
                                                                    a.next)
                                                                ) {
                                                                  case 0:
                                                                    return (
                                                                      (o =
                                                                        r.videoWidth),
                                                                      (c =
                                                                        r.videoHeight),
                                                                      (l =
                                                                        16 / 9),
                                                                      null ==
                                                                        i &&
                                                                        null ==
                                                                          s &&
                                                                        ((i =
                                                                          c),
                                                                        (s =
                                                                          o)),
                                                                      (null ==
                                                                        i &&
                                                                        null ==
                                                                          i) ||
                                                                        ((i <=
                                                                          0 ||
                                                                          i >
                                                                            c) &&
                                                                          (i =
                                                                            c)),
                                                                      (null ==
                                                                        s &&
                                                                        null ==
                                                                          s) ||
                                                                        ((s <=
                                                                          0 ||
                                                                          s >
                                                                            o) &&
                                                                          (s =
                                                                            o)),
                                                                      null ==
                                                                        i &&
                                                                        (i =
                                                                          s /
                                                                          l),
                                                                      null ==
                                                                        s &&
                                                                        (s =
                                                                          i *
                                                                          l),
                                                                      (n.width =
                                                                        s),
                                                                      (n.height =
                                                                        i),
                                                                      (a.prev = 9),
                                                                      (a.next = 12),
                                                                      r.play()
                                                                    );
                                                                  case 12:
                                                                    document.body.appendChild(
                                                                      r
                                                                    ),
                                                                      (u =
                                                                        (n.width -
                                                                          o *
                                                                            l) /
                                                                        2),
                                                                      (p =
                                                                        (n.height -
                                                                          c *
                                                                            l) /
                                                                        2),
                                                                      n
                                                                        .getContext(
                                                                          "2d"
                                                                        )
                                                                        .clearRect(
                                                                          0,
                                                                          0,
                                                                          u / 2,
                                                                          p / 2
                                                                        ),
                                                                      n
                                                                        .getContext(
                                                                          "2d"
                                                                        )
                                                                        .drawImage(
                                                                          r,
                                                                          0,
                                                                          0
                                                                        ),
                                                                      (h = n
                                                                        .toDataURL(
                                                                          "image/jpeg"
                                                                        )
                                                                        .split(
                                                                          ";base64,"
                                                                        )[1]),
                                                                      document.body.appendChild(
                                                                        n
                                                                      ),
                                                                      document.body.removeChild(
                                                                        n
                                                                      ),
                                                                      document.body.removeChild(
                                                                        r
                                                                      ),
                                                                      e(h),
                                                                      (a.next = 28);
                                                                    break;
                                                                  case 24:
                                                                    (a.prev = 24),
                                                                      (a.t0 =
                                                                        a.catch(
                                                                          9
                                                                        )),
                                                                      t(a.t0),
                                                                      console.log(
                                                                        "error in video",
                                                                        a.t0
                                                                      );
                                                                  case 28:
                                                                  case "end":
                                                                    return a.stop();
                                                                }
                                                            },
                                                            a,
                                                            null,
                                                            [[9, 24]]
                                                          );
                                                        })
                                                      )
                                                    );
                                                  })
                                                );
                                              case 9:
                                                return (
                                                  (o = e.sent),
                                                  e.abrupt("return", { v: o })
                                                );
                                              case 11:
                                              case "end":
                                                return e.stop();
                                            }
                                        }, e);
                                      })(),
                                      "t0",
                                      11
                                    )
                                  );
                                case 11:
                                  if (((p = e.t0), "object" !== (0, n.Z)(p))) {
                                    e.next = 14;
                                    break;
                                  }
                                  return e.abrupt("return", p.v);
                                case 14:
                                  e.next = 19;
                                  break;
                                case 16:
                                  (e.prev = 16),
                                    (e.t1 = e.catch(9)),
                                    console.error("err on image capture", e.t1);
                                case 19:
                                  e.next = 6;
                                  break;
                                case 21:
                                  e.next = 26;
                                  break;
                                case 23:
                                  (e.prev = 23), (e.t2 = e.catch(4)), c.e(e.t2);
                                case 26:
                                  return (e.prev = 26), c.f(), e.finish(26);
                                case 29:
                                  throw new Error(
                                    "Camera must be on to capture an image"
                                  );
                                case 32:
                                  (e.prev = 32),
                                    (e.t3 = e.catch(1)),
                                    console.error(
                                      "Error in captureImage::",
                                      e.t3
                                    ),
                                    de.roomClient._videosdkLogs &&
                                      de.roomClient._videosdkLogs.pushLogs({
                                        logText: "Error on image capture",
                                        logType: "ERROR",
                                        attributes: { error: e.t3.message },
                                      });
                                case 36:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          null,
                          [
                            [1, 32],
                            [4, 23, 26, 29],
                            [9, 16],
                          ]
                        );
                      })
                    )
                  ),
                  (this.id = t.id),
                  (this.displayName = t.displayName),
                  (this.streams = new Map()),
                  (this.quality = "low"),
                  (this.local = t.local || !1),
                  (this.pinState = { cam: !1, share: !1 }),
                  (this.webcamOn = !1),
                  (this.micOn = !1),
                  (this.mode = t.mode),
                  (this.metaData = t.metaData),
                  (this.eventEmitter = new ie.EventEmitter());
              }
              var t, r, c, l;
              return (
                (0, s.Z)(e, [
                  {
                    key: "_setPinState",
                    value: function (e) {
                      null != e.cam && (this.pinState.cam = e.cam),
                        null != e.share && (this.pinState.share = e.share);
                    },
                  },
                  {
                    key: "remove",
                    value: function () {
                      de.roomClient.removePeer(this.id);
                    },
                  },
                  {
                    key: "enableMic",
                    value: function () {
                      de.roomClient.enablePeerMic(this.id);
                    },
                  },
                  {
                    key: "disableMic",
                    value: function () {
                      de.roomClient.disablePeerMic(this.id);
                    },
                  },
                  {
                    key: "enableWebcam",
                    value: function () {
                      de.roomClient.enablePeerWebcam(this.id);
                    },
                  },
                  {
                    key: "disableWebcam",
                    value: function () {
                      de.roomClient.disablePeerWebcam(this.id);
                    },
                  },
                  {
                    key: "addStream",
                    value: function (e) {
                      this.streams.set(e.id, e),
                        "video" !== e.kind ||
                          this.local ||
                          de.roomClient.setConsumerQuality(e.id, this.quality),
                        this.eventEmitter.emit(he, e);
                    },
                  },
                  {
                    key: "updateStream",
                    value: function (e) {
                      this.streams.set(e.id, e), this.eventEmitter.emit(he, e);
                    },
                  },
                  {
                    key: "deleteStream",
                    value: function (e) {
                      var t = this.streams.get(e);
                      if (null != t)
                        return (
                          this.streams.delete(e),
                          this.eventEmitter.emit(me, t),
                          t
                        );
                    },
                  },
                  {
                    key: "updateParticipantMediaState",
                    value: function (e, t) {
                      "audio" == e
                        ? (this.micOn = t)
                        : "video" == e && (this.webcamOn = t),
                        this.eventEmitter.emit(fe, {
                          peerId: this.id,
                          kind: e,
                          newStatus: t,
                        });
                    },
                  },
                  {
                    key: "videoQualityChanged",
                    value: function (e, t) {
                      this.eventEmitter.emit(ve, {
                        peerId: this.id,
                        prevQuality: e,
                        currentQuality: t,
                      });
                    },
                  },
                  {
                    key: "setQuality",
                    value: function (e) {
                      this.quality === e ||
                        this.local ||
                        ((this.quality = e),
                        (0, H.Z)(this.streams.entries()).forEach(function (t) {
                          var r = t[1];
                          "video" === r.kind &&
                            de.roomClient.setConsumerQuality(r.id, e);
                        }));
                    },
                  },
                  {
                    key: "setViewPort",
                    value: function (e, t) {
                      (0, H.Z)(this.streams.entries()).forEach(function (r) {
                        var n = r[1];
                        "video" === n.kind &&
                          de.roomClient.setViewPort(n.producerOrConsumer, e, t);
                      });
                    },
                  },
                  {
                    key: "pin",
                    value: function (e) {
                      switch (e) {
                        case "SHARE_AND_CAM":
                        case void 0:
                          this._setPinState({ cam: !0, share: !0 });
                          break;
                        case "CAM":
                          this._setPinState({ cam: !0 });
                          break;
                        case "SHARE":
                          this._setPinState({ share: !0 });
                          break;
                        default:
                          throw new Error("Unknown pin type");
                      }
                      de.roomClient.pinStateChange({
                        peerId: this.id,
                        state: this.pinState,
                      });
                    },
                  },
                  {
                    key: "unpin",
                    value: function (e) {
                      switch (e) {
                        case "SHARE_AND_CAM":
                        case void 0:
                          this._setPinState({ cam: !1, share: !1 });
                          break;
                        case "CAM":
                          this._setPinState({ cam: !1 });
                          break;
                        case "SHARE":
                          this._setPinState({ share: !1 });
                          break;
                        default:
                          throw new Error("Unknown unpin type");
                      }
                      de.roomClient.pinStateChange({
                        peerId: this.id,
                        state: this.pinState,
                      });
                    },
                  },
                  {
                    key: "switchTo",
                    value:
                      ((l = (0, a.Z)(
                        d().mark(function e(t) {
                          var r, n, a;
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (r = t.meetingId),
                                      (n = t.payload),
                                      (a = t.token),
                                      (e.next = 3),
                                      de.roomClient.switchPeerRoom({
                                        peerId: this.id,
                                        roomId: r,
                                        payload: n,
                                        token: a,
                                      })
                                    );
                                  case 3:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return l.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getVideoStats",
                    value:
                      ((c = (0, a.Z)(
                        d().mark(function e() {
                          var t, r, n, a, i;
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (!this.local) {
                                      e.next = 6;
                                      break;
                                    }
                                    return (
                                      (e.next = 3),
                                      de.roomClient.getVideoRemoteStats()
                                    );
                                  case 3:
                                    return e.abrupt("return", e.sent);
                                  case 6:
                                    (t = (0, H.Z)(this.streams.entries())),
                                      (r = ue(t)),
                                      (e.prev = 8),
                                      r.s();
                                  case 10:
                                    if ((n = r.n()).done) {
                                      e.next = 18;
                                      break;
                                    }
                                    if (
                                      ((a = (0, se.Z)(n.value, 2)),
                                      (i = a[0]),
                                      "video" != a[1].kind)
                                    ) {
                                      e.next = 16;
                                      break;
                                    }
                                    return (
                                      (e.next = 15),
                                      de.roomClient.getConsumerRemoteStats(i)
                                    );
                                  case 15:
                                    return e.abrupt("return", e.sent);
                                  case 16:
                                    e.next = 10;
                                    break;
                                  case 18:
                                    e.next = 23;
                                    break;
                                  case 20:
                                    (e.prev = 20),
                                      (e.t0 = e.catch(8)),
                                      r.e(e.t0);
                                  case 23:
                                    return (e.prev = 23), r.f(), e.finish(23);
                                  case 26:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[8, 20, 23, 26]]
                          );
                        })
                      )),
                      function () {
                        return c.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getShareStats",
                    value:
                      ((r = (0, a.Z)(
                        d().mark(function e() {
                          var t, r, n, a, i;
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (!this.local) {
                                      e.next = 6;
                                      break;
                                    }
                                    return (
                                      (e.next = 3),
                                      de.roomClient.getShareRemoteStats()
                                    );
                                  case 3:
                                    return e.abrupt("return", e.sent);
                                  case 6:
                                    (t = (0, H.Z)(this.streams.entries())),
                                      (r = ue(t)),
                                      (e.prev = 8),
                                      r.s();
                                  case 10:
                                    if ((n = r.n()).done) {
                                      e.next = 18;
                                      break;
                                    }
                                    if (
                                      ((a = (0, se.Z)(n.value, 2)),
                                      (i = a[0]),
                                      "share" != a[1].kind)
                                    ) {
                                      e.next = 16;
                                      break;
                                    }
                                    return (
                                      (e.next = 15),
                                      de.roomClient.getConsumerRemoteStats(i)
                                    );
                                  case 15:
                                    return e.abrupt("return", e.sent);
                                  case 16:
                                    e.next = 10;
                                    break;
                                  case 18:
                                    e.next = 23;
                                    break;
                                  case 20:
                                    (e.prev = 20),
                                      (e.t0 = e.catch(8)),
                                      r.e(e.t0);
                                  case 23:
                                    return (e.prev = 23), r.f(), e.finish(23);
                                  case 26:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[8, 20, 23, 26]]
                          );
                        })
                      )),
                      function () {
                        return r.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getAudioStats",
                    value:
                      ((t = (0, a.Z)(
                        d().mark(function e() {
                          var t, r, n, a, i;
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (this.micOn) {
                                      e.next = 2;
                                      break;
                                    }
                                    return e.abrupt("return", []);
                                  case 2:
                                    if (!this.local) {
                                      e.next = 8;
                                      break;
                                    }
                                    return (
                                      (e.next = 5),
                                      de.roomClient.getAudioRemoteStats()
                                    );
                                  case 5:
                                    return e.abrupt("return", e.sent);
                                  case 8:
                                    (t = (0, H.Z)(this.streams.entries())),
                                      (r = ue(t)),
                                      (e.prev = 10),
                                      r.s();
                                  case 12:
                                    if ((n = r.n()).done) {
                                      e.next = 20;
                                      break;
                                    }
                                    if (
                                      ((a = (0, se.Z)(n.value, 2)),
                                      (i = a[0]),
                                      "audio" != a[1].kind)
                                    ) {
                                      e.next = 18;
                                      break;
                                    }
                                    return (
                                      (e.next = 17),
                                      de.roomClient.getConsumerRemoteStats(i)
                                    );
                                  case 17:
                                    return e.abrupt("return", e.sent);
                                  case 18:
                                    e.next = 12;
                                    break;
                                  case 20:
                                    e.next = 25;
                                    break;
                                  case 22:
                                    (e.prev = 22),
                                      (e.t0 = e.catch(10)),
                                      r.e(e.t0);
                                  case 25:
                                    return (e.prev = 25), r.f(), e.finish(25);
                                  case 28:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[10, 22, 25, 28]]
                          );
                        })
                      )),
                      function () {
                        return t.apply(this, arguments);
                      }),
                  },
                  {
                    key: "consumeMicStreams",
                    value: function () {
                      de.roomClient.consumeMicStreams(this.id);
                    },
                  },
                  {
                    key: "consumeWebcamStreams",
                    value: function () {
                      de.roomClient.consumeWebcamStreams(this.id);
                    },
                  },
                  {
                    key: "stopConsumingWebcamStreams",
                    value: function () {
                      de.roomClient.stopConsumingWebcamStreams(this.id);
                    },
                  },
                  {
                    key: "stopConsumingMicStreams",
                    value: function () {
                      de.roomClient.stopConsumingMicStreams(this.id);
                    },
                  },
                  {
                    key: "on",
                    value: function (e, t) {
                      switch (e) {
                        case he:
                        case me:
                        case fe:
                        case ve:
                          this.eventEmitter.on(e, t);
                          break;
                        default:
                          throw new Error("Invalid event type");
                      }
                    },
                  },
                  {
                    key: "off",
                    value: function (e, t) {
                      switch (e) {
                        case he:
                        case me:
                        case fe:
                        case ve:
                          this.eventEmitter.off(e, t);
                          break;
                        default:
                          throw new Error("Invalid event type");
                      }
                    },
                  },
                ]),
                e
              );
            })();
          function ge(e, t, r) {
            !(function (e, t) {
              if (t.has(e))
                throw new TypeError(
                  "Cannot initialize the same private elements twice on an object"
                );
            })(e, t),
              t.set(e, r);
          }
          var ye = new WeakMap(),
            be = (function () {
              function e(t, r) {
                var n = t.id,
                  a = t.displayName;
                (0, i.Z)(this, e),
                  ge(this, ye, { writable: !0, value: void 0 }),
                  (this.id = n),
                  (this.displayName = a),
                  ae(this, ye, r);
              }
              var t;
              return (
                (0, s.Z)(e, [
                  {
                    key: "switchTo",
                    value:
                      ((t = (0, a.Z)(
                        d().mark(function e(t) {
                          var r, n, a;
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (r = t.meetingId),
                                      (n = t.payload),
                                      (a = t.token),
                                      (e.next = 3),
                                      de.roomClient.connectionSwitchPeerRoom({
                                        roomId: r,
                                        connectionRoomId: ne(this, ye),
                                        payload: n,
                                        peerId: this.id,
                                        token: a,
                                      })
                                    );
                                  case 3:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return t.apply(this, arguments);
                      }),
                  },
                ]),
                e
              );
            })(),
            we = "participant-joined",
            Se = "participant-left",
            ke = "chat-message",
            Re = (function () {
              function e(t, r) {
                var n = this;
                (0, i.Z)(this, e),
                  (this.eventEmitter = new ie.EventEmitter()),
                  (this.id = t),
                  (this.participants = new Map()),
                  r.forEach(function (e) {
                    n.participants.set(e.id, new be(e, n.id));
                  });
              }
              var t;
              return (
                (0, s.Z)(e, [
                  {
                    key: "participantJoin",
                    value: function (e) {
                      var t = new be(e, this.id);
                      this.participants.set(e.id, t),
                        this.eventEmitter.emit(we, t);
                    },
                  },
                  {
                    key: "participantLeft",
                    value: function (e) {
                      this.participants.delete(e),
                        this.eventEmitter.emit(Se, e);
                    },
                  },
                  {
                    key: "sendChatMessage",
                    value: function (e) {
                      de.roomClient.connectionSendChatMessage({
                        roomId: this.id,
                        message: e,
                      });
                    },
                  },
                  {
                    key: "sendChatMessageEvent",
                    value: function (e) {
                      var t = e.participantId,
                        r = e.message;
                      this.eventEmitter.emit(ke, {
                        participantId: t,
                        message: r,
                      });
                    },
                  },
                  {
                    key: "end",
                    value:
                      ((t = (0, a.Z)(
                        d().mark(function e() {
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (e.next = 2),
                                      de.roomClient.connectionEndMeeting({
                                        roomId: this.id,
                                      })
                                    );
                                  case 2:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return t.apply(this, arguments);
                      }),
                  },
                  {
                    key: "on",
                    value: function (e, t) {
                      switch (e) {
                        case we:
                        case Se:
                        case ke:
                          this.eventEmitter.on(e, t);
                          break;
                        default:
                          throw new Error("Invalid event type");
                      }
                    },
                  },
                  {
                    key: "off",
                    value: function (e, t) {
                      switch (e) {
                        case we:
                        case Se:
                        case ke:
                          this.eventEmitter.off(e, t);
                          break;
                        default:
                          throw new Error("Invalid event type");
                      }
                    },
                  },
                ]),
                e
              );
            })(),
            Ee = (function () {
              function e(t) {
                var r = t.roomId,
                  n = t.peers,
                  a = t.payload;
                (0, i.Z)(this, e),
                  (this.id = r),
                  (this.payload = a),
                  (this.meeting = new Re(r, n));
              }
              return (
                (0, s.Z)(e, [
                  {
                    key: "close",
                    value: function () {
                      de.roomClient.closeConnection(this.id);
                    },
                  },
                ]),
                e
              );
            })();
          function Te(e, t) {
            Pe(e, t), t.add(e);
          }
          function Pe(e, t) {
            if (t.has(e))
              throw new TypeError(
                "Cannot initialize the same private elements twice on an object"
              );
          }
          function Ce(e, t, r) {
            if (!t.has(e))
              throw new TypeError(
                "attempted to get private field on non-instance"
              );
            return r;
          }
          var xe = "error",
            Oe = "meeting-joined",
            De = "meeting-left",
            Ie = "participant-mode-changed",
            Me = "participant-joined",
            Le = "participant-left",
            Ae = "speaker-changed",
            je = "presenter-changed",
            Ne = "main-participant-changed",
            Be = "chat-message",
            Fe = "entry-requested",
            Ue = "entry-responded",
            We = "recording-state-changed",
            Ve = "recording-started",
            He = "recording-stopped",
            Ze = "livestream-state-changed",
            qe = "livestream-started",
            ze = "livestream-stopped",
            Ge = "hls-state-changed",
            Ke = "hls-started",
            $e = "hls-stopped",
            Je = "whiteboard-started",
            Qe = "whiteboard-stopped",
            Ye = "video-state-changed",
            Xe = "video-seeked",
            et = "mic-requested",
            tt = "webcam-requested",
            rt = "stream-enabled",
            nt = "stream-disabled",
            at = "pin-state-changed",
            it = "connection-open",
            st = "connection-close",
            ot = "switch-meeting",
            ct = "meeting-state-changed",
            dt = new WeakMap(),
            lt = new WeakSet(),
            ut = new WeakSet(),
            pt = (function () {
              function e(t, r, s) {
                var c,
                  l,
                  u,
                  p,
                  h,
                  m,
                  f = this;
                (0, i.Z)(this, e),
                  Te(this, ut),
                  Te(this, lt),
                  (u = { writable: !0, value: void 0 }),
                  Pe((c = this), (l = dt)),
                  l.set(c, u),
                  (0, o.Z)(this, "pubSub", {
                    publish:
                      ((m = (0, a.Z)(
                        d().mark(function e(t, r, a, i) {
                          return d().wrap(function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (null == i) {
                                    e.next = 3;
                                    break;
                                  }
                                  if ("object" == (0, n.Z)(i)) {
                                    e.next = 3;
                                    break;
                                  }
                                  throw new Error(
                                    '"payload" can only be object.'
                                  );
                                case 3:
                                  return (
                                    (e.next = 5),
                                    f.roomClient.pubsubPublish(t, r, a, i)
                                  );
                                case 5:
                                case "end":
                                  return e.stop();
                              }
                          }, e);
                        })
                      )),
                      function (e, t, r, n) {
                        return m.apply(this, arguments);
                      }),
                    subscribe:
                      ((h = (0, a.Z)(
                        d().mark(function e(t, r) {
                          var n;
                          return d().wrap(function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (!ne(f, dt).listeners(t).includes(r)) {
                                    e.next = 2;
                                    break;
                                  }
                                  return e.abrupt("return");
                                case 2:
                                  return (
                                    (e.next = 4),
                                    f.roomClient.pubsubSubscribe(t)
                                  );
                                case 4:
                                  return (
                                    (n = e.sent),
                                    ne(f, dt).on(t, r),
                                    e.abrupt("return", n)
                                  );
                                case 7:
                                case "end":
                                  return e.stop();
                              }
                          }, e);
                        })
                      )),
                      function (e, t) {
                        return h.apply(this, arguments);
                      }),
                    unsubscribe:
                      ((p = (0, a.Z)(
                        d().mark(function e(t, r) {
                          return d().wrap(function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (
                                    (ne(f, dt).off(t, r),
                                    0 != ne(f, dt).listeners(t).length)
                                  ) {
                                    e.next = 4;
                                    break;
                                  }
                                  return (
                                    (e.next = 4),
                                    f.roomClient.pubsubUnsubscribe(t)
                                  );
                                case 4:
                                case "end":
                                  return e.stop();
                              }
                          }, e);
                        })
                      )),
                      function (e, t) {
                        return p.apply(this, arguments);
                      }),
                  }),
                  (0, o.Z)(
                    this,
                    "uploadBase64File",
                    (function () {
                      var e = (0, a.Z)(
                        d().mark(function e(t) {
                          var r, n, a, i, s, o, c;
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      ((r = t.base64Data),
                                      (n = t.token),
                                      (a = t.fileName),
                                      (e.prev = 1),
                                      r && n && a)
                                    ) {
                                      e.next = 4;
                                      break;
                                    }
                                    throw new Error(
                                      "please provide base64Data, token and fileName"
                                    );
                                  case 4:
                                    return (
                                      (i = "https://"
                                        .concat(
                                          f.baseUrl,
                                          "/base64-upload?roomId="
                                        )
                                        .concat(f.id)),
                                      (s = { fileName: a, base64Data: r }),
                                      (e.next = 8),
                                      fetch(i, {
                                        method: "POST",
                                        body: JSON.stringify(s),
                                        headers: {
                                          "Content-Type": "application/json",
                                          Authorization: n,
                                        },
                                      })
                                    );
                                  case 8:
                                    return (
                                      (o = e.sent), (e.next = 11), o.json()
                                    );
                                  case 11:
                                    return (
                                      (c = e.sent), e.abrupt("return", c.url)
                                    );
                                  case 15:
                                    (e.prev = 15),
                                      (e.t0 = e.catch(1)),
                                      console.error(
                                        "Error while Uploading Base64 File::",
                                        e.t0
                                      ),
                                      f.roomClient._videosdkLogs &&
                                        f.roomClient._videosdkLogs.pushLogs({
                                          logText:
                                            "Error while Uploading Base64 File",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        });
                                  case 19:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            null,
                            [[1, 15]]
                          );
                        })
                      );
                      return function (t) {
                        return e.apply(this, arguments);
                      };
                    })()
                  ),
                  (0, o.Z)(
                    this,
                    "fetchBase64File",
                    (function () {
                      var e = (0, a.Z)(
                        d().mark(function e(t) {
                          var r, n, a, i, s;
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      ((r = t.url),
                                      (n = t.token),
                                      (e.prev = 1),
                                      r && n)
                                    ) {
                                      e.next = 4;
                                      break;
                                    }
                                    throw new Error(
                                      "please provide url and token"
                                    );
                                  case 4:
                                    return (
                                      (e.next = 6),
                                      fetch(r, {
                                        headers: { Authorization: n },
                                      })
                                    );
                                  case 6:
                                    return (
                                      (a = e.sent),
                                      (e.next = 9),
                                      a.arrayBuffer()
                                    );
                                  case 9:
                                    return (
                                      (i = e.sent),
                                      (s = window.btoa(
                                        new Uint8Array(i).reduce(function (
                                          e,
                                          t
                                        ) {
                                          return e + String.fromCharCode(t);
                                        },
                                        "")
                                      )),
                                      e.abrupt("return", s)
                                    );
                                  case 14:
                                    (e.prev = 14),
                                      (e.t0 = e.catch(1)),
                                      console.error(
                                        "Error while fetching Base64 File::",
                                        e.t0
                                      ),
                                      f.roomClient._videosdkLogs &&
                                        f.roomClient._videosdkLogs.pushLogs({
                                          logText:
                                            "Error while fetching Base64 File",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        });
                                  case 18:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            null,
                            [[1, 14]]
                          );
                        })
                      );
                      return function (t) {
                        return e.apply(this, arguments);
                      };
                    })()
                  ),
                  (this.id = t),
                  (this.roomClient = s),
                  (this.activeSpeakerId = null),
                  (this.activePresenterId = null),
                  (this.mainParticipantId = null),
                  (this.connections = new Map()),
                  (this.localParticipant = r),
                  (this.participants = new Map()),
                  (this.baseUrl = null),
                  (this.livestreamState = "LIVESTREAM_STOPPED"),
                  (this.recordingState = "RECORDING_STOPPED"),
                  (this.hlsState = "HLS_STOPPED"),
                  (this.hlsUrls = {
                    downstreamUrl: null,
                    playbackHlsUrl: null,
                    livestreamUrl: null,
                  }),
                  (this.messages = []),
                  (this.eventEmitter = new ie.EventEmitter()),
                  ae(this, dt, new ie.EventEmitter()),
                  this.eventEmitter.setMaxListeners(9999),
                  ne(this, dt).setMaxListeners(9999),
                  this.roomClient.on("ERROR", function (e) {
                    return f.handleError(e);
                  }),
                  this.roomClient.on("ADD_PEER", function (e) {
                    return f.handlePeerAdd(e);
                  }),
                  this.roomClient.on("REMOVE_PEER", function (e) {
                    return f.handlePeerRemove(e);
                  }),
                  this.roomClient.on("ADD_PRODUCER", function (e) {
                    return f.handleProducerAdd(e);
                  }),
                  this.roomClient.on("UPDATE_PRODUCER", function (e) {
                    return f.handleUpdateProducer(e);
                  }),
                  this.roomClient.on("REMOVE_PRODUCER", function (e) {
                    return f.handleProducerRemove(e);
                  }),
                  this.roomClient.on("ADD_CONSUMER", function (e) {
                    return f.handleConsumerAdd(e);
                  }),
                  this.roomClient.on("REMOVE_CONSUMER", function (e) {
                    return f.handleConsumerRemove(e);
                  }),
                  this.roomClient.on(
                    "PARTICIPANT_MEDIA_STATE_CHANGED",
                    function (e) {
                      return f.handleParticipantMediaStateChanged(e);
                    }
                  ),
                  this.roomClient.on("CHAT_MESSAGE", function (e) {
                    return f.handleNewChatMessage(e);
                  }),
                  this.roomClient.on("SET_ROOM_ACTIVE_SPEAKER", function (e) {
                    return f.handleSpeakerChange(e);
                  }),
                  this.roomClient.on("ENTRY_REQUESTED", function (e) {
                    return f.handleEntryRequested(e);
                  }),
                  this.roomClient.on("ENTRY_RESPONDED", function (e) {
                    return f.handleEntryResponded(e);
                  }),
                  this.roomClient.on("MEETING_JOINED", function (e) {
                    return f.handleMeetingJoined(e);
                  }),
                  this.roomClient.on("MEETING_LEFT", function (e) {
                    return f.handleMeetingLeft(e);
                  }),
                  this.roomClient.on("RECORDING_STATE_CHANGED", function (e) {
                    f.handleRecordingStateChanged(e);
                  }),
                  this.roomClient.on("RECORDING_STARTED", function (e) {
                    return f.handleRecordingStarted(e);
                  }),
                  this.roomClient.on("RECORDING_STOPPED", function (e) {
                    return f.handleRecordingStopped(e);
                  }),
                  this.roomClient.on("LIVESTREAM_STATE_CHANGED", function (e) {
                    f.handleLivestreamStateChanged(e);
                  }),
                  this.roomClient.on("LIVESTREAM_STARTED", function (e) {
                    return f.handleLivestreamStarted(e);
                  }),
                  this.roomClient.on("LIVESTREAM_STOPPED", function (e) {
                    return f.handleLivestreamStopped(e);
                  }),
                  this.roomClient.on("HLS_STATE_CHANGED", function (e) {
                    f.handleHlsStateChanged(e);
                  }),
                  this.roomClient.on("HLS_STARTED", function (e) {
                    f.handleHlsStarted(e);
                  }),
                  this.roomClient.on("HLS_STOPPED", function (e) {
                    f.handleHlsStopped(e);
                  }),
                  this.roomClient.on("WHITEBOARD_STARTED", function (e) {
                    return f.handleWhiteboardStarted(e);
                  }),
                  this.roomClient.on("WHITEBOARD_STOPPED", function (e) {
                    return f.handleWhiteboardStopped(e);
                  }),
                  this.roomClient.on("VIDEO_STATE_CHANGED", function (e) {
                    return f.handleVideoStateChanged(e);
                  }),
                  this.roomClient.on("VIDEO_SEEKED", function (e) {
                    return f.handleVideoSeeked(e);
                  }),
                  this.roomClient.on("PIN_STATE_CHANGED", function (e) {
                    f.handlePinStateChanged(e);
                  }),
                  this.roomClient.on("MIC_REQUESTED", function (e) {
                    return f.handleMicRequested(e);
                  }),
                  this.roomClient.on("WEBCAM_REQUESTED", function (e) {
                    return f.handleWebcamRequested(e);
                  }),
                  this.roomClient.on("CONNECTION_OPEN", function (e) {
                    return f.handleConnectionOpen(e);
                  }),
                  this.roomClient.on("CONNECTION_CLOSE", function (e) {
                    return f.handleConnectionClose(e);
                  }),
                  this.roomClient.on(
                    "CONNECTION_PARTICIPANT_JOIN",
                    function (e) {
                      return f.handleConnectionParticipantJoin(e);
                    }
                  ),
                  this.roomClient.on("SWITCH_ROOM", function (e) {
                    return f.handleSwitchMeeting(e);
                  }),
                  this.roomClient.on("CONNECTION_CHAT_MESSAGE", function (e) {
                    return f.handleConnectionChatMessage(e);
                  }),
                  this.roomClient.on(
                    "CONNECTION_PARTICIPANT_LEFT",
                    function (e) {
                      f.handleConnectionParticipantLeft(e);
                    }
                  ),
                  this.roomClient.on("PUBSUB_MESSAGE", function (e) {
                    return Ce(f, lt, ht).call(f, e);
                  }),
                  this.roomClient.on("PEER_MODE_CHANGED", function (e) {
                    return Ce(f, ut, mt).call(f, e);
                  }),
                  this.updateMainParticipant(this.localParticipant.id),
                  this.roomClient.on("MEETING_STATE_CHANGED", function (e) {
                    return f.handleMeetingStateChanged(e);
                  }),
                  this.roomClient.on("VIDEO_QUALITY_CHANGED", function (e) {
                    return f.handleVideoQualityChanged(e);
                  });
              }
              var t, r, c, l, u, p, h, m;
              return (
                (0, s.Z)(e, [
                  {
                    key: "handleError",
                    value: function (e) {
                      this.eventEmitter.emit(xe, e);
                    },
                  },
                  {
                    key: "join",
                    value: function () {
                      this.roomClient.join();
                    },
                  },
                  {
                    key: "changeMode",
                    value: function (e) {
                      this.roomClient.changeMode(e);
                    },
                  },
                  {
                    key: "leave",
                    value: function () {
                      this.roomClient.close({ sendLeft: !0 });
                    },
                  },
                  {
                    key: "end",
                    value: function () {
                      this.roomClient.closeRoom();
                    },
                  },
                  {
                    key: "respondEntry",
                    value: function (e, t) {
                      this.roomClient.respondEntry(e, t);
                    },
                  },
                  {
                    key: "pinnedParticipants",
                    get: function () {
                      return this.roomClient._pinnedParticipants;
                    },
                  },
                  {
                    key: "muteMic",
                    value: function () {
                      this.roomClient.disableMic();
                    },
                  },
                  {
                    key: "unmuteMic",
                    value: function () {
                      var e =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : void 0;
                      this.roomClient.enableMic(e);
                    },
                  },
                  {
                    key: "publishAudio",
                    value:
                      ((m = (0, a.Z)(
                        d().mark(function e() {
                          var t,
                            r = arguments;
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (t =
                                        r.length > 0 && void 0 !== r[0]
                                          ? r[0]
                                          : void 0),
                                      (e.next = 3),
                                      this.roomClient.enableMic(t)
                                    );
                                  case 3:
                                    return e.abrupt("return");
                                  case 4:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return m.apply(this, arguments);
                      }),
                  },
                  {
                    key: "unpublishAudio",
                    value:
                      ((h = (0, a.Z)(
                        d().mark(function e() {
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (e.next = 2), this.roomClient.disableMic()
                                    );
                                  case 2:
                                    return e.abrupt("return");
                                  case 3:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return h.apply(this, arguments);
                      }),
                  },
                  {
                    key: "disableWebcam",
                    value: function () {
                      this.roomClient.disableWebcam();
                    },
                  },
                  {
                    key: "enableWebcam",
                    value: function () {
                      var e =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : void 0;
                      this.roomClient.enableWebcam(e);
                    },
                  },
                  {
                    key: "publishVideo",
                    value:
                      ((p = (0, a.Z)(
                        d().mark(function e() {
                          var t,
                            r = arguments;
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (t =
                                        r.length > 0 && void 0 !== r[0]
                                          ? r[0]
                                          : void 0),
                                      this.roomClient.enableWebcam(t),
                                      e.abrupt("return")
                                    );
                                  case 3:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return p.apply(this, arguments);
                      }),
                  },
                  {
                    key: "unpublishVideo",
                    value:
                      ((u = (0, a.Z)(
                        d().mark(function e() {
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      this.roomClient.disableWebcam(),
                                      e.abrupt("return")
                                    );
                                  case 2:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return u.apply(this, arguments);
                      }),
                  },
                  {
                    key: "disableScreenShare",
                    value: function () {
                      this.roomClient.disableShare();
                    },
                  },
                  {
                    key: "enableScreenShare",
                    value: function () {
                      var e =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : void 0;
                      this.roomClient.enableShare(e);
                    },
                  },
                  {
                    key: "pubblishScreenShare",
                    value: function () {
                      var e =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : void 0;
                      this.roomClient.enableShare(e);
                    },
                  },
                  {
                    key: "unpublishScreenShare",
                    value: function () {
                      this.roomClient.disableShare();
                    },
                  },
                  {
                    key: "sendChatMessage",
                    value: function (e) {
                      this.roomClient.sendChatMessage(e);
                      var t = {
                        text: e,
                        timestamp: new Date().getTime(),
                        senderId: this.localParticipant.id,
                        senderName: this.localParticipant.displayName,
                      };
                      this.handleNewChatMessage(t);
                    },
                  },
                  {
                    key: "startRecording",
                    value: function (e, t, r) {
                      this.roomClient.startRecording(e, t, r);
                    },
                  },
                  {
                    key: "stopRecording",
                    value: function () {
                      this.roomClient.stopRecording();
                    },
                  },
                  {
                    key: "startLivestream",
                    value: function (e, t) {
                      this.roomClient.startLivestream(e, t);
                    },
                  },
                  {
                    key: "stopLivestream",
                    value: function () {
                      this.roomClient.stopLivestream();
                    },
                  },
                  {
                    key: "startHls",
                    value:
                      ((l = (0, a.Z)(
                        d().mark(function e(t) {
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (e.next = 2), this.roomClient.startHls(t)
                                    );
                                  case 2:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return l.apply(this, arguments);
                      }),
                  },
                  {
                    key: "stopHls",
                    value: function () {
                      this.roomClient.stopHls();
                    },
                  },
                  {
                    key: "getMics",
                    value:
                      ((c = (0, a.Z)(
                        d().mark(function e() {
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (e.next = 2), this.roomClient.getMics()
                                    );
                                  case 2:
                                    return e.abrupt("return", e.sent);
                                  case 3:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return c.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getWebcams",
                    value:
                      ((r = (0, a.Z)(
                        d().mark(function e() {
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (e.next = 2), this.roomClient.getWebcams()
                                    );
                                  case 2:
                                    return e.abrupt("return", e.sent);
                                  case 3:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return r.apply(this, arguments);
                      }),
                  },
                  {
                    key: "changeMic",
                    value: function (e) {
                      this.roomClient.changeMic(e);
                    },
                  },
                  {
                    key: "changeWebcam",
                    value: function (e) {
                      this.roomClient.changeWebcam(e);
                    },
                  },
                  {
                    key: "replaceWebcamStream",
                    value: function (e) {
                      this.roomClient.replaceWebcamStream(e);
                    },
                  },
                  {
                    key: "setWebcamQuality",
                    value: function (e) {
                      this.roomClient.setWebcamQuality(e);
                    },
                  },
                  {
                    key: "startWhiteboard",
                    value: function () {
                      this.roomClient.startWhiteboard();
                    },
                  },
                  {
                    key: "stopWhiteboard",
                    value: function () {
                      this.roomClient.stopWhiteboard();
                    },
                  },
                  {
                    key: "startVideo",
                    value: function (e) {
                      var t = e.link;
                      this.roomClient.startVideo({ link: t });
                    },
                  },
                  {
                    key: "stopVideo",
                    value: function () {
                      this.roomClient.stopVideo();
                    },
                  },
                  {
                    key: "resumeVideo",
                    value: function () {
                      this.roomClient.resumeVideo();
                    },
                  },
                  {
                    key: "refreshConnection",
                    value: function () {
                      this.roomClient.restartIce();
                    },
                  },
                  {
                    key: "pauseVideo",
                    value: function (e) {
                      var t = e.currentTime;
                      this.roomClient.pauseVideo(t);
                    },
                  },
                  {
                    key: "seekVideo",
                    value: function (e) {
                      var t = e.currentTime;
                      this.roomClient.seekVideo(t);
                    },
                  },
                  {
                    key: "handlePeerAdd",
                    value: function (e) {
                      var t = e.peer,
                        r = new _e(t);
                      this.participants.set(r.id, r),
                        this.eventEmitter.emit(Me, r),
                        1 === this.participants.size &&
                          this.updateMainParticipant(r.id);
                    },
                  },
                  {
                    key: "handlePeerRemove",
                    value: function (e) {
                      var t = e.peerId,
                        r = this.participants.get(t);
                      null != r &&
                        (this.participants.delete(t),
                        this.eventEmitter.emit(Le, r),
                        this.activePresenterId === r.id &&
                          ((this.activePresenterId = null),
                          this.eventEmitter.emit(je, this.activePresenterId)),
                        this.mainParticipantId === r.id &&
                          (this.participants.size > 0
                            ? this.updateMainParticipant(
                                this.participants.entries().next().value[1].id
                              )
                            : this.updateMainParticipant(
                                this.localParticipant.id
                              )));
                    },
                  },
                  {
                    key: "handleProducerAdd",
                    value: function (e) {
                      var t = e.producer,
                        r = new le(t);
                      this.localParticipant.addStream(r),
                        "share" === r.kind &&
                          ((this.activePresenterId = this.localParticipant.id),
                          this.eventEmitter.emit(je, this.activePresenterId),
                          this.updateMainParticipant(this.localParticipant.id));
                    },
                  },
                  {
                    key: "handleUpdateProducer",
                    value: function (e) {
                      var t = e.producer,
                        r = new le(t);
                      this.localParticipant.updateStream(r);
                    },
                  },
                  {
                    key: "handleProducerRemove",
                    value: function (e) {
                      var t = e.producerId,
                        r = this.localParticipant.deleteStream(t);
                      if (r && "share" === r.kind) {
                        (this.activePresenterId = null),
                          this.eventEmitter.emit(je, this.activePresenterId);
                        var n =
                          this.participants.size > 0
                            ? this.participants.entries().next().value[1].id
                            : null;
                        this.updateMainParticipant(
                          this.activeSpeakerId || n || this.localParticipant.id
                        );
                      }
                    },
                  },
                  {
                    key: "handleConsumerAdd",
                    value: function (e) {
                      var t = e.consumer,
                        r = e.peerId,
                        n = this.participants.get(r);
                      if (n) {
                        var a = new le(t);
                        n.addStream(a),
                          this.eventEmitter.emit(rt, a),
                          "share" === a.kind &&
                            ((this.activePresenterId = n.id),
                            this.eventEmitter.emit(je, this.activePresenterId),
                            this.updateMainParticipant(n.id));
                      }
                    },
                  },
                  {
                    key: "handleConsumerRemove",
                    value: function (e) {
                      var t = e.consumerId,
                        r = e.peerId,
                        n = this.participants.get(r);
                      if (null != n && n) {
                        var a = n.deleteStream(t);
                        if (
                          (this.eventEmitter.emit(nt, a),
                          a && "share" === a.kind)
                        ) {
                          (this.activePresenterId = null),
                            this.eventEmitter.emit(je, this.activePresenterId);
                          var i =
                            this.participants.size > 0
                              ? this.participants.entries().next().value[1].id
                              : null;
                          this.updateMainParticipant(
                            this.activeSpeakerId ||
                              i ||
                              this.localParticipant.id
                          );
                        }
                      }
                    },
                  },
                  {
                    key: "handleParticipantMediaStateChanged",
                    value: function (e) {
                      var t = e.peerId,
                        r = e.kind,
                        n = e.newState,
                        a = this.participants.get(t);
                      a &&
                        a &&
                        ("audio" == r
                          ? (a.micOn = n)
                          : "video" == r && (a.webcamOn = n),
                        a.updateParticipantMediaState(r, n));
                    },
                  },
                  {
                    key: "handleSpeakerChange",
                    value: function (e) {
                      var t = e.peerId;
                      this.activeSpeakerId !== t &&
                        ((this.activeSpeakerId = t),
                        this.eventEmitter.emit(Ae, t),
                        t &&
                          t !== this.localParticipant.id &&
                          this.activePresenterId !== this.mainParticipantId &&
                          t !== this.mainParticipantId &&
                          this.updateMainParticipant(t));
                    },
                  },
                  {
                    key: "handleNewChatMessage",
                    value: function (e) {
                      var t = e.senderId,
                        r = {
                          senderId: t,
                          text: e.text,
                          timestamp: e.timestamp,
                        };
                      if (this.localParticipant.id === t)
                        r.senderName = this.localParticipant.displayName;
                      else {
                        var n = this.participants.get(t);
                        n && (r.senderName = n.displayName);
                      }
                      this.messages.push(r), this.eventEmitter.emit(Be, r);
                    },
                  },
                  {
                    key: "updateMainParticipant",
                    value: function (e) {
                      this.mainParticipantId = e;
                      var t = null;
                      (t =
                        e === this.localParticipant.id
                          ? this.localParticipant
                          : this.participants.get(this.mainParticipantId)),
                        this.eventEmitter.emit(Ne, t);
                    },
                  },
                  {
                    key: "handleEntryRequested",
                    value: function (e) {
                      var t = this,
                        r = e.id,
                        n = e.name;
                      this.eventEmitter.emit(Fe, {
                        participantId: r,
                        name: n,
                        allow: function () {
                          t.roomClient.respondEntry(r, "allowed");
                        },
                        deny: function () {
                          t.roomClient.respondEntry(r, "denied");
                        },
                      });
                    },
                  },
                  {
                    key: "handleEntryResponded",
                    value: function (e) {
                      var t = e.id,
                        r = e.decision;
                      this.eventEmitter.emit(Ue, t, r);
                    },
                  },
                  {
                    key: "handleMeetingJoined",
                    value: function (e) {
                      var t = e.peers,
                        r = e.poll,
                        n = e.messages,
                        a = e.baseUrl;
                      (this.baseUrl = a),
                        n.length > 0 && (this.messages = n),
                        this.eventEmitter.emit(Oe, {
                          peers: t,
                          poll: r,
                          messages: n,
                        });
                    },
                  },
                  {
                    key: "handleMeetingLeft",
                    value: function (e) {
                      this.eventEmitter.emit(De, e);
                    },
                  },
                  {
                    key: "handleRecordingStateChanged",
                    value: function (e) {
                      (this.recordingState = e.status),
                        this.eventEmitter.emit(We, e);
                    },
                  },
                  {
                    key: "handleLivestreamStateChanged",
                    value: function (e) {
                      (this.livestreamState = e.status),
                        this.eventEmitter.emit(Ze, e);
                    },
                  },
                  {
                    key: "handleHlsStateChanged",
                    value: function (e) {
                      (this.hlsState = e.status),
                        "HLS_PLAYABLE" == e.status
                          ? (this.hlsUrls = {
                              downstreamUrl: e.downstreamUrl,
                              playbackHlsUrl: e.playbackHlsUrl,
                              livestreamUrl: e.livestreamUrl,
                            })
                          : "HLS_STOPPED" == e.status &&
                            (this.hlsUrls = {
                              downstreamUrl: null,
                              playbackHlsUrl: null,
                              livestreamUrl: null,
                            }),
                        this.eventEmitter.emit(Ge, e);
                    },
                  },
                  {
                    key: "handleRecordingStarted",
                    value: function () {
                      this.eventEmitter.emit(Ve);
                    },
                  },
                  {
                    key: "handleRecordingStopped",
                    value: function () {
                      this.eventEmitter.emit(He);
                    },
                  },
                  {
                    key: "handleLivestreamStarted",
                    value: function () {
                      this.eventEmitter.emit(qe);
                    },
                  },
                  {
                    key: "handleLivestreamStopped",
                    value: function () {
                      this.eventEmitter.emit(ze);
                    },
                  },
                  {
                    key: "handleHlsStarted",
                    value: function (e) {
                      this.eventEmitter.emit(Ke, e);
                    },
                  },
                  {
                    key: "handleHlsStopped",
                    value: function () {
                      this.eventEmitter.emit($e);
                    },
                  },
                  {
                    key: "handleWhiteboardStarted",
                    value: function (e) {
                      var t = e.state;
                      this.eventEmitter.emit(Je, t);
                    },
                  },
                  {
                    key: "handleWhiteboardStopped",
                    value: function (e) {
                      !(function (e) {
                        if (null == e)
                          throw new TypeError("Cannot destructure undefined");
                      })(e),
                        this.eventEmitter.emit(Qe);
                    },
                  },
                  {
                    key: "handleVideoStateChanged",
                    value: function (e) {
                      this.eventEmitter.emit(Ye, e);
                    },
                  },
                  {
                    key: "handleVideoSeeked",
                    value: function (e) {
                      var t = e.currentTime;
                      this.eventEmitter.emit(Xe, { currentTime: t });
                    },
                  },
                  {
                    key: "handlePinStateChanged",
                    value: function (e) {
                      var t = e.peerId,
                        r = e.state,
                        n = e.pinnedBy;
                      this.eventEmitter.emit(at, {
                        participantId: t,
                        state: r,
                        pinnedBy: n,
                      });
                    },
                  },
                  {
                    key: "handleMeetingStateChanged",
                    value: function (e) {
                      var t = e.state;
                      this.eventEmitter.emit(ct, { state: t });
                    },
                  },
                  {
                    key: "handleVideoQualityChanged",
                    value: function (e) {
                      var t = e.peerId,
                        r = e.prevQuality,
                        n = e.currentQuality,
                        a = this.participants.get(t);
                      a && a && a.videoQualityChanged(r, n);
                    },
                  },
                  {
                    key: "handleMicRequested",
                    value: function (e) {
                      var t = this,
                        r = e.peerId;
                      this.eventEmitter.emit(et, {
                        participantId: r,
                        accept: function () {
                          return t.unmuteMic();
                        },
                        reject: function () {},
                      });
                    },
                  },
                  {
                    key: "handleWebcamRequested",
                    value: function (e) {
                      var t = this,
                        r = e.peerId;
                      this.eventEmitter.emit(tt, {
                        participantId: r,
                        accept: function () {
                          return t.enableWebcam();
                        },
                        reject: function () {},
                      });
                    },
                  },
                  {
                    key: "handleConnectionParticipantJoin",
                    value: function (e) {
                      var t = e.roomId,
                        r = e.peer,
                        n = this.connections.get(t);
                      null != n && n.meeting.participantJoin(r);
                    },
                  },
                  {
                    key: "handleConnectionParticipantLeft",
                    value: function (e) {
                      var t = e.roomId,
                        r = e.peerId,
                        n = this.connections.get(t);
                      null != n && n.meeting.participantLeft(r);
                    },
                  },
                  {
                    key: "handleConnectionOpen",
                    value: function (e) {
                      var t = e.peers,
                        r = e.roomId,
                        n = e.payload,
                        a = new Ee({ roomId: r, peers: t, payload: n });
                      this.connections.set(a.id, a),
                        this.eventEmitter.emit(it, a);
                    },
                  },
                  {
                    key: "handleConnectionClose",
                    value: function (e) {
                      var t = e.roomId;
                      null != this.connections.get(t) &&
                        (this.connections.delete(t),
                        this.eventEmitter.emit(st, t));
                    },
                  },
                  {
                    key: "handleSwitchMeeting",
                    value: function (e) {
                      var t = e.roomId,
                        r = e.token,
                        n = e.payload,
                        a = e.peerId,
                        i = e.connectionPeerId,
                        s = e.connectionRoomId,
                        o = a
                          ? {
                              meetingId: t,
                              payload: n,
                              token: r,
                              participantId: a,
                            }
                          : {
                              meetingId: t,
                              payload: n,
                              token: r,
                              connectionParticipantId: i,
                              connectionMeetingId: s,
                            };
                      this.eventEmitter.emit(ot, o);
                    },
                  },
                  {
                    key: "handleConnectionChatMessage",
                    value: function (e) {
                      var t = e.roomId,
                        r = e.peerId,
                        n = e.message,
                        a = this.connections.get(t);
                      null != a &&
                        a.meeting.sendChatMessageEvent({
                          participantId: r,
                          message: n,
                        });
                    },
                  },
                  {
                    key: "connectTo",
                    value:
                      ((t = (0, a.Z)(
                        d().mark(function e(t) {
                          var r, n;
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (r = t.meetingId),
                                      (n = t.payload),
                                      (e.next = 3),
                                      this.roomClient.openConnection({
                                        roomId: r,
                                        payload: n,
                                      })
                                    );
                                  case 3:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return t.apply(this, arguments);
                      }),
                  },
                  {
                    key: "selectedCameraDevice",
                    get: function () {
                      var e;
                      return null === (e = this.roomClient._webcam) ||
                        void 0 === e
                        ? void 0
                        : e.device;
                    },
                  },
                  {
                    key: "selectedMicrophoneDevice",
                    get: function () {
                      var e;
                      return null === (e = this.roomClient._mic) || void 0 === e
                        ? void 0
                        : e.device;
                    },
                  },
                  {
                    key: "on",
                    value: function (e, t) {
                      switch (e) {
                        case Me:
                        case Le:
                        case Ae:
                        case je:
                        case Ne:
                        case Be:
                        case Fe:
                        case Ue:
                        case We:
                        case Ve:
                        case He:
                        case Ze:
                        case qe:
                        case ze:
                        case Ke:
                        case $e:
                        case Ge:
                        case rt:
                        case nt:
                        case Je:
                        case Qe:
                        case Oe:
                        case De:
                        case Ye:
                        case Xe:
                        case et:
                        case tt:
                        case at:
                        case it:
                        case st:
                        case ot:
                        case ct:
                        case Ie:
                        case xe:
                          this.eventEmitter.on(e, t);
                          break;
                        default:
                          throw new Error("Invalid event type");
                      }
                    },
                  },
                  {
                    key: "off",
                    value: function (e, t) {
                      switch (e) {
                        case Me:
                        case Le:
                        case Ae:
                        case je:
                        case Ne:
                        case Be:
                        case Fe:
                        case Ue:
                        case We:
                        case Ve:
                        case He:
                        case Ze:
                        case qe:
                        case ze:
                        case Ge:
                        case Ke:
                        case $e:
                        case rt:
                        case nt:
                        case Je:
                        case Qe:
                        case Oe:
                        case De:
                        case Ye:
                        case Xe:
                        case et:
                        case tt:
                        case at:
                        case it:
                        case st:
                        case ot:
                        case ct:
                        case xe:
                        case Ie:
                          this.eventEmitter.off(e, t);
                          break;
                        default:
                          throw new Error("Invalid event type");
                      }
                    },
                  },
                ]),
                e
              );
            })();
          function ht(e) {
            var t = e.topic,
              r = e.message,
              n = e.senderId,
              a = e.timestamp,
              i = e.senderName,
              s = e.id,
              o = e.payload;
            t &&
              r &&
              ne(this, dt).emit(t, {
                message: r,
                senderId: n,
                timestamp: a,
                topic: t,
                senderName: i,
                id: s,
                payload: o,
              });
          }
          function mt(e) {
            var t = e.peerId,
              r = e.mode;
            t === this.localParticipant.id
              ? (this.localParticipant.mode = r)
              : (this.participants.get(t).mode = r),
              this.eventEmitter.emit(Ie, { participantId: t, mode: r });
          }
          var ft = r(6900),
            vt = r(6380),
            _t = r(3430),
            gt = r(8962),
            yt = (function () {
              var e = (0, a.Z)(
                d().mark(function e(t) {
                  return d().wrap(function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            void 0 === navigator.mediaDevices &&
                              (navigator.mediaDevices = {}),
                            void 0 === navigator.mediaDevices.getUserMedia &&
                              (navigator.mediaDevices.getUserMedia = function (
                                e
                              ) {
                                var t =
                                  navigator.webkitGetUserMedia ||
                                  navigator.mozGetUserMedia;
                                return t
                                  ? new Promise(function (r, n) {
                                      t.call(navigator, e, r, n);
                                    })
                                  : Promise.reject(
                                      new Error(
                                        "getUserMedia is not implemented in this browser"
                                      )
                                    );
                              }),
                            (e.next = 4),
                            navigator.mediaDevices.getUserMedia(t)
                          );
                        case 4:
                          return e.abrupt("return", e.sent);
                        case 5:
                        case "end":
                          return e.stop();
                      }
                  }, e);
                })
              );
              return function (t) {
                return e.apply(this, arguments);
              };
            })(),
            bt = (function () {
              var e = (0, a.Z)(
                d().mark(function e(t) {
                  return d().wrap(function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            void 0 === navigator.mediaDevices &&
                              (navigator.mediaDevices = {}),
                            void 0 === navigator.mediaDevices.getDisplayMedia &&
                              (navigator.mediaDevices.getDisplayMedia =
                                function (e) {
                                  var t =
                                    navigator.webkitGetDisplayMedia ||
                                    navigator.mozGetDisplayMedia;
                                  return t
                                    ? new Promise(function (r, n) {
                                        t.call(navigator, e, r, n);
                                      })
                                    : Promise.reject(
                                        new Error(
                                          "getDisplayMedia is not implemented in this browser"
                                        )
                                      );
                                }),
                            (e.next = 4),
                            navigator.mediaDevices.getDisplayMedia(t)
                          );
                        case 4:
                          return e.abrupt("return", e.sent);
                        case 5:
                        case "end":
                          return e.stop();
                      }
                  }, e);
                })
              );
              return function (t) {
                return e.apply(this, arguments);
              };
            })();
          function wt(e, t) {
            return (
              (wt =
                Object.setPrototypeOf ||
                function (e, t) {
                  return (e.__proto__ = t), e;
                }),
              wt(e, t)
            );
          }
          function St(e, t) {
            if ("function" != typeof t && null !== t)
              throw new TypeError(
                "Super expression must either be null or a function"
              );
            Object.defineProperty(e, "prototype", {
              value: Object.create(t && t.prototype, {
                constructor: { value: e, writable: !0, configurable: !0 },
              }),
              writable: !1,
            }),
              t && wt(e, t);
          }
          function kt(e, t) {
            if (t && ("object" === (0, n.Z)(t) || "function" == typeof t))
              return t;
            if (void 0 !== t)
              throw new TypeError(
                "Derived constructors may only return object or undefined"
              );
            return (function (e) {
              if (void 0 === e)
                throw new ReferenceError(
                  "this hasn't been initialised - super() hasn't been called"
                );
              return e;
            })(e);
          }
          function Rt(e) {
            return (
              (Rt = Object.setPrototypeOf
                ? Object.getPrototypeOf
                : function (e) {
                    return e.__proto__ || Object.getPrototypeOf(e);
                  }),
              Rt(e)
            );
          }
          function Et(e) {
            var t = (function () {
              if ("undefined" == typeof Reflect || !Reflect.construct)
                return !1;
              if (Reflect.construct.sham) return !1;
              if ("function" == typeof Proxy) return !0;
              try {
                return (
                  Boolean.prototype.valueOf.call(
                    Reflect.construct(Boolean, [], function () {})
                  ),
                  !0
                );
              } catch (e) {
                return !1;
              }
            })();
            return function () {
              var r,
                n = Rt(e);
              if (t) {
                var a = Rt(this).constructor;
                r = Reflect.construct(n, arguments, a);
              } else r = n.apply(this, arguments);
              return kt(this, r);
            };
          }
          var Tt = (function (e) {
              St(r, e);
              var t = Et(r);
              function r(e, n, a, s) {
                return (0, i.Z)(this, r), t.call(this, e, n, a, s);
              }
              return (0, s.Z)(r);
            })(
              (0, s.Z)(function e(t, r, n, a) {
                (0, i.Z)(this, e),
                  (this.deviceId = t),
                  (this.groupId = r),
                  (this.kind = n),
                  (this.label = a);
              })
            ),
            Pt = (function (e) {
              St(r, e);
              var t = Et(r);
              function r(e, n, a, s) {
                return (0, i.Z)(this, r), t.call(this, e, n, a, s);
              }
              return (0, s.Z)(r);
            })(Tt),
            Ct = (function (e) {
              St(r, e);
              var t = Et(r);
              function r(e, n, a, s) {
                return (0, i.Z)(this, r), t.call(this, e, n, a, s);
              }
              return (0, s.Z)(r);
            })(Tt),
            xt = (function (e) {
              St(r, e);
              var t = Et(r);
              function r(e, n, a, s) {
                return (0, i.Z)(this, r), t.call(this, e, n, a, s);
              }
              return (0, s.Z)(r);
            })(Tt),
            Ot = {
              AUDIO: "audio",
              VIDEO: "video",
              AUDIO_AND_VIDEO: "audio_video",
            },
            Dt = (r(4301), r(773));
          function It(e, t) {
            return null == e || null == t
              ? NaN
              : e < t
              ? -1
              : e > t
              ? 1
              : e >= t
              ? 0
              : NaN;
          }
          function Mt(e, t) {
            return null == e || null == t
              ? NaN
              : t < e
              ? -1
              : t > e
              ? 1
              : t >= e
              ? 0
              : NaN;
          }
          function Lt(e) {
            let t, r, n;
            function a(e, n, a = 0, i = e.length) {
              if (a < i) {
                if (0 !== t(n, n)) return i;
                do {
                  const t = (a + i) >>> 1;
                  r(e[t], n) < 0 ? (a = t + 1) : (i = t);
                } while (a < i);
              }
              return a;
            }
            return (
              2 !== e.length
                ? ((t = It),
                  (r = (t, r) => It(e(t), r)),
                  (n = (t, r) => e(t) - r))
                : ((t = e === It || e === Mt ? e : At), (r = e), (n = e)),
              {
                left: a,
                center: function (e, t, r = 0, i = e.length) {
                  const s = a(e, t, r, i - 1);
                  return s > r && n(e[s - 1], t) > -n(e[s], t) ? s - 1 : s;
                },
                right: function (e, n, a = 0, i = e.length) {
                  if (a < i) {
                    if (0 !== t(n, n)) return i;
                    do {
                      const t = (a + i) >>> 1;
                      r(e[t], n) <= 0 ? (a = t + 1) : (i = t);
                    } while (a < i);
                  }
                  return a;
                },
              }
            );
          }
          function At() {
            return 0;
          }
          const jt = Lt(It),
            Nt = jt.right,
            Bt =
              (jt.left,
              Lt(function (e) {
                return null === e ? NaN : +e;
              }).center,
              Nt);
          function Ft(e, t) {
            switch (arguments.length) {
              case 0:
                break;
              case 1:
                this.range(e);
                break;
              default:
                this.range(t).domain(e);
            }
            return this;
          }
          function Ut() {
            var e,
              t = [0.5],
              r = [0, 1],
              n = 1;
            function a(a) {
              return null != a && a <= a ? r[Bt(t, a, 0, n)] : e;
            }
            return (
              (a.domain = function (e) {
                return arguments.length
                  ? ((t = Array.from(e)),
                    (n = Math.min(t.length, r.length - 1)),
                    a)
                  : t.slice();
              }),
              (a.range = function (e) {
                return arguments.length
                  ? ((r = Array.from(e)),
                    (n = Math.min(t.length, r.length - 1)),
                    a)
                  : r.slice();
              }),
              (a.invertExtent = function (e) {
                var n = r.indexOf(e);
                return [t[n - 1], t[n]];
              }),
              (a.unknown = function (t) {
                return arguments.length ? ((e = t), a) : e;
              }),
              (a.copy = function () {
                return Ut().domain(t).range(r).unknown(e);
              }),
              Ft.apply(a, arguments)
            );
          }
          function Wt(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t &&
                (n = n.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, n);
            }
            return r;
          }
          function Vt(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2
                ? Wt(Object(r), !0).forEach(function (t) {
                    zt(e, t, r[t]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    e,
                    Object.getOwnPropertyDescriptors(r)
                  )
                : Wt(Object(r)).forEach(function (t) {
                    Object.defineProperty(
                      e,
                      t,
                      Object.getOwnPropertyDescriptor(r, t)
                    );
                  });
            }
            return e;
          }
          function Ht(e, t) {
            if (!(e instanceof t))
              throw new TypeError("Cannot call a class as a function");
          }
          function Zt(e, t) {
            for (var r = 0; r < t.length; r++) {
              var n = t[r];
              (n.enumerable = n.enumerable || !1),
                (n.configurable = !0),
                "value" in n && (n.writable = !0),
                Object.defineProperty(e, cr(n.key), n);
            }
          }
          function qt(e, t, r) {
            return (
              t && Zt(e.prototype, t),
              r && Zt(e, r),
              Object.defineProperty(e, "prototype", { writable: !1 }),
              e
            );
          }
          function zt(e, t, r) {
            return (
              (t = cr(t)) in e
                ? Object.defineProperty(e, t, {
                    value: r,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0,
                  })
                : (e[t] = r),
              e
            );
          }
          function Gt(e, t) {
            if ("function" != typeof t && null !== t)
              throw new TypeError(
                "Super expression must either be null or a function"
              );
            (e.prototype = Object.create(t && t.prototype, {
              constructor: { value: e, writable: !0, configurable: !0 },
            })),
              Object.defineProperty(e, "prototype", { writable: !1 }),
              t && $t(e, t);
          }
          function Kt(e) {
            return (
              (Kt = Object.setPrototypeOf
                ? Object.getPrototypeOf.bind()
                : function (e) {
                    return e.__proto__ || Object.getPrototypeOf(e);
                  }),
              Kt(e)
            );
          }
          function $t(e, t) {
            return (
              ($t = Object.setPrototypeOf
                ? Object.setPrototypeOf.bind()
                : function (e, t) {
                    return (e.__proto__ = t), e;
                  }),
              $t(e, t)
            );
          }
          function Jt(e, t) {
            if (null == e) return {};
            var r,
              n,
              a = (function (e, t) {
                if (null == e) return {};
                var r,
                  n,
                  a = {},
                  i = Object.keys(e);
                for (n = 0; n < i.length; n++)
                  (r = i[n]), t.indexOf(r) >= 0 || (a[r] = e[r]);
                return a;
              })(e, t);
            if (Object.getOwnPropertySymbols) {
              var i = Object.getOwnPropertySymbols(e);
              for (n = 0; n < i.length; n++)
                (r = i[n]),
                  t.indexOf(r) >= 0 ||
                    (Object.prototype.propertyIsEnumerable.call(e, r) &&
                      (a[r] = e[r]));
            }
            return a;
          }
          function Qt(e) {
            if (void 0 === e)
              throw new ReferenceError(
                "this hasn't been initialised - super() hasn't been called"
              );
            return e;
          }
          function Yt(e, t) {
            if (t && ("object" == typeof t || "function" == typeof t)) return t;
            if (void 0 !== t)
              throw new TypeError(
                "Derived constructors may only return object or undefined"
              );
            return Qt(e);
          }
          function Xt(e) {
            var t = (function () {
              if ("undefined" == typeof Reflect || !Reflect.construct)
                return !1;
              if (Reflect.construct.sham) return !1;
              if ("function" == typeof Proxy) return !0;
              try {
                return (
                  Boolean.prototype.valueOf.call(
                    Reflect.construct(Boolean, [], function () {})
                  ),
                  !0
                );
              } catch (e) {
                return !1;
              }
            })();
            return function () {
              var r,
                n = Kt(e);
              if (t) {
                var a = Kt(this).constructor;
                r = Reflect.construct(n, arguments, a);
              } else r = n.apply(this, arguments);
              return Yt(this, r);
            };
          }
          function er(e, t) {
            for (
              ;
              !Object.prototype.hasOwnProperty.call(e, t) &&
              null !== (e = Kt(e));

            );
            return e;
          }
          function tr() {
            return (
              (tr =
                "undefined" != typeof Reflect && Reflect.get
                  ? Reflect.get.bind()
                  : function (e, t, r) {
                      var n = er(e, t);
                      if (n) {
                        var a = Object.getOwnPropertyDescriptor(n, t);
                        return a.get
                          ? a.get.call(arguments.length < 3 ? e : r)
                          : a.value;
                      }
                    }),
              tr.apply(this, arguments)
            );
          }
          function rr(e, t, r, n) {
            return (
              (rr =
                "undefined" != typeof Reflect && Reflect.set
                  ? Reflect.set
                  : function (e, t, r, n) {
                      var a,
                        i = er(e, t);
                      if (i) {
                        if ((a = Object.getOwnPropertyDescriptor(i, t)).set)
                          return a.set.call(n, r), !0;
                        if (!a.writable) return !1;
                      }
                      if ((a = Object.getOwnPropertyDescriptor(n, t))) {
                        if (!a.writable) return !1;
                        (a.value = r), Object.defineProperty(n, t, a);
                      } else zt(n, t, r);
                      return !0;
                    }),
              rr(e, t, r, n)
            );
          }
          function nr(e, t, r, n, a) {
            if (!rr(e, t, r, n || e) && a)
              throw new TypeError("failed to set property");
            return r;
          }
          function ar(e, t) {
            return (
              (function (e) {
                if (Array.isArray(e)) return e;
              })(e) ||
              (function (e, t) {
                var r =
                  null == e
                    ? null
                    : ("undefined" != typeof Symbol && e[Symbol.iterator]) ||
                      e["@@iterator"];
                if (null != r) {
                  var n,
                    a,
                    i,
                    s,
                    o = [],
                    c = !0,
                    d = !1;
                  try {
                    if (((i = (r = r.call(e)).next), 0 === t)) {
                      if (Object(r) !== r) return;
                      c = !1;
                    } else
                      for (
                        ;
                        !(c = (n = i.call(r)).done) &&
                        (o.push(n.value), o.length !== t);
                        c = !0
                      );
                  } catch (e) {
                    (d = !0), (a = e);
                  } finally {
                    try {
                      if (
                        !c &&
                        null != r.return &&
                        ((s = r.return()), Object(s) !== s)
                      )
                        return;
                    } finally {
                      if (d) throw a;
                    }
                  }
                  return o;
                }
              })(e, t) ||
              sr(e, t) ||
              (function () {
                throw new TypeError(
                  "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                );
              })()
            );
          }
          function ir(e) {
            return (
              (function (e) {
                if (Array.isArray(e)) return or(e);
              })(e) ||
              (function (e) {
                if (
                  ("undefined" != typeof Symbol &&
                    null != e[Symbol.iterator]) ||
                  null != e["@@iterator"]
                )
                  return Array.from(e);
              })(e) ||
              sr(e) ||
              (function () {
                throw new TypeError(
                  "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                );
              })()
            );
          }
          function sr(e, t) {
            if (e) {
              if ("string" == typeof e) return or(e, t);
              var r = Object.prototype.toString.call(e).slice(8, -1);
              return (
                "Object" === r && e.constructor && (r = e.constructor.name),
                "Map" === r || "Set" === r
                  ? Array.from(e)
                  : "Arguments" === r ||
                    /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                  ? or(e, t)
                  : void 0
              );
            }
          }
          function or(e, t) {
            (null == t || t > e.length) && (t = e.length);
            for (var r = 0, n = new Array(t); r < t; r++) n[r] = e[r];
            return n;
          }
          function cr(e) {
            var t = (function (e, t) {
              if ("object" != typeof e || null === e) return e;
              var r = e[Symbol.toPrimitive];
              if (void 0 !== r) {
                var n = r.call(e, t || "default");
                if ("object" != typeof n) return n;
                throw new TypeError(
                  "@@toPrimitive must return a primitive value."
                );
              }
              return ("string" === t ? String : Number)(e);
            })(e, "string");
            return "symbol" == typeof t ? t : String(t);
          }
          function dr(e, t) {
            return (function (e, t) {
              if (t.get) return t.get.call(e);
              return t.value;
            })(e, ur(e, t, "get"));
          }
          function lr(e, t, r) {
            return (
              (function (e, t, r) {
                if (t.set) t.set.call(e, r);
                else {
                  if (!t.writable)
                    throw new TypeError(
                      "attempted to set read only private field"
                    );
                  t.value = r;
                }
              })(e, ur(e, t, "set"), r),
              r
            );
          }
          function ur(e, t, r) {
            if (!t.has(e))
              throw new TypeError(
                "attempted to " + r + " private field on non-instance"
              );
            return t.get(e);
          }
          function pr(e, t, r) {
            if (!t.has(e))
              throw new TypeError(
                "attempted to get private field on non-instance"
              );
            return r;
          }
          function hr(e, t) {
            if (t.has(e))
              throw new TypeError(
                "Cannot initialize the same private elements twice on an object"
              );
          }
          function mr(e, t, r) {
            hr(e, t), t.set(e, r);
          }
          function fr(e, t) {
            hr(e, t), t.add(e);
          }
          var vr = "https://speed.cloudflare.com",
            _r = {
              autoStart: !0,
              downloadApiUrl: "".concat(vr, "/__down"),
              uploadApiUrl: "".concat(vr, "/__up"),
              logMeasurementApiUrl: null,
              logAimApiUrl: "https://aim.cloudflare.com/__log",
              turnServerUri: "turn.speed.cloudflare.com:50000",
              turnServerCredsApiUrl: "".concat(vr, "/turn-creds"),
              turnServerUser: null,
              turnServerPass: null,
              rpkiInvalidHost: "invalid.rpki.cloudflare.com",
              cfTraceUrl: "".concat(vr, "/cdn-cgi/trace"),
              includeCredentials: !1,
              measurements: [
                { type: "latency", numPackets: 1 },
                {
                  type: "download",
                  bytes: 1e5,
                  count: 1,
                  bypassMinDuration: !0,
                },
                { type: "latency", numPackets: 20 },
                { type: "download", bytes: 1e5, count: 9 },
                { type: "download", bytes: 1e6, count: 8 },
                { type: "upload", bytes: 1e5, count: 8 },
                {
                  type: "packetLoss",
                  numPackets: 1e3,
                  batchSize: 10,
                  batchWaitTime: 10,
                  responsesWaitTime: 3e3,
                },
                { type: "upload", bytes: 1e6, count: 6 },
                { type: "download", bytes: 1e7, count: 6 },
                { type: "upload", bytes: 1e7, count: 4 },
                { type: "download", bytes: 25e6, count: 4 },
                { type: "upload", bytes: 25e6, count: 4 },
                { type: "download", bytes: 1e8, count: 3 },
                { type: "upload", bytes: 5e7, count: 3 },
                { type: "download", bytes: 25e7, count: 2 },
              ],
              measureDownloadLoadedLatency: !0,
              measureUploadLoadedLatency: !0,
              loadedLatencyThrottle: 400,
              bandwidthFinishRequestDuration: 1e3,
              estimatedServerTime: 10,
              latencyPercentile: 0.5,
              bandwidthPercentile: 0.9,
              bandwidthMinRequestDuration: 10,
              loadedRequestMinDuration: 250,
              loadedLatencyMaxPoints: 20,
            },
            gr = {
              aimMeasurementScoring: {
                packetLoss: Ut([0.01, 0.05, 0.25, 0.5], [10, 5, 0, -10, -20]),
                latency: Ut([10, 20, 50, 100, 500], [20, 10, 5, 0, -10, -20]),
                loadedLatencyIncrease: Ut(
                  [10, 20, 50, 100, 500],
                  [20, 10, 5, 0, -10, -20]
                ),
                jitter: Ut([10, 20, 100, 500], [10, 5, 0, -10, -20]),
                download: Ut([1e6, 1e7, 5e7, 1e8], [0, 5, 10, 20, 30]),
                upload: Ut([1e6, 1e7, 5e7, 1e8], [0, 5, 10, 20, 30]),
              },
              aimExperiencesDefs: {
                streaming: {
                  input: [
                    "latency",
                    "packetLoss",
                    "download",
                    "loadedLatencyIncrease",
                  ],
                  pointThresholds: [15, 20, 40, 60],
                },
                gaming: {
                  input: ["latency", "packetLoss", "loadedLatencyIncrease"],
                  pointThresholds: [5, 15, 25, 30],
                },
                rtc: {
                  input: [
                    "latency",
                    "jitter",
                    "packetLoss",
                    "loadedLatencyIncrease",
                  ],
                  pointThresholds: [5, 15, 25, 40],
                },
              },
            },
            yr = function (e) {
              var t = e.headers.get("server-timing");
              if (t) {
                var r = t.match(/dur=([0-9.]+)/);
                if (r) return +r[1];
              }
            },
            br = function (e) {
              return e.responseStart - e.requestStart;
            },
            wr = function (e) {
              return e.responseEnd - e.responseStart;
            },
            Sr = function (e) {
              return e.ping + e.payloadDownloadTime;
            },
            kr = function (e) {
              return e.ttfb;
            },
            Rr = function (e, t) {
              var r = e.duration,
                n = e.transferSize,
                a = r / 1e3;
              return a ? (8 * (n || 1.005 * +t)) / a : void 0;
            },
            Er = function (e, t) {
              var r = e.duration / 1e3;
              return r ? (8 * t * 1.005) / r : void 0;
            },
            Tr = Dt(function (e) {
              return "0".repeat(e);
            }),
            Pr = new WeakMap(),
            Cr = new WeakMap(),
            xr = new WeakMap(),
            Or = new WeakMap(),
            Dr = new WeakMap(),
            Ir = new WeakMap(),
            Mr = new WeakMap(),
            Lr = new WeakMap(),
            Ar = new WeakMap(),
            jr = new WeakMap(),
            Nr = new WeakMap(),
            Br = new WeakMap(),
            Fr = new WeakMap(),
            Ur = new WeakMap(),
            Wr = new WeakMap(),
            Vr = new WeakMap(),
            Hr = new WeakMap(),
            Zr = new WeakMap(),
            qr = new WeakMap(),
            zr = new WeakMap(),
            Gr = new WeakMap(),
            Kr = new WeakMap(),
            $r = new WeakSet(),
            Jr = new WeakSet(),
            Qr = new WeakSet(),
            Yr = new WeakSet();
          function Xr(e) {
            var t = this;
            e !== dr(this, Br) &&
              (lr(this, Br, e),
              setTimeout(function () {
                return dr(t, Or).call(t, dr(t, Br));
              }));
          }
          function en(e, t) {
            var r = this,
              n = dr(this, Ar)[e],
              a = n.bytes,
              i = n.dir,
              s = dr(this, Ur),
              o = s[i].hasOwnProperty(a)
                ? s[i][a]
                : {
                    timings: [],
                    numMeasurements: dr(this, Ar)
                      .filter(function (e) {
                        var t = e.bytes,
                          r = e.dir;
                        return a === t && i === r;
                      })
                      .map(function (e) {
                        return e.count;
                      })
                      .reduce(function (e, t) {
                        return e + t;
                      }, 0),
                  };
            t && o.timings.push(t),
              (o.timings = o.timings.slice(-o.numMeasurements)),
              (s[i][a] = o),
              t
                ? setTimeout(function () {
                    dr(r, Ir).call(r, Vt({ type: i, bytes: a }, t), s);
                  })
                : dr(this, Dr).call(this, dr(this, Ar)[e], s);
          }
          function tn() {
            var e = this,
              t = dr(this, Ar),
              r = t[dr(this, Wr)];
            if (dr(this, Vr) >= r.count) {
              var n = dr(this, Fr);
              if (
                dr(this, Zr) > this.finishRequestDuration &&
                !r.bypassMinDuration
              ) {
                var a = r.dir;
                (dr(this, Fr)[a] = !0),
                  Object.values(dr(this, Fr)).every(function (e) {
                    return e;
                  }) && dr(this, Mr).call(this, dr(this, Ur));
              }
              lr(this, Vr, 0),
                lr(this, Zr, -1 / 0),
                performance.clearResourceTimings();
              do {
                lr(this, Wr, dr(this, Wr) + 1);
              } while (dr(this, Wr) < t.length && n[t[dr(this, Wr)].dir]);
              if (dr(this, Wr) >= t.length)
                return (
                  lr(this, Fr, { down: !0, up: !0 }),
                  pr(this, $r, Xr).call(this, !1),
                  void dr(this, Mr).call(this, dr(this, Ur))
                );
              r = t[dr(this, Wr)];
            }
            var i = dr(this, Wr);
            0 === dr(this, Vr) && pr(this, Jr, en).call(this, i);
            var s = r,
              o = s.bytes,
              c = "down" === s.dir,
              d = dr(this, c ? jr : Nr),
              l = Object.assign({}, dr(this, Pr));
            c && (l.bytes = "".concat(o));
            var u,
              p = ""
                .concat(
                  d.startsWith("http") || d.startsWith("//")
                    ? ""
                    : window.location.origin
                )
                .concat(d, "?")
                .concat(
                  Object.entries(l)
                    .map(function (e) {
                      var t = ar(e, 2),
                        r = t[0],
                        n = t[1];
                      return "".concat(r, "=").concat(n);
                    })
                    .join("&")
                ),
              h = Object.assign(
                {},
                c ? {} : { method: "POST", body: Tr(o) },
                dr(this, Cr)
              ),
              m = lr(
                this,
                Gr,
                fetch(p, h)
                  .then(function (e) {
                    if (e.ok) return e;
                    throw Error(e.statusText);
                  })
                  .then(function (t) {
                    return e.getServerTime && (u = e.getServerTime(t)), t;
                  })
                  .then(function (t) {
                    return t.text().then(function (r) {
                      return (
                        dr(e, xr) &&
                          dr(e, xr).call(e, {
                            url: p,
                            headers: t.headers,
                            body: r,
                          }),
                        r
                      );
                    });
                  })
                  .then(function (t, r) {
                    if (m._cancel) r("cancelled");
                    else {
                      var n = performance.getEntriesByName(p).slice(-1)[0],
                        a = {
                          transferSize: n.transferSize,
                          ttfb: br(n),
                          payloadDownloadTime: wr(n),
                          serverTime: u || -1,
                          measTime: new Date(),
                        };
                      if (
                        ((a.ping = Math.max(0.01, a.ttfb - (u || dr(e, zr)))),
                        (a.duration = (c ? Sr : kr)(a)),
                        (a.bps = (c ? Rr : Er)(a, o)),
                        c && o)
                      ) {
                        var s = +o;
                        a.transferSize &&
                          (a.transferSize < s || a.transferSize / s > 1.05) &&
                          console.warn(
                            "Requested "
                              .concat(s, "B but received ")
                              .concat(a.transferSize, "B (")
                              .concat(
                                Math.round((a.transferSize / s) * 1e4) / 100,
                                "%)."
                              )
                          );
                      }
                      pr(e, Jr, en).call(e, i, a);
                      var d = a.duration;
                      lr(e, Zr, dr(e, Zr) < 0 ? d : Math.min(dr(e, Zr), d)),
                        lr(e, Vr, dr(e, Vr) + 1),
                        lr(e, Hr, 0),
                        dr(e, qr)
                          ? lr(
                              e,
                              Kr,
                              setTimeout(function () {
                                return pr(e, Qr, tn).call(e);
                              }, dr(e, qr))
                            )
                          : pr(e, Qr, tn).call(e);
                    }
                  })
                  .catch(function (t) {
                    var r, n;
                    m._cancel ||
                      (console.warn(
                        "Error fetching ".concat(p, ": ").concat(t)
                      ),
                      lr(e, Hr, ((r = dr(e, Hr)), (n = r++), r)),
                      n < 20
                        ? pr(e, Qr, tn).call(e)
                        : (lr(e, Hr, 0),
                          pr(e, $r, Xr).call(e, !1),
                          dr(e, Lr).call(
                            e,
                            "Connection failed to "
                              .concat(p, ". Gave up after ")
                              .concat(20, " retries.")
                          )));
                  })
              );
          }
          function rn() {
            var e = dr(this, Gr);
            e && (e._cancel = !0);
          }
          var nn = (function () {
              function e(t) {
                var r =
                    arguments.length > 1 && void 0 !== arguments[1]
                      ? arguments[1]
                      : {},
                  n = r.downloadApiUrl,
                  a = r.uploadApiUrl,
                  i = r.throttleMs,
                  s = void 0 === i ? 0 : i,
                  o = r.estimatedServerTime,
                  c = void 0 === o ? 0 : o;
                if (
                  (Ht(this, e),
                  fr(this, Yr),
                  fr(this, Qr),
                  fr(this, Jr),
                  fr(this, $r),
                  mr(this, Pr, { writable: !0, value: {} }),
                  mr(this, Cr, { writable: !0, value: {} }),
                  zt(this, "finishRequestDuration", 1e3),
                  zt(this, "getServerTime", yr),
                  mr(this, xr, {
                    writable: !0,
                    value: function (e) {
                      return e;
                    },
                  }),
                  mr(this, Or, { writable: !0, value: function () {} }),
                  mr(this, Dr, { writable: !0, value: function () {} }),
                  mr(this, Ir, { writable: !0, value: function () {} }),
                  mr(this, Mr, { writable: !0, value: function () {} }),
                  mr(this, Lr, { writable: !0, value: function () {} }),
                  mr(this, Ar, { writable: !0, value: void 0 }),
                  mr(this, jr, { writable: !0, value: void 0 }),
                  mr(this, Nr, { writable: !0, value: void 0 }),
                  mr(this, Br, { writable: !0, value: !1 }),
                  mr(this, Fr, { writable: !0, value: { down: !1, up: !1 } }),
                  mr(this, Ur, { writable: !0, value: { down: {}, up: {} } }),
                  mr(this, Wr, { writable: !0, value: 0 }),
                  mr(this, Vr, { writable: !0, value: 0 }),
                  mr(this, Hr, { writable: !0, value: 0 }),
                  mr(this, Zr, { writable: !0, value: -1 / 0 }),
                  mr(this, qr, { writable: !0, value: 0 }),
                  mr(this, zr, { writable: !0, value: 0 }),
                  mr(this, Gr, { writable: !0, value: void 0 }),
                  mr(this, Kr, { writable: !0, value: void 0 }),
                  !t)
                )
                  throw new Error("Missing measurements argument");
                if (!n) throw new Error("Missing downloadApiUrl argument");
                if (!a) throw new Error("Missing uploadApiUrl argument");
                lr(this, Ar, t),
                  lr(this, jr, n),
                  lr(this, Nr, a),
                  lr(this, qr, s),
                  lr(this, zr, Math.max(0, c));
              }
              return (
                qt(e, [
                  {
                    key: "results",
                    get: function () {
                      return dr(this, Ur);
                    },
                  },
                  {
                    key: "qsParams",
                    get: function () {
                      return dr(this, Pr);
                    },
                    set: function (e) {
                      lr(this, Pr, e);
                    },
                  },
                  {
                    key: "fetchOptions",
                    get: function () {
                      return dr(this, Cr);
                    },
                    set: function (e) {
                      lr(this, Cr, e);
                    },
                  },
                  {
                    key: "responseHook",
                    set: function (e) {
                      lr(this, xr, e);
                    },
                  },
                  {
                    key: "onRunningChange",
                    set: function (e) {
                      lr(this, Or, e);
                    },
                  },
                  {
                    key: "onNewMeasurementStarted",
                    set: function (e) {
                      lr(this, Dr, e);
                    },
                  },
                  {
                    key: "onMeasurementResult",
                    set: function (e) {
                      lr(this, Ir, e);
                    },
                  },
                  {
                    key: "onFinished",
                    set: function (e) {
                      lr(this, Mr, e);
                    },
                  },
                  {
                    key: "onConnectionError",
                    set: function (e) {
                      lr(this, Lr, e);
                    },
                  },
                  {
                    key: "pause",
                    value: function () {
                      clearTimeout(dr(this, Kr)),
                        pr(this, Yr, rn).call(this),
                        pr(this, $r, Xr).call(this, !1);
                    },
                  },
                  {
                    key: "play",
                    value: function () {
                      dr(this, Br) ||
                        (pr(this, $r, Xr).call(this, !0),
                        pr(this, Qr, tn).call(this));
                    },
                  },
                ]),
                e
              );
            })(),
            an = [
              "measureParallelLatency",
              "parallelLatencyThrottleMs",
              "downloadApiUrl",
              "uploadApiUrl",
              "estimatedServerTime",
            ],
            sn = new WeakMap(),
            on = new WeakSet();
          function cn(e) {
            var t = this;
            dr(this, sn) &&
              (e
                ? setTimeout(function () {
                    return dr(t, sn).play();
                  }, 20)
                : dr(this, sn).pause());
          }
          var dn = (function (e) {
              Gt(r, e);
              var t = Xt(r);
              function r(e) {
                var n,
                  a,
                  i,
                  s =
                    arguments.length > 1 && void 0 !== arguments[1]
                      ? arguments[1]
                      : {},
                  o = s.measureParallelLatency,
                  c = void 0 !== o && o,
                  d = s.parallelLatencyThrottleMs,
                  l = void 0 === d ? 100 : d,
                  u = s.downloadApiUrl,
                  p = s.uploadApiUrl,
                  h = s.estimatedServerTime,
                  m = void 0 === h ? 0 : h,
                  f = Jt(s, an);
                return (
                  Ht(this, r),
                  fr(
                    Qt(
                      (i = t.call(
                        this,
                        e,
                        Vt(
                          {
                            downloadApiUrl: u,
                            uploadApiUrl: p,
                            estimatedServerTime: m,
                          },
                          f
                        )
                      ))
                    ),
                    on
                  ),
                  mr(Qt(i), sn, { writable: !0, value: void 0 }),
                  c &&
                    (lr(
                      Qt(i),
                      sn,
                      new nn(
                        [
                          {
                            dir: "down",
                            bytes: 0,
                            count: 1 / 0,
                            bypassMinDuration: !0,
                          },
                        ],
                        {
                          downloadApiUrl: u,
                          uploadApiUrl: p,
                          estimatedServerTime: m,
                          throttleMs: l,
                        }
                      )
                    ),
                    (dr(Qt(i), sn).qsParams = {
                      during: "".concat(e[0].dir, "load"),
                    }),
                    nr(
                      ((n = Qt(i)), Kt(r.prototype)),
                      "onRunningChange",
                      pr(Qt(i), on, cn),
                      n,
                      !0
                    ),
                    nr(
                      ((a = Qt(i)), Kt(r.prototype)),
                      "onConnectionError",
                      function () {
                        return dr(Qt(i), sn).pause();
                      },
                      a,
                      !0
                    )),
                  i
                );
              }
              return (
                qt(r, [
                  {
                    key: "latencyResults",
                    get: function () {
                      return (
                        dr(this, sn) && dr(this, sn).results.down[0].timings
                      );
                    },
                  },
                  {
                    key: "onParallelLatencyResult",
                    set: function (e) {
                      dr(this, sn) &&
                        (dr(this, sn).onMeasurementResult = function (t) {
                          return e(t);
                        });
                    },
                  },
                  {
                    key: "fetchOptions",
                    get: function () {
                      return tr(Kt(r.prototype), "fetchOptions", this);
                    },
                    set: function (e) {
                      nr(Kt(r.prototype), "fetchOptions", e, this, !0),
                        dr(this, sn) && (dr(this, sn).fetchOptions = e);
                    },
                  },
                  {
                    key: "onRunningChange",
                    set: function (e) {
                      var t = this;
                      nr(
                        Kt(r.prototype),
                        "onRunningChange",
                        function (r) {
                          pr(t, on, cn).call(t, r), e(r);
                        },
                        this,
                        !0
                      );
                    },
                  },
                  {
                    key: "onConnectionError",
                    set: function (e) {
                      var t = this;
                      nr(
                        Kt(r.prototype),
                        "onConnectionError",
                        function () {
                          dr(t, sn) && dr(t, sn).pause(),
                            e.apply(void 0, arguments);
                        },
                        this,
                        !0
                      );
                    },
                  },
                ]),
                r
              );
            })(nn),
            ln = ["measurementId", "logApiUrl"],
            un = new WeakMap(),
            pn = new WeakMap(),
            hn = new WeakMap(),
            mn = new WeakMap(),
            fn = new WeakSet(),
            vn = new WeakSet();
          function _n(e) {
            dr(this, mn) &&
              (lr(this, hn, +e.headers.get("cf-meta-request-time")),
              lr(this, pn, e.body.slice(-300).split("___").pop()));
          }
          function gn(e) {
            if (dr(this, mn)) {
              var t = {
                type: e.type,
                bytes: e.bytes,
                ping: Math.round(e.ping),
                ttfb: Math.round(e.ttfb),
                payloadDownloadTime: Math.round(e.payloadDownloadTime),
                duration: Math.round(e.duration),
                transferSize: Math.round(e.transferSize),
                serverTime: Math.round(e.serverTime),
                token: dr(this, pn),
                requestTime: dr(this, hn),
                measId: dr(this, un),
              };
              lr(this, pn, null),
                lr(this, hn, null),
                fetch(
                  dr(this, mn),
                  Vt(
                    { method: "POST", body: JSON.stringify(t) },
                    this.fetchOptions
                  )
                );
            }
          }
          var yn = (function (e) {
              Gt(r, e);
              var t = Xt(r);
              function r(e) {
                var n,
                  a,
                  i,
                  s,
                  o =
                    arguments.length > 1 && void 0 !== arguments[1]
                      ? arguments[1]
                      : {},
                  c = o.measurementId,
                  d = o.logApiUrl,
                  l = Jt(o, ln);
                return (
                  Ht(this, r),
                  fr(Qt((s = t.call(this, e, l))), vn),
                  fr(Qt(s), fn),
                  mr(Qt(s), un, { writable: !0, value: void 0 }),
                  mr(Qt(s), pn, { writable: !0, value: void 0 }),
                  mr(Qt(s), hn, { writable: !0, value: void 0 }),
                  mr(Qt(s), mn, { writable: !0, value: void 0 }),
                  lr(Qt(s), un, c),
                  lr(Qt(s), mn, d),
                  nr(
                    ((n = Qt(s)), Kt(r.prototype)),
                    "qsParams",
                    d ? { measId: dr(Qt(s), un) } : {},
                    n,
                    !0
                  ),
                  nr(
                    ((a = Qt(s)), Kt(r.prototype)),
                    "responseHook",
                    function (e) {
                      return pr(Qt(s), fn, _n).call(Qt(s), e);
                    },
                    a,
                    !0
                  ),
                  nr(
                    ((i = Qt(s)), Kt(r.prototype)),
                    "onMeasurementResult",
                    function (e) {
                      return pr(Qt(s), vn, gn).call(Qt(s), e);
                    },
                    i,
                    !0
                  ),
                  s
                );
              }
              return (
                qt(r, [
                  {
                    key: "qsParams",
                    set: function (e) {
                      nr(
                        Kt(r.prototype),
                        "qsParams",
                        dr(this, mn) ? Vt({ measId: dr(this, un) }, e) : e,
                        this,
                        !0
                      );
                    },
                  },
                  {
                    key: "responseHook",
                    set: function (e) {
                      var t = this;
                      nr(
                        Kt(r.prototype),
                        "responseHook",
                        function (r) {
                          e(r), pr(t, fn, _n).call(t, r);
                        },
                        this,
                        !0
                      );
                    },
                  },
                  {
                    key: "onMeasurementResult",
                    set: function (e) {
                      var t = this;
                      nr(
                        Kt(r.prototype),
                        "onMeasurementResult",
                        function (r) {
                          for (
                            var n = arguments.length,
                              a = new Array(n > 1 ? n - 1 : 0),
                              i = 1;
                            i < n;
                            i++
                          )
                            a[i - 1] = arguments[i];
                          e.apply(void 0, [r].concat(a)),
                            pr(t, vn, gn).call(t, r);
                        },
                        this,
                        !0
                      );
                    },
                  },
                ]),
                r
              );
            })(dn),
            bn = new WeakMap(),
            wn = new WeakMap(),
            Sn = new WeakMap(),
            kn = new WeakSet(),
            Rn = new WeakSet(),
            En = new WeakSet(),
            Tn = (function () {
              function e(t) {
                if (
                  (Ht(this, e),
                  fr(this, En),
                  fr(this, Rn),
                  fr(this, kn),
                  mr(this, bn, { writable: !0, value: !1 }),
                  mr(this, wn, { writable: !0, value: void 0 }),
                  mr(this, Sn, { writable: !0, value: void 0 }),
                  !t)
                )
                  throw new Error("Missing operation to perform");
                lr(this, Sn, t), this.play();
              }
              return (
                qt(e, [
                  {
                    key: "pause",
                    value: function () {
                      pr(this, En, xn).call(this),
                        pr(this, kn, Pn).call(this, !1);
                    },
                  },
                  {
                    key: "stop",
                    value: function () {
                      this.pause();
                    },
                  },
                  {
                    key: "play",
                    value: function () {
                      dr(this, bn) ||
                        (pr(this, kn, Pn).call(this, !0),
                        pr(this, Rn, Cn).call(this));
                    },
                  },
                ]),
                e
              );
            })();
          function Pn(e) {
            e !== dr(this, bn) && lr(this, bn, e);
          }
          function Cn() {
            var e = this,
              t = lr(
                this,
                wn,
                dr(this, Sn)
                  .call(this)
                  .then(function () {
                    !t._cancel && pr(e, Rn, Cn).call(e);
                  })
              );
          }
          function xn() {
            var e = dr(this, wn);
            e && (e._cancel = !0);
          }
          var On = new WeakMap(),
            Dn = (function () {
              function e() {
                var t = this,
                  r =
                    arguments.length > 0 && void 0 !== arguments[0]
                      ? arguments[0]
                      : {},
                  n = r.download,
                  a = r.upload;
                if (
                  (Ht(this, e),
                  zt(this, "qsParams", {}),
                  zt(this, "fetchOptions", {}),
                  mr(this, On, { writable: !0, value: [] }),
                  !n && !a)
                )
                  throw new Error(
                    "Missing at least one of download/upload config"
                  );
                [
                  [n, "download"],
                  [a, "upload"],
                ]
                  .filter(function (e) {
                    return ar(e, 1)[0];
                  })
                  .forEach(function (e) {
                    var t = ar(e, 2),
                      r = t[0],
                      n = t[1],
                      a = r.apiUrl,
                      i = r.chunkSize;
                    if (!a)
                      throw new Error("Missing ".concat(n, " apiUrl argument"));
                    if (!i)
                      throw new Error(
                        "Missing ".concat(n, " chunkSize argument")
                      );
                  });
                var i = function (e) {
                  var r = e.apiUrl,
                    n = e.qsParams,
                    a = void 0 === n ? {} : n,
                    i = e.fetchOptions,
                    s = void 0 === i ? {} : i;
                  return new Tn(function () {
                    var e = Object.assign({}, a, t.qsParams),
                      n = ""
                        .concat(
                          r.startsWith("http") || r.startsWith("//")
                            ? ""
                            : window.location.origin
                        )
                        .concat(r, "?")
                        .concat(
                          Object.entries(e)
                            .map(function (e) {
                              var t = ar(e, 2),
                                r = t[0],
                                n = t[1];
                              return "".concat(r, "=").concat(n);
                            })
                            .join("&")
                        ),
                      i = Object.assign({}, s, t.fetchOptions);
                    return fetch(n, i)
                      .then(function (e) {
                        if (e.ok) return e;
                        throw Error(e.statusText);
                      })
                      .then(function (e) {
                        return e.text();
                      });
                  });
                };
                n &&
                  dr(this, On).push(
                    i({
                      apiUrl: n.apiUrl,
                      qsParams: { bytes: "".concat(n.chunkSize) },
                    })
                  ),
                  a &&
                    dr(this, On).push(
                      i({
                        apiUrl: a.apiUrl,
                        fetchOptions: {
                          method: "POST",
                          body: "0".repeat(a.chunkSize),
                        },
                      })
                    );
              }
              return (
                qt(e, [
                  {
                    key: "pause",
                    value: function () {
                      dr(this, On).forEach(function (e) {
                        return e.pause();
                      });
                    },
                  },
                  {
                    key: "stop",
                    value: function () {
                      this.pause();
                    },
                  },
                  {
                    key: "play",
                    value: function () {
                      dr(this, On).forEach(function (e) {
                        return e.play();
                      });
                    },
                  },
                ]),
                e
              );
            })(),
            In = ["iceServers", "acceptIceCandidate", "dataChannelCfg"],
            Mn = new WeakMap(),
            Ln = new WeakMap(),
            An = new WeakMap(),
            jn = new WeakMap(),
            Nn = new WeakMap(),
            Bn = (function () {
              function e() {
                var t = this,
                  r =
                    arguments.length > 0 && void 0 !== arguments[0]
                      ? arguments[0]
                      : {},
                  n = r.iceServers,
                  a = void 0 === n ? [] : n,
                  i = r.acceptIceCandidate,
                  s =
                    void 0 === i
                      ? function (e) {
                          var t = e.protocol || "";
                          if (!t && e.candidate) {
                            var r = e.candidate.split(" ");
                            r.length >= 3 && (t = r[2]);
                          }
                          return "udp" === t.toLowerCase();
                        }
                      : i,
                  o = r.dataChannelCfg,
                  c = void 0 === o ? { ordered: !1, maxRetransmits: 0 } : o,
                  d = Jt(r, In);
                Ht(this, e),
                  zt(this, "onOpen", function () {}),
                  zt(this, "onClose", function () {}),
                  zt(this, "onMessageReceived", function () {}),
                  mr(this, Mn, { writable: !0, value: !1 }),
                  mr(this, Ln, { writable: !0, value: void 0 }),
                  mr(this, An, { writable: !0, value: void 0 }),
                  mr(this, jn, { writable: !0, value: void 0 }),
                  mr(this, Nn, { writable: !0, value: void 0 });
                var l = new RTCPeerConnection(Vt({ iceServers: a }, d)),
                  u = new RTCPeerConnection(Vt({ iceServers: a }, d)),
                  p = l.createDataChannel("channel", c);
                (p.onopen = function () {
                  lr(t, Mn, !0), t.onOpen();
                }),
                  (p.onclose = function () {
                    return t.close();
                  }),
                  (u.ondatachannel = function (e) {
                    var r = e.channel;
                    (r.onclose = function () {
                      return t.close();
                    }),
                      (r.onmessage = function (e) {
                        return t.onMessageReceived(e.data);
                      }),
                      lr(t, Nn, r);
                  }),
                  (l.onicecandidate = function (e) {
                    e.candidate &&
                      s(e.candidate) &&
                      u.addIceCandidate(e.candidate);
                  }),
                  (u.onicecandidate = function (e) {
                    e.candidate &&
                      s(e.candidate) &&
                      l.addIceCandidate(e.candidate);
                  }),
                  l
                    .createOffer()
                    .then(function (e) {
                      return l.setLocalDescription(e);
                    })
                    .then(function () {
                      return u.setRemoteDescription(l.localDescription);
                    })
                    .then(function () {
                      return u.createAnswer();
                    })
                    .then(function (e) {
                      return u.setLocalDescription(e);
                    })
                    .then(function () {
                      return l.setRemoteDescription(u.localDescription);
                    }),
                  lr(this, Ln, l),
                  lr(this, An, u),
                  lr(this, jn, p),
                  lr(this, Mn, !1);
              }
              return (
                qt(e, [
                  {
                    key: "send",
                    value: function (e) {
                      return dr(this, jn).send(e);
                    },
                  },
                  {
                    key: "close",
                    value: function () {
                      return (
                        dr(this, Ln) && dr(this, Ln).close(),
                        dr(this, An) && dr(this, An).close(),
                        dr(this, jn) && dr(this, jn).close(),
                        dr(this, Nn) && dr(this, Nn).close(),
                        dr(this, Mn) && this.onClose(),
                        lr(this, Mn, !1),
                        this
                      );
                    },
                  },
                ]),
                e
              );
            })(),
            Fn = new WeakMap(),
            Un = new WeakMap(),
            Wn = new WeakMap(),
            Vn = new WeakMap(),
            Hn = new WeakMap(),
            Zn = new WeakMap(),
            qn = (function () {
              function e() {
                var t = this,
                  r =
                    arguments.length > 0 && void 0 !== arguments[0]
                      ? arguments[0]
                      : {},
                  n = r.turnServerUri,
                  a = r.turnServerCredsApi,
                  i = r.turnServerCredsApiParser,
                  s =
                    void 0 === i
                      ? function (e) {
                          return {
                            turnServerUser: e.username,
                            turnServerPass: e.credential,
                          };
                        }
                      : i,
                  o = r.turnServerCredsApiIncludeCredentials,
                  c = void 0 !== o && o,
                  d = r.turnServerUser,
                  l = r.turnServerPass,
                  u = r.numMsgs,
                  p = void 0 === u ? 100 : u,
                  h = r.batchSize,
                  m = void 0 === h ? 10 : h,
                  f = r.batchWaitTime,
                  v = void 0 === f ? 10 : f,
                  _ = r.responsesWaitTime,
                  g = void 0 === _ ? 5e3 : _,
                  y = r.connectionTimeout,
                  b = void 0 === y ? 5e3 : y;
                if (
                  (Ht(this, e),
                  mr(this, Fn, { writable: !0, value: function () {} }),
                  mr(this, Un, { writable: !0, value: function () {} }),
                  mr(this, Wn, { writable: !0, value: function () {} }),
                  zt(this, "onMsgSent", function () {}),
                  zt(this, "onAllMsgsSent", function () {}),
                  zt(this, "onMsgReceived", function () {}),
                  mr(this, Vn, { writable: !0, value: {} }),
                  mr(this, Hn, { writable: !0, value: void 0 }),
                  mr(this, Zn, { writable: !0, value: void 0 }),
                  !n)
                )
                  throw new Error("Missing turnServerUri argument");
                if (!((d && l) || a))
                  throw new Error(
                    "Missing either turnServerCredsApi or turnServerUser+turnServerPass arguments"
                  );
                lr(this, Zn, p),
                  (d && l
                    ? Promise.resolve({ turnServerUser: d, turnServerPass: l })
                    : fetch(a, { credentials: c ? "include" : void 0 })
                        .then(function (e) {
                          return e.json();
                        })
                        .then(function (e) {
                          if (e.error) throw e.error;
                          return e;
                        })
                        .then(s)
                  )
                    .catch(function (e) {
                      return dr(t, Fn).call(t, e);
                    })
                    .then(function (e) {
                      var r = e.turnServerUser,
                        a = e.turnServerPass,
                        i = lr(
                          t,
                          Hn,
                          new Bn({
                            iceServers: [
                              {
                                urls: "turn:".concat(n, "?transport=udp"),
                                username: r,
                                credential: a,
                              },
                            ],
                            iceTransportPolicy: "relay",
                          })
                        ),
                        s = !1;
                      setTimeout(function () {
                        s ||
                          (i.close(),
                          dr(t, Un).call(t, "ICE connection timeout!"));
                      }, b);
                      var o = dr(t, Vn);
                      (i.onOpen = function () {
                        s = !0;
                        var e = t;
                        !(function t(r) {
                          if (r <= p) {
                            for (var n = r; n <= Math.min(p, r + m - 1); )
                              (o[n] = !1), i.send(n), e.onMsgSent(n), n++;
                            setTimeout(function () {
                              return t(n);
                            }, v);
                          } else {
                            e.onAllMsgsSent(Object.keys(o).length);
                            var a = function () {
                                i.close(), dr(e, Wn).call(e, e.results);
                              },
                              s = setTimeout(a, g),
                              c = Object.values(dr(e, Vn)).filter(function (e) {
                                return !e;
                              }).length;
                            i.onMessageReceived = function (t) {
                              clearTimeout(s),
                                (o[t] = !0),
                                e.onMsgReceived(t),
                                --c <= 0 &&
                                Object.values(dr(e, Vn)).every(function (e) {
                                  return e;
                                })
                                  ? a()
                                  : (s = setTimeout(a, g));
                            };
                          }
                        })(1);
                      }),
                        (i.onMessageReceived = function (e) {
                          (o[e] = !0), t.onMsgReceived(e);
                        });
                    })
                    .catch(function (e) {
                      return dr(t, Un).call(t, e.toString());
                    });
              }
              return (
                qt(e, [
                  {
                    key: "onCredentialsFailure",
                    set: function (e) {
                      lr(this, Fn, e);
                    },
                  },
                  {
                    key: "onConnectionError",
                    set: function (e) {
                      lr(this, Un, e);
                    },
                  },
                  {
                    key: "onFinished",
                    set: function (e) {
                      lr(this, Wn, e);
                    },
                  },
                  {
                    key: "results",
                    get: function () {
                      var e = dr(this, Zn),
                        t = Object.keys(dr(this, Vn)).length,
                        r = Object.entries(dr(this, Vn))
                          .filter(function (e) {
                            return !ar(e, 2)[1];
                          })
                          .map(function (e) {
                            return +ar(e, 1)[0];
                          });
                      return {
                        totalMessages: e,
                        numMessagesSent: t,
                        packetLoss: r.length / t,
                        lostMessages: r,
                      };
                    },
                  },
                ]),
                e
              );
            })(),
            zn = [
              "downloadChunkSize",
              "uploadChunkSize",
              "downloadApiUrl",
              "uploadApiUrl",
            ],
            Gn = new WeakMap(),
            Kn = (function (e) {
              Gt(r, e);
              var t = Xt(r);
              function r() {
                var e,
                  n,
                  a,
                  i,
                  s =
                    arguments.length > 0 && void 0 !== arguments[0]
                      ? arguments[0]
                      : {},
                  o = s.downloadChunkSize,
                  c = s.uploadChunkSize,
                  d = s.downloadApiUrl,
                  l = s.uploadApiUrl,
                  u = Jt(s, zn);
                return (
                  Ht(this, r),
                  mr(Qt((i = t.call(this, u))), Gn, {
                    writable: !0,
                    value: void 0,
                  }),
                  (o || c) &&
                    (lr(
                      Qt(i),
                      Gn,
                      new Dn({
                        download: o ? { apiUrl: d, chunkSize: o } : null,
                        upload: c ? { apiUrl: l, chunkSize: c } : null,
                      })
                    ),
                    nr(
                      ((e = Qt(i)), Kt(r.prototype)),
                      "onCredentialsFailure",
                      nr(
                        ((a = Qt(i)), Kt(r.prototype)),
                        "onConnectionError",
                        nr(
                          ((n = Qt(i)), Kt(r.prototype)),
                          "onFinished",
                          function () {
                            return dr(Qt(i), Gn).stop();
                          },
                          n,
                          !0
                        ),
                        a,
                        !0
                      ),
                      e,
                      !0
                    )),
                  i
                );
              }
              return (
                qt(r, [
                  {
                    key: "qsParams",
                    set: function (e) {
                      dr(this, Gn) && (dr(this, Gn).qsParams = e);
                    },
                  },
                  {
                    key: "fetchOptions",
                    set: function (e) {
                      dr(this, Gn) && (dr(this, Gn).fetchOptions = e);
                    },
                  },
                  {
                    key: "onCredentialsFailure",
                    set: function (e) {
                      var t = this;
                      nr(
                        Kt(r.prototype),
                        "onCredentialsFailure",
                        function () {
                          e.apply(void 0, arguments),
                            dr(t, Gn) && dr(t, Gn).stop();
                        },
                        this,
                        !0
                      );
                    },
                  },
                  {
                    key: "onConnectionError",
                    set: function (e) {
                      var t = this;
                      nr(
                        Kt(r.prototype),
                        "onConnectionError",
                        function () {
                          e.apply(void 0, arguments),
                            dr(t, Gn) && dr(t, Gn).stop();
                        },
                        this,
                        !0
                      );
                    },
                  },
                  {
                    key: "onFinished",
                    set: function (e) {
                      var t = this;
                      nr(
                        Kt(r.prototype),
                        "onFinished",
                        function () {
                          e.apply(void 0, arguments),
                            dr(t, Gn) && dr(t, Gn).stop();
                        },
                        this,
                        !0
                      );
                    },
                  },
                ]),
                r
              );
            })(qn),
            $n = ["reachable"],
            Jn = qt(function e(t) {
              var r = this,
                n =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : {},
                a = n.timeout,
                i = void 0 === a ? -1 : a,
                s = n.fetchOptions,
                o = void 0 === s ? {} : s;
              Ht(this, e), zt(this, "onFinished", function () {});
              var c = !1,
                d = function (e) {
                  var n = e.reachable,
                    a = Jt(e, $n);
                  c ||
                    ((c = !0),
                    r.onFinished(Vt({ targetUrl: t, reachable: n }, a)));
                };
              fetch(t, o)
                .then(function (e) {
                  d({ reachable: !0, response: e });
                })
                .catch(function (e) {
                  d({ reachable: !1, error: e });
                }),
                i > 0 &&
                  setTimeout(function () {
                    return d({ reachable: !1, error: "Request timeout" });
                  }, i);
            }),
            Qn = function (e) {
              var t =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : 0.5;
              if (!e.length) return 0;
              var r = e.slice().sort(function (e, t) {
                  return e - t;
                }),
                n = (e.length - 1) * t,
                a = n % 1;
              if (0 === a) return r[Math.round(n)];
              var i = [Math.floor, Math.ceil].map(function (e) {
                return r[e(n)];
              });
              return i[0] + (i[1] - i[0]) * a;
            },
            Yn = new WeakMap(),
            Xn = new WeakMap(),
            ea = (function () {
              function e(t) {
                var r = this;
                Ht(this, e),
                  zt(this, "getLatencyPoints", function (e) {
                    return e.timings.map(function (e) {
                      return e.ping;
                    });
                  }),
                  zt(this, "getLatency", function (e) {
                    return Qn(
                      r.getLatencyPoints(e),
                      dr(r, Yn).latencyPercentile
                    );
                  }),
                  zt(this, "getBandwidthPoints", function (e) {
                    return Object.entries(e)
                      .map(function (e) {
                        var t = ar(e, 2),
                          r = t[0];
                        return t[1].timings.map(function (e) {
                          var t = e.bps,
                            n = e.duration,
                            a = e.ping,
                            i = e.measTime,
                            s = e.serverTime,
                            o = e.transferSize;
                          return {
                            bytes: +r,
                            bps: t,
                            duration: n,
                            ping: a,
                            measTime: i,
                            serverTime: s,
                            transferSize: o,
                          };
                        });
                      })
                      .flat();
                  }),
                  zt(this, "getBandwidth", function (e) {
                    return Qn(
                      r
                        .getBandwidthPoints(e)
                        .filter(function (e) {
                          return (
                            e.duration >= dr(r, Yn).bandwidthMinRequestDuration
                          );
                        })
                        .map(function (e) {
                          return e.bps;
                        })
                        .filter(function (e) {
                          return e;
                        }),
                      dr(r, Yn).bandwidthPercentile
                    );
                  }),
                  zt(this, "getLoadedLatency", function (e) {
                    return r.getLatency({ timings: dr(r, Xn).call(r, e) });
                  }),
                  zt(this, "getLoadedJitter", function (e) {
                    return r.getJitter({ timings: dr(r, Xn).call(r, e) });
                  }),
                  zt(this, "getLoadedLatencyPoints", function (e) {
                    return r.getLatencyPoints({
                      timings: dr(r, Xn).call(r, e),
                    });
                  }),
                  zt(this, "getPacketLoss", function (e) {
                    return e.packetLoss;
                  }),
                  zt(this, "getPacketLossDetails", function (e) {
                    return e;
                  }),
                  zt(this, "getReachability", function (e) {
                    return !!e.reachable;
                  }),
                  zt(this, "getReachabilityDetails", function (e) {
                    return { host: e.host, reachable: e.reachable };
                  }),
                  mr(this, Yn, { writable: !0, value: void 0 }),
                  mr(this, Xn, {
                    writable: !0,
                    value: function (e) {
                      return Object.values(e)
                        .filter(function (e) {
                          return (
                            e.timings.length &&
                            Math.min.apply(
                              Math,
                              ir(
                                e.timings.map(function (e) {
                                  return e.duration;
                                })
                              )
                            ) >= dr(r, Yn).loadedRequestMinDuration
                          );
                        })
                        .map(function (e) {
                          return e.sideLatency || [];
                        })
                        .flat()
                        .slice(-dr(r, Yn).loadedLatencyMaxPoints);
                    },
                  }),
                  lr(this, Yn, t);
              }
              return (
                qt(e, [
                  {
                    key: "getJitter",
                    value: function (e) {
                      var t = this.getLatencyPoints(e);
                      return t.length < 2
                        ? null
                        : t.reduce(function (e, t) {
                            var r = e.sumDeltas,
                              n = void 0 === r ? 0 : r,
                              a = e.prevLatency;
                            return {
                              sumDeltas:
                                n + (void 0 !== a ? Math.abs(a - t) : 0),
                              prevLatency: t,
                            };
                          }, {}).sumDeltas /
                            (t.length - 1);
                    },
                  },
                ]),
                e
              );
            })(),
            ta = ["bad", "poor", "average", "good", "great"],
            ra = {
              loadedLatencyIncrease: function (e) {
                return e.latency && (e.downLoadedLatency || e.upLoadedLatency)
                  ? Math.max(e.downLoadedLatency, e.upLoadedLatency) - e.latency
                  : void 0;
              },
            },
            na = { packetLoss: 0 },
            aa = new WeakMap(),
            ia = (function () {
              function e(t) {
                Ht(this, e),
                  mr(this, aa, { writable: !0, value: void 0 }),
                  lr(this, aa, t);
              }
              return (
                qt(e, [
                  {
                    key: "getScores",
                    value: function (e) {
                      var t = Object.assign.apply(
                        Object,
                        ir(
                          Object.entries(
                            dr(this, aa).aimMeasurementScoring
                          ).map(function (t) {
                            var r = ar(t, 2),
                              n = r[0],
                              a = r[1],
                              i = ra.hasOwnProperty(n) ? ra[n](e) : e[n];
                            return void 0 === i
                              ? na.hasOwnProperty(n)
                                ? zt({}, n, na[n])
                                : {}
                              : zt({}, n, void 0 === i ? 0 : +a(i));
                          })
                        )
                      );
                      return Object.assign.apply(
                        Object,
                        [{}].concat(
                          ir(
                            Object.entries(dr(this, aa).aimExperiencesDefs)
                              .filter(function (e) {
                                return ar(e, 2)[1].input.every(function (e) {
                                  return t.hasOwnProperty(e);
                                });
                              })
                              .map(function (e) {
                                var r,
                                  n = ar(e, 2),
                                  a = n[0],
                                  i = n[1],
                                  s = i.input,
                                  o = i.pointThresholds,
                                  c = Math.max(
                                    0,
                                    ((r = s.map(function (e) {
                                      return t[e];
                                    })),
                                    r.reduce(function (e, t) {
                                      return e + t;
                                    }, 0))
                                  ),
                                  d = Ut(o, [0, 1, 2, 3, 4])(c);
                                return zt({}, a, {
                                  points: c,
                                  classificationIdx: d,
                                  classificationName: ta[d],
                                });
                              })
                          )
                        )
                      );
                    },
                  },
                ]),
                e
              );
            })(),
            sa = new WeakMap(),
            oa = new WeakMap(),
            ca = new WeakMap(),
            da = new WeakMap(),
            la = new WeakMap(),
            ua = new WeakMap(),
            pa = new WeakMap(),
            ha = new WeakMap(),
            ma = (function () {
              function e(t) {
                var r = this;
                Ht(this, e),
                  zt(this, "raw", void 0),
                  zt(this, "getUnloadedLatency", function () {
                    return dr(r, da).call(r, "getLatency", "latency");
                  }),
                  zt(this, "getUnloadedJitter", function () {
                    return dr(r, da).call(r, "getJitter", "latency");
                  }),
                  zt(this, "getUnloadedLatencyPoints", function () {
                    return dr(r, da).call(r, "getLatencyPoints", "latency", []);
                  }),
                  zt(this, "getDownLoadedLatency", function () {
                    return dr(r, da).call(r, "getLoadedLatency", "download");
                  }),
                  zt(this, "getDownLoadedJitter", function () {
                    return dr(r, da).call(r, "getLoadedJitter", "download");
                  }),
                  zt(this, "getDownLoadedLatencyPoints", function () {
                    return dr(r, da).call(
                      r,
                      "getLoadedLatencyPoints",
                      "download",
                      []
                    );
                  }),
                  zt(this, "getUpLoadedLatency", function () {
                    return dr(r, da).call(r, "getLoadedLatency", "upload");
                  }),
                  zt(this, "getUpLoadedJitter", function () {
                    return dr(r, da).call(r, "getLoadedJitter", "upload");
                  }),
                  zt(this, "getUpLoadedLatencyPoints", function () {
                    return dr(r, da).call(
                      r,
                      "getLoadedLatencyPoints",
                      "upload",
                      []
                    );
                  }),
                  zt(this, "getDownloadBandwidth", function () {
                    return dr(r, da).call(r, "getBandwidth", "download");
                  }),
                  zt(this, "getDownloadBandwidthPoints", function () {
                    return dr(r, da).call(
                      r,
                      "getBandwidthPoints",
                      "download",
                      []
                    );
                  }),
                  zt(this, "getUploadBandwidth", function () {
                    return dr(r, da).call(r, "getBandwidth", "upload");
                  }),
                  zt(this, "getUploadBandwidthPoints", function () {
                    return dr(r, da).call(
                      r,
                      "getBandwidthPoints",
                      "upload",
                      []
                    );
                  }),
                  zt(this, "getPacketLoss", function () {
                    return dr(r, da).call(r, "getPacketLoss", "packetLoss");
                  }),
                  zt(this, "getPacketLossDetails", function () {
                    return dr(r, da).call(
                      r,
                      "getPacketLossDetails",
                      "packetLoss",
                      void 0,
                      !0
                    );
                  }),
                  zt(this, "getScores", function () {
                    return dr(r, ca).getScores(r.getSummary());
                  }),
                  mr(this, sa, { writable: !0, value: void 0 }),
                  mr(this, oa, { writable: !0, value: void 0 }),
                  mr(this, ca, { writable: !0, value: void 0 }),
                  mr(this, da, {
                    writable: !0,
                    value: function (e, t) {
                      var n =
                          arguments.length > 2 && void 0 !== arguments[2]
                            ? arguments[2]
                            : void 0,
                        a =
                          arguments.length > 3 &&
                          void 0 !== arguments[3] &&
                          arguments[3];
                      return r.raw.hasOwnProperty(t) && r.raw[t].started
                        ? a && r.raw[t].error
                          ? { error: r.raw[t].error }
                          : dr(r, oa)[e](r.raw[t].results)
                        : n;
                    },
                  }),
                  mr(this, la, {
                    writable: !0,
                    value: function () {
                      return dr(r, da).call(
                        r,
                        "getReachability",
                        "v4Reachability"
                      );
                    },
                  }),
                  mr(this, ua, {
                    writable: !0,
                    value: function () {
                      return dr(r, da).call(
                        r,
                        "getReachabilityDetails",
                        "v4Reachability"
                      );
                    },
                  }),
                  mr(this, pa, {
                    writable: !0,
                    value: function () {
                      return dr(r, da).call(
                        r,
                        "getReachability",
                        "v6Reachability"
                      );
                    },
                  }),
                  mr(this, ha, {
                    writable: !0,
                    value: function () {
                      return dr(r, da).call(
                        r,
                        "getReachabilityDetails",
                        "v6Reachability"
                      );
                    },
                  }),
                  lr(this, sa, t),
                  this.clear(),
                  lr(this, oa, new ea(dr(this, sa))),
                  lr(this, ca, new ia(dr(this, sa)));
              }
              return (
                qt(e, [
                  {
                    key: "isFinished",
                    get: function () {
                      return Object.values(this.raw).every(function (e) {
                        return e.finished;
                      });
                    },
                  },
                  {
                    key: "clear",
                    value: function () {
                      this.raw = Object.assign.apply(
                        Object,
                        [{}].concat(
                          ir(
                            ir(
                              new Set(
                                dr(this, sa).measurements.map(function (e) {
                                  return e.type;
                                })
                              )
                            ).map(function (e) {
                              return zt({}, e, {
                                started: !1,
                                finished: !1,
                                results: {},
                              });
                            })
                          )
                        )
                      );
                    },
                  },
                  {
                    key: "getSummary",
                    value: function () {
                      var e = {
                        download: this.getDownloadBandwidth,
                        upload: this.getUploadBandwidth,
                        latency: this.getUnloadedLatency,
                        jitter: this.getUnloadedJitter,
                        downLoadedLatency: this.getDownLoadedLatency,
                        downLoadedJitter: this.getDownLoadedJitter,
                        upLoadedLatency: this.getUpLoadedLatency,
                        upLoadedJitter: this.getUpLoadedJitter,
                        packetLoss: this.getPacketLoss,
                        v4Reachability: dr(this, la),
                        v6Reachability: dr(this, pa),
                      };
                      return Object.assign.apply(
                        Object,
                        ir(
                          Object.entries(e).map(function (e) {
                            var t = ar(e, 2),
                              r = t[0],
                              n = (0, t[1])();
                            return void 0 === n ? {} : zt({}, r, n);
                          })
                        )
                      );
                    },
                  },
                ]),
                e
              );
            })(),
            fa = function (e) {
              var t =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : 0;
              return e ? Math.round(e * Math.pow(10, t)) / Math.pow(10, t) : e;
            },
            va = function (e) {
              return e.map(function (e) {
                return fa(e, 2);
              });
            },
            _a = function (e) {
              return e.map(function (e) {
                return { bytes: +e.bytes, bps: fa(e.bps) };
              });
            },
            ga = {
              latencyMs: ["getUnloadedLatencyPoints", va],
              download: ["getDownloadBandwidthPoints", _a],
              upload: ["getUploadBandwidthPoints", _a],
              downLoadedLatencyMs: ["getDownLoadedLatencyPoints", va],
              upLoadedLatencyMs: ["getUpLoadedLatencyPoints", va],
              packetLoss: [
                "getPacketLossDetails",
                function (e) {
                  return e.error
                    ? void 0
                    : {
                        numMessages: e.numMessagesSent,
                        lossRatio: fa(e.packetLoss, 4),
                      };
                },
              ],
            },
            ya = function (e, t) {
              var r = t.apiUrl,
                n = {};
              Object.entries(ga).forEach(function (t) {
                var r = ar(t, 2),
                  a = r[0],
                  i = ar(r[1], 2),
                  s = i[0],
                  o = i[1],
                  c =
                    void 0 === o
                      ? function (e) {
                          return e;
                        }
                      : o,
                  d = e[s]();
                d && (n[a] = c(d));
              });
              var a = e.getScores();
              a &&
                (n.scores = Object.assign.apply(
                  Object,
                  [{}].concat(
                    ir(
                      Object.entries(a).map(function (e) {
                        var t,
                          r = ar(e, 2),
                          n = r[0],
                          a = r[1];
                        return zt({}, n, {
                          points: (t = a).points,
                          classification: t.classificationName,
                        });
                      })
                    )
                  )
                )),
                fetch(r, { method: "POST", body: JSON.stringify(n) });
            },
            ba = ["type"],
            wa = ["numPackets"],
            Sa = ["bytes"],
            ka = 1e6,
            Ra = 1e6,
            Ea = ["latency", "latencyUnderLoad", "download", "upload"],
            Ta = function () {
              return "".concat(Math.round(1e16 * Math.random()));
            },
            Pa = new WeakMap(),
            Ca = new WeakMap(),
            xa = new WeakMap(),
            Oa = new WeakMap(),
            Da = new WeakMap(),
            Ia = new WeakMap(),
            Ma = new WeakMap(),
            La = new WeakMap(),
            Aa = new WeakMap(),
            ja = new WeakMap(),
            Na = new WeakMap(),
            Ba = new WeakSet(),
            Fa = new WeakSet(),
            Ua = new WeakSet(),
            Wa = new WeakSet(),
            Va = new WeakSet(),
            Ha = new WeakSet(),
            Za = new WeakSet(),
            qa = (function () {
              function e() {
                var t =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : {};
                Ht(this, e),
                  fr(this, Za),
                  fr(this, Ha),
                  fr(this, Va),
                  fr(this, Wa),
                  fr(this, Ua),
                  fr(this, Fa),
                  fr(this, Ba),
                  zt(this, "onRunningChange", function () {}),
                  zt(this, "onResultsChange", function () {}),
                  mr(this, Pa, { writable: !0, value: function () {} }),
                  mr(this, Ca, { writable: !0, value: function () {} }),
                  mr(this, xa, { writable: !0, value: void 0 }),
                  mr(this, Oa, { writable: !0, value: void 0 }),
                  mr(this, Da, { writable: !0, value: Ta() }),
                  mr(this, Ia, { writable: !0, value: -1 }),
                  mr(this, Ma, { writable: !0, value: void 0 }),
                  mr(this, La, { writable: !0, value: ka }),
                  mr(this, Aa, { writable: !0, value: Ra }),
                  mr(this, ja, { writable: !0, value: !1 }),
                  mr(this, Na, { writable: !0, value: !1 }),
                  lr(this, xa, Object.assign({}, _r, t, gr)),
                  lr(this, Oa, new ma(dr(this, xa))),
                  dr(this, xa).autoStart && this.play();
              }
              return (
                qt(e, [
                  {
                    key: "results",
                    get: function () {
                      return dr(this, Oa);
                    },
                  },
                  {
                    key: "isRunning",
                    get: function () {
                      return dr(this, ja);
                    },
                  },
                  {
                    key: "isFinished",
                    get: function () {
                      return dr(this, Na);
                    },
                  },
                  {
                    key: "onFinish",
                    set: function (e) {
                      lr(this, Pa, e);
                    },
                  },
                  {
                    key: "onError",
                    set: function (e) {
                      lr(this, Ca, e);
                    },
                  },
                  {
                    key: "pause",
                    value: function () {
                      Ea.includes(pr(this, Ua, Ka).call(this)) &&
                        dr(this, Ma).pause(),
                        pr(this, Ba, za).call(this, !1);
                    },
                  },
                  {
                    key: "play",
                    value: function () {
                      dr(this, ja) ||
                        (pr(this, Ba, za).call(this, !0),
                        pr(this, Za, Ya).call(this));
                    },
                  },
                  {
                    key: "restart",
                    value: function () {
                      pr(this, Va, Ja).call(this), this.play();
                    },
                  },
                ]),
                e
              );
            })();
          function za(e) {
            e !== dr(this, ja) &&
              (lr(this, ja, e), this.onRunningChange(dr(this, ja)));
          }
          function Ga(e) {
            var t = this;
            e !== dr(this, Na) &&
              (lr(this, Na, e),
              e &&
                setTimeout(function () {
                  return dr(t, Pa).call(t, t.results);
                }));
          }
          function Ka() {
            return dr(this, Ia) < 0 ||
              dr(this, Ia) >= dr(this, xa).measurements.length
              ? null
              : dr(this, xa).measurements[dr(this, Ia)].type;
          }
          function $a() {
            return dr(this, Oa).raw[pr(this, Ua, Ka).call(this)] || void 0;
          }
          function Ja() {
            pr(this, Ha, Qa).call(this),
              lr(this, Da, Ta()),
              lr(this, Ia, -1),
              lr(this, Ma, void 0),
              pr(this, Ba, za).call(this, !1),
              pr(this, Fa, Ga).call(this, !1),
              dr(this, Oa).clear();
          }
          function Qa() {
            var e = dr(this, Ma);
            e &&
              ((e.onFinished =
                e.onConnectionError =
                e.onFail =
                e.onMsgReceived =
                e.onCredentialsFailure =
                e.onMeasurementResult =
                  function () {}),
              Ea.includes(pr(this, Ua, Ka).call(this)) && e.pause());
          }
          function Ya() {
            var e,
              t = this;
            if (
              !(
                Ea.includes(pr(this, Ua, Ka).call(this)) &&
                pr(this, Wa, $a).call(this) &&
                pr(this, Wa, $a).call(this).started
              ) ||
              pr(this, Wa, $a).call(this).finished ||
              pr(this, Wa, $a).call(this).finishedCurrentRound ||
              pr(this, Wa, $a).call(this).error
            ) {
              if (
                (lr(this, Ia, ((e = dr(this, Ia)), ++e)),
                dr(this, Ia) >= dr(this, xa).measurements.length)
              )
                return (
                  pr(this, Ba, za).call(this, !1),
                  void pr(this, Fa, Ga).call(this, !0)
                );
              var r,
                n = dr(this, xa).measurements[dr(this, Ia)],
                a = n.type,
                i = Jt(n, ba),
                s = pr(this, Wa, $a).call(this),
                o = dr(this, xa),
                c = o.downloadApiUrl,
                d = o.uploadApiUrl,
                l = o.estimatedServerTime;
              switch (a) {
                case "v4Reachability":
                case "v6Reachability":
                  (r = new Jn("https://".concat(i.host), {
                    fetchOptions: { method: "GET", mode: "no-cors" },
                  })).onFinished = function (e) {
                    (s.finished = !0),
                      (s.results = Vt({ host: i.host }, e)),
                      t.onResultsChange({ type: a }),
                      pr(t, Za, Ya).call(t);
                  };
                  break;
                case "rpki":
                  (r = new Jn("https://".concat(dr(this, xa).rpkiInvalidHost), {
                    timeout: 5e3,
                  })).onFinished = function (e) {
                    (e.response ? e.response.json() : Promise.resolve()).then(
                      function (r) {
                        (s.finished = !0),
                          (s.results = Vt(
                            {
                              host: dr(t, xa).rpkiInvalidHost,
                              filteringInvalids: !e.reachable,
                            },
                            r ? { asn: r.asn, name: r.name } : {}
                          )),
                          t.onResultsChange({ type: a }),
                          pr(t, Za, Ya).call(t);
                      }
                    );
                  };
                  break;
                case "nxdomain":
                  (r = new Jn("https://".concat(i.nxhost), {
                    fetchOptions: { mode: "no-cors" },
                  })).onFinished = function (e) {
                    (s.finished = !0),
                      (s.results = { host: i.nxhost, reachable: e.reachable }),
                      t.onResultsChange({ type: a }),
                      pr(t, Za, Ya).call(t);
                  };
                  break;
                case "packetLoss":
                case "packetLossUnderLoad":
                  s.finished = !1;
                  var u = i.numPackets,
                    p = Jt(i, wa),
                    h = dr(this, xa),
                    m = h.turnServerUri,
                    f = h.turnServerCredsApiUrl,
                    v = h.turnServerUser,
                    _ = h.turnServerPass,
                    g = h.includeCredentials;
                  ((r = new Kn(
                    Vt(
                      {
                        turnServerUri: m,
                        turnServerCredsApi: f,
                        turnServerCredsApiIncludeCredentials: g,
                        turnServerUser: v,
                        turnServerPass: _,
                        numMsgs: u,
                        downloadChunkSize: i.loadDown ? dr(this, La) : void 0,
                        uploadChunkSize: i.loadUp ? dr(this, Aa) : void 0,
                        downloadApiUrl: c,
                        uploadApiUrl: d,
                      },
                      p
                    )
                  )).onMsgReceived = function () {
                    (s.results = Object.assign({}, r.results)),
                      t.onResultsChange({ type: a });
                  }),
                    (r.onFinished = function () {
                      (s.finished = !0),
                        t.onResultsChange({ type: a }),
                        pr(t, Za, Ya).call(t);
                    }),
                    (r.onConnectionError = function (e) {
                      (s.error = e),
                        t.onResultsChange({ type: a }),
                        dr(t, Ca).call(
                          t,
                          "Connection error while measuring packet loss: ".concat(
                            e
                          )
                        ),
                        pr(t, Za, Ya).call(t);
                    }),
                    (r.onCredentialsFailure = function () {
                      (s.error = "unable to get turn server credentials"),
                        t.onResultsChange({ type: a }),
                        dr(t, Ca).call(
                          t,
                          "Error while measuring packet loss: unable to get turn server credentials."
                        ),
                        pr(t, Za, Ya).call(t);
                    });
                  break;
                case "latency":
                case "latencyUnderLoad":
                  (s.finished = !1),
                    ((r = new yn(
                      [
                        {
                          dir: "down",
                          bytes: 0,
                          count: i.numPackets,
                          bypassMinDuration: !0,
                        },
                      ],
                      {
                        downloadApiUrl: c,
                        uploadApiUrl: d,
                        estimatedServerTime: l,
                        logApiUrl: dr(this, xa).logMeasurementApiUrl,
                        measurementId: dr(this, Da),
                        downloadChunkSize: i.loadDown ? dr(this, La) : void 0,
                        uploadChunkSize: i.loadUp ? dr(this, Aa) : void 0,
                      }
                    )).fetchOptions = {
                      credentials: dr(this, xa).includeCredentials
                        ? "include"
                        : void 0,
                    }),
                    (r.onMeasurementResult = r.onNewMeasurementStarted =
                      function (e, r) {
                        (s.results = Object.assign({}, r.down[0])),
                          t.onResultsChange({ type: a });
                      }),
                    (r.onFinished = function () {
                      (s.finished = !0),
                        t.onResultsChange({ type: a }),
                        dr(t, ja) && pr(t, Za, Ya).call(t);
                    }),
                    (r.onConnectionError = function (e) {
                      (s.error = e),
                        t.onResultsChange({ type: a }),
                        dr(t, Ca).call(
                          t,
                          "Connection error while measuring latency: ".concat(e)
                        ),
                        pr(t, Za, Ya).call(t);
                    }),
                    r.play();
                  break;
                case "download":
                case "upload":
                  if (s.finished || s.error) pr(this, Za, Ya).call(this);
                  else {
                    delete s.finishedCurrentRound;
                    var y = dr(this, xa)[
                      "measure".concat(
                        "download" === a ? "Down" : "Up",
                        "loadLoadedLatency"
                      )
                    ];
                    ((r = new yn(
                      [Vt({ dir: "download" === a ? "down" : "up" }, i)],
                      {
                        downloadApiUrl: c,
                        uploadApiUrl: d,
                        estimatedServerTime: l,
                        logApiUrl: dr(this, xa).logMeasurementApiUrl,
                        measurementId: dr(this, Da),
                        measureParallelLatency: y,
                        parallelLatencyThrottleMs: dr(this, xa)
                          .loadedLatencyThrottle,
                      }
                    )).fetchOptions = {
                      credentials: dr(this, xa).includeCredentials
                        ? "include"
                        : void 0,
                    }),
                      (r.finishRequestDuration = dr(
                        this,
                        xa
                      ).bandwidthFinishRequestDuration),
                      (r.onNewMeasurementStarted = function (e) {
                        var r = e.count,
                          n = e.bytes,
                          i = (s.results = Object.assign({}, s.results));
                        !i.hasOwnProperty(n) &&
                          (i[n] = {
                            timings: [],
                            numMeasurements: 0,
                            sideLatency: y ? [] : void 0,
                          }),
                          i[n].numMeasurements - i[n].timings.length !== r &&
                            ((i[n].numMeasurements += r),
                            t.onResultsChange({ type: a }));
                      }),
                      (r.onMeasurementResult = function (e) {
                        var r = e.bytes,
                          n = Jt(e, Sa);
                        s.results[r].timings.push(n),
                          (s.results = Object.assign({}, s.results)),
                          t.onResultsChange({ type: a });
                      }),
                      (r.onParallelLatencyResult = function (e) {
                        s.results[i.bytes].sideLatency.push(e),
                          (s.results = Object.assign({}, s.results)),
                          t.onResultsChange({ type: a });
                      }),
                      (r.onFinished = function (e) {
                        var r = !dr(t, xa)
                            .measurements.slice(dr(t, Ia) + 1)
                            .map(function (e) {
                              return e.type;
                            })
                            .includes(a),
                          n = Math.min.apply(
                            Math,
                            ir(
                              Object.values("download" === a ? e.down : e.up)
                                .slice(-1)[0]
                                .timings.map(function (e) {
                                  return e.duration;
                                })
                            )
                          );
                        if (
                          r ||
                          (!i.bypassMinDuration &&
                            n > dr(t, xa).bandwidthFinishRequestDuration)
                        ) {
                          (s.finished = !0), t.onResultsChange({ type: a });
                          var o =
                            0.5 *
                            Object.keys(s.results)
                              .map(function (e) {
                                return +e;
                              })
                              .sort(function (e, t) {
                                return t - e;
                              })[0];
                          "download" === a && lr(t, La, o),
                            "upload" === a && lr(t, Aa, o);
                        } else s.finishedCurrentRound = !0;
                        dr(t, ja) && pr(t, Za, Ya).call(t);
                      }),
                      (r.onConnectionError = function (e) {
                        (s.error = e),
                          t.onResultsChange({ type: a }),
                          dr(t, Ca).call(
                            t,
                            "Connection error while measuring "
                              .concat(a, ": ")
                              .concat(e)
                          ),
                          pr(t, Za, Ya).call(t);
                      }),
                      r.play();
                  }
              }
              lr(this, Ma, r),
                (s.started = !0),
                this.onResultsChange({ type: a });
            } else dr(this, Ma).play();
          }
          var Xa = new WeakMap(),
            ei = new WeakMap(),
            ti = (function (e) {
              Gt(r, e);
              var t = Xt(r);
              function r(e) {
                var n, a;
                Ht(this, r);
                for (
                  var i = arguments.length,
                    s = new Array(i > 1 ? i - 1 : 0),
                    o = 1;
                  o < i;
                  o++
                )
                  s[o - 1] = arguments[o];
                return (
                  mr(Qt((a = t.call.apply(t, [this, e].concat(s)))), Xa, {
                    writable: !0,
                    value: void 0,
                  }),
                  mr(Qt(a), ei, {
                    writable: !0,
                    value: function (e) {
                      dr(Qt(a), Xa) && ya(e, { apiUrl: dr(Qt(a), Xa) });
                    },
                  }),
                  nr(
                    ((n = Qt(a)), Kt(r.prototype)),
                    "onFinish",
                    dr(Qt(a), ei),
                    n,
                    !0
                  ),
                  lr(Qt(a), Xa, Object.assign({}, _r, e, gr).logAimApiUrl),
                  a
                );
              }
              return (
                qt(r, [
                  {
                    key: "onFinish",
                    set: function (e) {
                      var t = this;
                      nr(
                        Kt(r.prototype),
                        "onFinish",
                        function (r) {
                          e(r), dr(t, ei).call(t, r);
                        },
                        this,
                        !0
                      );
                    },
                  },
                ]),
                r
              );
            })(qa);
          function ri(e, t) {
            var r =
              ("undefined" != typeof Symbol && e[Symbol.iterator]) ||
              e["@@iterator"];
            if (!r) {
              if (
                Array.isArray(e) ||
                (r = (function (e, t) {
                  if (!e) return;
                  if ("string" == typeof e) return ni(e, t);
                  var r = Object.prototype.toString.call(e).slice(8, -1);
                  "Object" === r && e.constructor && (r = e.constructor.name);
                  if ("Map" === r || "Set" === r) return Array.from(e);
                  if (
                    "Arguments" === r ||
                    /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                  )
                    return ni(e, t);
                })(e)) ||
                (t && e && "number" == typeof e.length)
              ) {
                r && (e = r);
                var n = 0,
                  a = function () {};
                return {
                  s: a,
                  n: function () {
                    return n >= e.length
                      ? { done: !0 }
                      : { done: !1, value: e[n++] };
                  },
                  e: function (e) {
                    throw e;
                  },
                  f: a,
                };
              }
              throw new TypeError(
                "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
              );
            }
            var i,
              s = !0,
              o = !1;
            return {
              s: function () {
                r = r.call(e);
              },
              n: function () {
                var e = r.next();
                return (s = e.done), e;
              },
              e: function (e) {
                (o = !0), (i = e);
              },
              f: function () {
                try {
                  s || null == r.return || r.return();
                } finally {
                  if (o) throw i;
                }
              },
            };
          }
          function ni(e, t) {
            (null == t || t > e.length) && (t = e.length);
            for (var r = 0, n = new Array(t); r < t; r++) n[r] = e[r];
            return n;
          }
          var ai = [R],
            ii = !1,
            si = (function () {
              function e() {
                (0, i.Z)(this, e);
              }
              var t, r, o, c, l, p, h, m, f, v;
              return (
                (0, s.Z)(e, null, [
                  {
                    key: "config",
                    value: function (e) {
                      if (!e)
                        throw new Error(
                          "'token' is empty, please provide it in config"
                        );
                      this.apiKey = e;
                      var t = y(ee, void 0, w.apply(void 0, ai));
                      (window.STORE = t), te.default.init({ store: t });
                    },
                  },
                  {
                    key: "getCameras",
                    value:
                      ((v = (0, a.Z)(
                        d().mark(function e() {
                          var t, r, n, a, i;
                          return d().wrap(function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (e.next = 2),
                                    navigator.mediaDevices.enumerateDevices()
                                  );
                                case 2:
                                  (t = e.sent), (r = []), (n = ri(t));
                                  try {
                                    for (n.s(); !(a = n.n()).done; )
                                      "videoinput" == (i = a.value).kind &&
                                        r.push(
                                          new Pt(
                                            i.deviceId,
                                            i.groupId,
                                            i.kind,
                                            i.label
                                          )
                                        );
                                  } catch (e) {
                                    n.e(e);
                                  } finally {
                                    n.f();
                                  }
                                  return e.abrupt("return", r);
                                case 7:
                                case "end":
                                  return e.stop();
                              }
                          }, e);
                        })
                      )),
                      function () {
                        return v.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getMicrophones",
                    value:
                      ((f = (0, a.Z)(
                        d().mark(function e() {
                          var t, r, n, a, i;
                          return d().wrap(function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (e.next = 2),
                                    navigator.mediaDevices.enumerateDevices()
                                  );
                                case 2:
                                  (t = e.sent), (r = []), (n = ri(t));
                                  try {
                                    for (n.s(); !(a = n.n()).done; )
                                      "audioinput" == (i = a.value).kind &&
                                        r.push(
                                          new Ct(
                                            i.deviceId,
                                            i.groupId,
                                            i.kind,
                                            i.label
                                          )
                                        );
                                  } catch (e) {
                                    n.e(e);
                                  } finally {
                                    n.f();
                                  }
                                  return e.abrupt("return", r);
                                case 7:
                                case "end":
                                  return e.stop();
                              }
                          }, e);
                        })
                      )),
                      function () {
                        return f.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getPlaybackDevices",
                    value:
                      ((m = (0, a.Z)(
                        d().mark(function e() {
                          var t, r, n, a, i;
                          return d().wrap(function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (e.next = 2),
                                    navigator.mediaDevices.enumerateDevices()
                                  );
                                case 2:
                                  (t = e.sent), (r = []), (n = ri(t));
                                  try {
                                    for (n.s(); !(a = n.n()).done; )
                                      "audiooutput" == (i = a.value).kind &&
                                        r.push(
                                          new xt(
                                            i.deviceId,
                                            i.groupId,
                                            i.kind,
                                            i.label
                                          )
                                        );
                                  } catch (e) {
                                    n.e(e);
                                  } finally {
                                    n.f();
                                  }
                                  return e.abrupt("return", r);
                                case 7:
                                case "end":
                                  return e.stop();
                              }
                          }, e);
                        })
                      )),
                      function () {
                        return m.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getDevices",
                    value:
                      ((h = (0, a.Z)(
                        d().mark(function e() {
                          var t, r, n, a, i;
                          return d().wrap(function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (e.next = 2),
                                    navigator.mediaDevices.enumerateDevices()
                                  );
                                case 2:
                                  (t = e.sent), (r = []), (n = ri(t));
                                  try {
                                    for (n.s(); !(a = n.n()).done; )
                                      (i = a.value),
                                        r.push(
                                          new Tt(
                                            i.deviceId,
                                            i.groupId,
                                            i.kind,
                                            i.label
                                          )
                                        );
                                  } catch (e) {
                                    n.e(e);
                                  } finally {
                                    n.f();
                                  }
                                  return e.abrupt("return", r);
                                case 7:
                                case "end":
                                  return e.stop();
                              }
                          }, e);
                        })
                      )),
                      function () {
                        return h.apply(this, arguments);
                      }),
                  },
                  {
                    key: "on",
                    value: function (e, t) {
                      if ("device-changed" !== e)
                        throw new Error("Unsupported event type");
                      this.addDeviceChangeEvent(), this.eventEmitter.on(e, t);
                    },
                  },
                  {
                    key: "addDeviceChangeEvent",
                    value: function () {
                      var e = this;
                      ii ||
                        (this.getDevices().then(function (t) {
                          e.devices = t;
                        }),
                        navigator.mediaDevices.addEventListener(
                          "devicechange",
                          (function () {
                            var t = (0, a.Z)(
                              d().mark(function t(r) {
                                var n, a, i, s, o;
                                return d().wrap(function (t) {
                                  for (;;)
                                    switch ((t.prev = t.next)) {
                                      case 0:
                                        return (
                                          (n = e.devices),
                                          (t.next = 3),
                                          e.getDevices()
                                        );
                                      case 3:
                                        (e.devices = t.sent),
                                          (a = new Array()),
                                          (i = ri(e.devices));
                                        try {
                                          for (
                                            o = function () {
                                              var e = s.value;
                                              0 ==
                                              n.filter(function (t) {
                                                return (
                                                  t.deviceId == e.deviceId &&
                                                  t.kind == e.kind
                                                );
                                              }).length
                                                ? a.push(e)
                                                : (n = n.filter(function (t) {
                                                    return !(
                                                      t.deviceId ==
                                                        e.deviceId &&
                                                      t.kind == e.kind
                                                    );
                                                  }));
                                            },
                                              i.s();
                                            !(s = i.n()).done;

                                          )
                                            o();
                                        } catch (e) {
                                          i.e(e);
                                        } finally {
                                          i.f();
                                        }
                                        0 != a.length &&
                                          e.eventEmitter.emit(
                                            "device-changed",
                                            { devices: e.devices }
                                          ),
                                          0 != n.length &&
                                            e.eventEmitter.emit(
                                              "device-changed",
                                              { devices: e.devices }
                                            );
                                      case 9:
                                      case "end":
                                        return t.stop();
                                    }
                                }, t);
                              })
                            );
                            return function (e) {
                              return t.apply(this, arguments);
                            };
                          })()
                        ),
                        (ii = !0));
                    },
                  },
                  {
                    key: "off",
                    value: function (e, t) {
                      if ("device-changed" !== e)
                        throw new Error("Unsupported event type");
                      this.eventEmitter.off(e, t);
                    },
                  },
                  {
                    key: "checkPermissions",
                    value:
                      ((p = (0, a.Z)(
                        d().mark(function e(t) {
                          var r, n, a, i, s;
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (t || (t = Ot.AUDIO_AND_VIDEO),
                                      (r = new Map()),
                                      !t.includes(Ot.AUDIO) &&
                                        !t.includes(Ot.AUDIO_AND_VIDEO))
                                    ) {
                                      e.next = 15;
                                      break;
                                    }
                                    return (
                                      (n = !0),
                                      (e.prev = 4),
                                      (e.next = 7),
                                      navigator.permissions.query({
                                        name: "microphone",
                                      })
                                    );
                                  case 7:
                                    ("prompt" != (a = e.sent).state &&
                                      "denied" != a.state) ||
                                      (n = !1),
                                      (e.next = 14);
                                    break;
                                  case 11:
                                    throw (
                                      ((e.prev = 11),
                                      (e.t0 = e.catch(4)),
                                      Error(
                                        "Browser does not support microphone permission check"
                                      ))
                                    );
                                  case 14:
                                    r.set(Ot.AUDIO, n);
                                  case 15:
                                    if (
                                      !t.includes(Ot.VIDEO) &&
                                      !t.includes(Ot.AUDIO_AND_VIDEO)
                                    ) {
                                      e.next = 28;
                                      break;
                                    }
                                    return (
                                      (i = !0),
                                      (e.prev = 17),
                                      (e.next = 20),
                                      navigator.permissions.query({
                                        name: "camera",
                                      })
                                    );
                                  case 20:
                                    ("prompt" != (s = e.sent).state &&
                                      "denied" != s.state) ||
                                      (i = !1),
                                      (e.next = 27);
                                    break;
                                  case 24:
                                    throw (
                                      ((e.prev = 24),
                                      (e.t1 = e.catch(17)),
                                      Error(
                                        "Browser does not support camera permission check"
                                      ))
                                    );
                                  case 27:
                                    r.set(Ot.VIDEO, i);
                                  case 28:
                                    return e.abrupt("return", r);
                                  case 29:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            null,
                            [
                              [4, 11],
                              [17, 24],
                            ]
                          );
                        })
                      )),
                      function (e) {
                        return p.apply(this, arguments);
                      }),
                  },
                  {
                    key: "requestPermission",
                    value:
                      ((l = (0, a.Z)(
                        d().mark(function e(t) {
                          var r, n, a, i, s, o, c;
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (t || (t = Ot.AUDIO_AND_VIDEO),
                                      (r = new Map()),
                                      !t.includes(Ot.VIDEO) &&
                                        !t.includes(Ot.AUDIO_AND_VIDEO))
                                    ) {
                                      e.next = 27;
                                      break;
                                    }
                                    return (
                                      (a = { audio: !1, video: !0 }),
                                      (i = !0),
                                      (e.prev = 5),
                                      (e.next = 8),
                                      navigator.mediaDevices.getUserMedia(a)
                                    );
                                  case 8:
                                    (n = e.sent), (e.next = 25);
                                    break;
                                  case 11:
                                    if (
                                      ((e.prev = 11),
                                      (e.t0 = e.catch(5)),
                                      !(e.t0 instanceof DOMException))
                                    ) {
                                      e.next = 23;
                                      break;
                                    }
                                    if ("NotAllowedError" !== e.t0.name) {
                                      e.next = 17;
                                      break;
                                    }
                                    e.next = 21;
                                    break;
                                  case 17:
                                    if ("NotFoundError" !== e.t0.name) {
                                      e.next = 21;
                                      break;
                                    }
                                    throw new Error("No Video Device Found");
                                  case 21:
                                    e.next = 24;
                                    break;
                                  case 23:
                                    console.error("Error", e.t0);
                                  case 24:
                                    i = !1;
                                  case 25:
                                    n &&
                                      n.getTracks().forEach(function (e) {
                                        e.stop();
                                      }),
                                      r.set(Ot.VIDEO, i);
                                  case 27:
                                    if (
                                      !t.includes(Ot.AUDIO) &&
                                      !t.includes(Ot.AUDIO_AND_VIDEO)
                                    ) {
                                      e.next = 52;
                                      break;
                                    }
                                    return (
                                      (o = { audio: !0, video: !1 }),
                                      (c = !0),
                                      (e.prev = 30),
                                      (e.next = 33),
                                      navigator.mediaDevices.getUserMedia(o)
                                    );
                                  case 33:
                                    (s = e.sent), (e.next = 50);
                                    break;
                                  case 36:
                                    if (
                                      ((e.prev = 36),
                                      (e.t1 = e.catch(30)),
                                      !(e.t1 instanceof DOMException))
                                    ) {
                                      e.next = 48;
                                      break;
                                    }
                                    if ("NotAllowedError" !== e.t1.name) {
                                      e.next = 42;
                                      break;
                                    }
                                    e.next = 46;
                                    break;
                                  case 42:
                                    if ("NotFoundError" !== e.t1.name) {
                                      e.next = 46;
                                      break;
                                    }
                                    throw new Error("No Audio Device Found");
                                  case 46:
                                    e.next = 49;
                                    break;
                                  case 48:
                                    console.error("Error", e.t1);
                                  case 49:
                                    c = !1;
                                  case 50:
                                    s &&
                                      s.getTracks().forEach(function (e) {
                                        e.stop();
                                      }),
                                      r.set(Ot.AUDIO, c);
                                  case 52:
                                    return e.abrupt("return", r);
                                  case 53:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            null,
                            [
                              [5, 11],
                              [30, 36],
                            ]
                          );
                        })
                      )),
                      function (e) {
                        return l.apply(this, arguments);
                      }),
                  },
                  {
                    key: "isInt",
                    value: function (e) {
                      return "number" == typeof e && e % 1 == 0;
                    },
                  },
                  {
                    key: "getNetworkStats",
                    value:
                      ((c = (0, a.Z)(
                        d().mark(function e() {
                          var t,
                            r,
                            n,
                            a,
                            i = arguments;
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (t =
                                        i.length > 0 && void 0 !== i[0]
                                          ? i[0]
                                          : {}),
                                      ((r = t.timeoutDuration) &&
                                        this.isInt(r)) ||
                                        (r = 6e4),
                                      (n = new Promise(function (e, t) {
                                        setTimeout(function () {
                                          t(
                                            "Not able to get NetworkStats due to timeout"
                                          );
                                        }, r);
                                      })),
                                      (a = new Promise(function (e, t) {
                                        if (navigator.onLine) {
                                          var r = new ti({
                                            measureDownloadLoadedLatency: !1,
                                            measureUploadLoadedLatency: !1,
                                            measurements: [
                                              {
                                                type: "upload",
                                                bytes: 3e6,
                                                count: 1,
                                                bypassMinDuration: !0,
                                              },
                                              {
                                                type: "download",
                                                bytes: 3e6,
                                                count: 1,
                                                bypassMinDuration: !0,
                                              },
                                            ],
                                          });
                                          r.isRunning
                                            ? ((r.onFinish = function (t) {
                                                e({
                                                  downloadSpeed: parseFloat(
                                                    Number(
                                                      t.getDownloadBandwidth() /
                                                        1048576
                                                    ).toFixed(2)
                                                  ),
                                                  uploadSpeed: parseFloat(
                                                    Number(
                                                      t.getUploadBandwidth() /
                                                        1048576
                                                    ).toFixed(2)
                                                  ),
                                                });
                                              }),
                                              (r.onError = function (e) {
                                                t(
                                                  "Not able to get NetworkStats"
                                                );
                                              }))
                                            : t("Not able to get NetworkStats");
                                        } else t("Not able to get NetworkStats due to no Network");
                                      })),
                                      e.abrupt("return", Promise.race([a, n]))
                                    );
                                  case 5:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return c.apply(this, arguments);
                      }),
                  },
                  {
                    key: "analytics",
                    value: function (e) {
                      var t, r, n, a;
                      !e &&
                        navigator &&
                        navigator.userAgent &&
                        ((n = navigator.userAgent),
                        delete (a = u().parse(n)).engine);
                      try {
                        var i;
                        (null !== (i = e) &&
                          void 0 !== i &&
                          i.browserUserAgent) ||
                          ((n = navigator.userAgent),
                          delete (a = u().parse(n)).engine);
                      } catch (e) {}
                      e &&
                        e.rawUserAgent &&
                        ((n = e.rawUserAgent),
                        delete (a = u().parse(n)).engine),
                        e || (e = {});
                      var s = {};
                      (s.sdkType = e.sdkType || "javascript"),
                        (s.sdkVersion = e.sdkVersion || "0.0.81"),
                        (s.platform =
                          e.platform ||
                          (null === (t = a) ||
                          void 0 === t ||
                          null === (r = t.platform) ||
                          void 0 === r
                            ? void 0
                            : r.type) ||
                          ""),
                        "null" == e.browserUserAgent
                          ? (s.browserUserAgent = void 0)
                          : (s.browserUserAgent = a),
                        e.deviceUserAgent &&
                          (s.deviceUserAgent = e.deviceUserAgent),
                        (this._deviceInfo = s);
                    },
                  },
                  {
                    key: "initMeeting",
                    value: function (e) {
                      var t,
                        r = e.meetingId,
                        a = e.customCameraVideoTrack,
                        i = void 0 === a ? void 0 : a,
                        s = e.customMicrophoneAudioTrack,
                        o = void 0 === s ? void 0 : s,
                        c = e.autoConsume,
                        d = void 0 === c || c,
                        l = e.preferredProtocol,
                        u = e.mode,
                        p = e.multiStream,
                        h = void 0 === p || p,
                        m = e.participantId,
                        f = e.name,
                        v = e.micEnabled,
                        _ = e.webcamEnabled,
                        g = e.maxResolution,
                        y = e.metaData,
                        b = e.chatEnabled,
                        w = e.useSpartialLayerAnalytics,
                        S = e.signalingBaseUrl,
                        k = e.defaultCamera;
                      if (!r)
                        throw new Error(
                          "'meetingId' is empty, please verify it or generate new meetingId using the API."
                        );
                      var R = m
                          ? m.toString()
                          : T()({ length: 8 }).toLowerCase(),
                        E = f || T()({ length: 6 }).toLowerCase();
                      switch (
                        (this._deviceInfo || this.analytics(),
                        "string" != typeof l && (l = "UDP_ONLY"),
                        null === (t = l) || void 0 === t
                          ? void 0
                          : t.toUpperCase())
                      ) {
                        case "UDP_ONLY":
                        case "UDP_OVER_TCP":
                          l = l.toUpperCase();
                          break;
                        default:
                          l = "UDP_ONLY";
                      }
                      if (
                        (u || (u = _t.S.CONFERENCE),
                        u !== _t.S.CONFERENCE && u !== _t.S.VIEWER)
                      )
                        throw new Error(
                          '"mode" can only be either '
                            .concat(_t.S.CONFERENCE, " or ")
                            .concat(_t.S.VIEWER)
                        );
                      if (null != y && "object" != (0, n.Z)(y))
                        throw new Error('"metaData" can only be object.');
                      var P = "react-native" === this._deviceInfo.sdkType,
                        C = P
                          ? k
                            ? "front" === k
                              ? 1
                              : 0
                            : i
                            ? "user" ===
                              i.getVideoTracks()[0].getConstraints().facingMode
                              ? 1
                              : 0
                            : P
                            ? 1
                            : 0
                          : 0,
                        x = new te.default({
                          roomId: r,
                          peerId: R,
                          secret: this.apiKey,
                          device: "unknown",
                          displayName: E,
                          mode: u,
                          useSimulcast: h,
                          produce: !0,
                          consume: !0,
                          useSharingSimulcast: !0,
                          datachannel: !1 !== b,
                          micEnabled: !1 !== v,
                          webcamEnabled: !1 !== _,
                          maxResolution: g || "hd",
                          useSpartialLayerAnalytics: w,
                          _deviceInfo: this._deviceInfo,
                          customCameraVideoTrack: i,
                          customMicrophoneAudioTrack: o,
                          autoConsume: d,
                          preferredProtocol: l,
                          signalingBaseUrl: S,
                          metaData: y,
                          defaultCameraIndex: C,
                        });
                      de.roomClient = x;
                      var O = new _e({
                        id: R,
                        displayName: E,
                        local: !0,
                        mode: u,
                        metaData: y,
                      });
                      return new pt(r, O, x);
                    },
                  },
                  {
                    key: "createCameraVideoTrack",
                    value:
                      ((o = (0, a.Z)(
                        d().mark(function e(t) {
                          var r, n, a, i, s, o, c, l, u, p, h, m, f;
                          return d().wrap(function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (r = t.cameraId),
                                    (n = void 0 === r ? void 0 : r),
                                    (a = t.encoderConfig),
                                    (i = void 0 === a ? void 0 : a),
                                    (s = t.facingMode),
                                    (o = void 0 === s ? void 0 : s),
                                    (c = t.optimizationMode),
                                    (l = void 0 === c ? void 0 : c),
                                    (u = t.multiStream),
                                    (p = void 0 === u || u),
                                    (h = i
                                      ? gt.v.videoProfiles[i]
                                      : gt.v.videoProfiles.h360p_w640p),
                                    (m = {
                                      video: {
                                        deviceId: n || void 0,
                                        facingMode: o || void 0,
                                        width: h.width,
                                        height: h.height,
                                        frameRate: h.frameRate,
                                      },
                                    }),
                                    (e.next = 5),
                                    yt(m)
                                  );
                                case 5:
                                  return (
                                    (f = e.sent),
                                    l && (f.contentHint = l),
                                    (f.encoderConfig = i || "h360p_w640p"),
                                    (f.contentHint = l || ""),
                                    (f.multiStream = p),
                                    (f.cameraId = n),
                                    e.abrupt("return", f)
                                  );
                                case 12:
                                case "end":
                                  return e.stop();
                              }
                          }, e);
                        })
                      )),
                      function (e) {
                        return o.apply(this, arguments);
                      }),
                  },
                  {
                    key: "createScreenShareVideoTrack",
                    value:
                      ((r = (0, a.Z)(
                        d().mark(function e(t) {
                          var r, n, a, i, s, o, c, l, u;
                          return d().wrap(function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (r = t.encoderConfig),
                                    (n = void 0 === r ? void 0 : r),
                                    (a = t.optimizationMode),
                                    (i = void 0 === a ? void 0 : a),
                                    (s = t.withAudio),
                                    (o = void 0 === s ? "enable" : s),
                                    (c = n
                                      ? gt.v.screenShareProfiles[n]
                                      : gt.v.screenShareProfiles.h720p_15fps),
                                    (l = {
                                      audio: "enable" === o,
                                      video: {
                                        width: c.width,
                                        height: c.height,
                                        frameRate: c.frameRate,
                                      },
                                    }),
                                    (e.next = 5),
                                    bt(l)
                                  );
                                case 5:
                                  return (
                                    (u = e.sent),
                                    i && (u.contentHint = i),
                                    e.abrupt("return", u)
                                  );
                                case 8:
                                case "end":
                                  return e.stop();
                              }
                          }, e);
                        })
                      )),
                      function (e) {
                        return r.apply(this, arguments);
                      }),
                  },
                  {
                    key: "createMicrophoneAudioTrack",
                    value:
                      ((t = (0, a.Z)(
                        d().mark(function e(t) {
                          var r, n, a, i, s, o, c, l, u;
                          return d().wrap(function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (r = t.noiseConfig),
                                    (n = void 0 === r ? void 0 : r),
                                    (a = t.encoderConfig),
                                    (i = void 0 === a ? void 0 : a),
                                    (s = t.microphoneId),
                                    (o = void 0 === s ? void 0 : s),
                                    (c = i
                                      ? gt.v.audioProfiles[i]
                                      : gt.v.audioProfiles.speech_standard),
                                    (l = {
                                      audio: {
                                        deviceId: o,
                                        sampleRate: c.sampleRate,
                                        echoCancellation: n
                                          ? n && n.acousticEchoCancellation
                                          : c.echoCancellation,
                                        autoGainControl: n
                                          ? n && n.autoGainControl
                                          : c.autoGainControl,
                                        noiseSuppression: n
                                          ? n && n.noiseSuppression
                                          : c.noiseSuppression,
                                        channelCount: c.channelCount,
                                      },
                                    }),
                                    (e.next = 5),
                                    yt(l)
                                  );
                                case 5:
                                  return (
                                    ((u = e.sent).encoderConfig =
                                      i || "speech_standard"),
                                    (u.microphoneId = o),
                                    e.abrupt("return", u)
                                  );
                                case 9:
                                case "end":
                                  return e.stop();
                              }
                          }, e);
                        })
                      )),
                      function (e) {
                        return t.apply(this, arguments);
                      }),
                  },
                ]),
                e
              );
            })();
          (0, o.Z)(si, "devices", []),
            (0, o.Z)(si, "eventEmitter", new ie()),
            (0, o.Z)(si, "Constants", {
              errors: ft.R,
              recordingEvents: {
                RECORDING_STARTING: "RECORDING_STARTING",
                RECORDING_STARTED: "RECORDING_STARTED",
                RECORDING_STOPPING: "RECORDING_STOPPING",
                RECORDING_STOPPED: "RECORDING_STOPPED",
              },
              livestreamEvents: {
                LIVESTREAM_STARTING: "LIVESTREAM_STARTING",
                LIVESTREAM_STARTED: "LIVESTREAM_STARTED",
                LIVESTREAM_STOPPING: "LIVESTREAM_STOPPING",
                LIVESTREAM_STOPPED: "LIVESTREAM_STOPPED",
              },
              hlsEvents: vt.o,
              modes: _t.S,
              permission: Ot,
            });
          var oi = si;
        },
        3003: (e, t, r) => {
          "use strict";
          r.r(t), r.d(t, { default: () => Qe });
          var n = r(1002),
            a = r(5861),
            i = r(5671),
            s = r(3144),
            o = r(4942),
            c = r(7757),
            d = r.n(c),
            l = r(9293),
            u = r(960),
            p = r(1227),
            h = r.n(p),
            m = "mediasoup-demo",
            f = (function () {
              function e(t) {
                (0, i.Z)(this, e),
                  t
                    ? ((this._debug = h()("".concat(m, ":").concat(t))),
                      (this._warn = h()("".concat(m, ":WARN:").concat(t))),
                      (this._error = h()("".concat(m, ":ERROR:").concat(t))))
                    : ((this._debug = h()(m)),
                      (this._warn = h()("".concat(m, ":WARN"))),
                      (this._error = h()("".concat(m, ":ERROR")))),
                  h().disable(),
                  (this._debug.log = console.info.bind(console)),
                  (this._warn.log = console.warn.bind(console)),
                  (this._error.log = console.error.bind(console));
              }
              return (
                (0, s.Z)(e, [
                  {
                    key: "debug",
                    get: function () {
                      return this._debug;
                    },
                  },
                  {
                    key: "warn",
                    get: function () {
                      return this._warn;
                    },
                  },
                  {
                    key: "error",
                    get: function () {
                      return this._error;
                    },
                  },
                ]),
                e
              );
            })(),
            v = r(1354),
            _ = v.enc.Latin1.parse(
              "6gf9Oz5Y(6fOWPP@3XPv0Mwp51yfJ0HiZW^0*!9NdUuZ*VdKmRC@f))&^!Iriw)q"
            ),
            g = v.enc.Latin1.parse("BHrabik^$W^y*HL@A*$4YKj(");
          function y(e) {
            return b.apply(this, arguments);
          }
          function b() {
            return (b = (0, a.Z)(
              d().mark(function e(t) {
                var r, n, a, i, s, o, c, l, u, p, h, m, f;
                return d().wrap(function (e) {
                  for (;;)
                    switch ((e.prev = e.next)) {
                      case 0:
                        return (
                          (r = t.roomId),
                          (n = t.secret),
                          (a = t.signalingBaseUrl),
                          (i = "call-api.videosdk.live"),
                          (s = []),
                          (o = null),
                          (c = {}),
                          (l = {}),
                          (u = {}),
                          (p = null),
                          (e.next = 10),
                          fetch(
                            "https://".concat(
                              a,
                              "/infra/v1/meetings/init-config"
                            ),
                            {
                              method: "POST",
                              headers: {
                                Authorization: n,
                                "Content-Type": "application/json",
                              },
                              body: JSON.stringify({ roomId: r }),
                            }
                          )
                            .then(function (e) {
                              return e.json();
                            })
                            .catch(function (e) {
                              return {};
                            })
                        );
                      case 10:
                        return (
                          (h = e.sent),
                          (m = h.data) &&
                            ((i = m.baseUrl),
                            (f = m.observability),
                            (s = w(m.iceServers)),
                            (o = f.jwt),
                            (c = f.traces),
                            (l = f.logs),
                            (u = f.metaData),
                            (p = m.signalingUrl)),
                          e.abrupt("return", {
                            baseUrl: i,
                            iceServers: s,
                            observabilityJwt: o,
                            traces: c,
                            logs: l,
                            metaData: u,
                            signalingUrl: p,
                          })
                        );
                      case 14:
                      case "end":
                        return e.stop();
                    }
                }, e);
              })
            )).apply(this, arguments);
          }
          function w(e) {
            try {
              var t = v.AES.decrypt(e, _, {
                iv: g,
                mode: v.mode.CBC,
                padding: v.pad.ZeroPadding,
              }).toString(v.enc.Utf8);
              return JSON.parse(t);
            } catch (e) {
              return [];
            }
          }
          var S = r(6808),
            k = r.n(S),
            R = "mediasoup-demo.user",
            E = "mediasoup-demo.devices";
          function T(e) {
            var t = e.displayName;
            k().set(R, { displayName: t });
          }
          function P() {
            return k().getJSON(E);
          }
          var C = r(3196),
            x = r.n(C),
            O = function (e) {
              return { type: "SET_ROOM_STATE", payload: { state: e } };
            },
            D = function (e) {
              return {
                type: "SET_ROOM_ACTIVE_SPEAKER",
                payload: { peerId: e },
              };
            },
            I = function (e) {
              return { type: "SET_ROOM_STATS_PEER_ID", payload: { peerId: e } };
            },
            M = function (e) {
              return {
                type: "SET_MEDIA_CAPABILITIES",
                payload: {
                  canSendMic: e.canSendMic,
                  canSendWebcam: e.canSendWebcam,
                },
              };
            },
            L = function (e) {
              return { type: "SET_CAN_CHANGE_WEBCAM", payload: e };
            },
            A = function (e) {
              return { type: "SET_DISPLAY_NAME", payload: { displayName: e } };
            },
            j = function (e) {
              return { type: "SET_AUDIO_ONLY_STATE", payload: { enabled: e } };
            },
            N = function (e) {
              return {
                type: "SET_AUDIO_ONLY_IN_PROGRESS",
                payload: { flag: e },
              };
            },
            B = function (e) {
              return { type: "SET_AUDIO_MUTED_STATE", payload: { enabled: e } };
            },
            F = function (e) {
              return {
                type: "SET_RESTART_ICE_IN_PROGRESS",
                payload: { flag: e },
              };
            },
            U = function (e) {
              return { type: "ADD_PRODUCER", payload: { producer: e } };
            },
            W = function (e) {
              return { type: "REMOVE_PRODUCER", payload: { producerId: e } };
            },
            V = function (e, t) {
              return {
                type: "SET_PRODUCER_TRACK",
                payload: { producerId: e, track: t },
              };
            },
            H = function (e, t) {
              return {
                type: "SET_PRODUCER_SCORE",
                payload: { producerId: e, score: t },
              };
            },
            Z = function (e) {
              return {
                type: "ADD_DATA_PRODUCER",
                payload: { dataProducer: e },
              };
            },
            q = function (e) {
              return { type: "SET_WEBCAM_IN_PROGRESS", payload: { flag: e } };
            },
            z = function (e) {
              return { type: "SET_SHARE_IN_PROGRESS", payload: { flag: e } };
            },
            G = function (e) {
              return { type: "ADD_PEER", payload: { peer: e } };
            },
            K = function (e) {
              return { type: "REMOVE_PEER", payload: { peerId: e } };
            },
            $ = function (e, t) {
              return {
                type: "SET_PEER_DISPLAY_NAME",
                payload: { displayName: e, peerId: t },
              };
            },
            J = function (e, t) {
              return {
                type: "ADD_CONSUMER",
                payload: { consumer: e, peerId: t },
              };
            },
            Q = function (e, t) {
              return {
                type: "REMOVE_CONSUMER",
                payload: { consumerId: e, peerId: t },
              };
            },
            Y = function (e, t) {
              return {
                type: "SET_CONSUMER_PAUSED",
                payload: { consumerId: e, originator: t },
              };
            },
            X = function (e, t) {
              return {
                type: "SET_CONSUMER_RESUMED",
                payload: { consumerId: e, originator: t },
              };
            },
            ee = function (e, t, r) {
              return {
                type: "SET_CONSUMER_CURRENT_LAYERS",
                payload: { consumerId: e, spatialLayer: t, temporalLayer: r },
              };
            },
            te = function (e, t, r) {
              return {
                type: "SET_CONSUMER_PREFERRED_LAYERS",
                payload: { consumerId: e, spatialLayer: t, temporalLayer: r },
              };
            },
            re = function (e, t) {
              return {
                type: "SET_CONSUMER_PRIORITY",
                payload: { consumerId: e, priority: t },
              };
            },
            ne = function (e, t) {
              return {
                type: "SET_CONSUMER_SCORE",
                payload: { consumerId: e, score: t },
              };
            },
            ae = function (e, t) {
              return {
                type: "ADD_DATA_CONSUMER",
                payload: { dataConsumer: e, peerId: t },
              };
            },
            ie = function (e, t) {
              return {
                type: "REMOVE_DATA_CONSUMER",
                payload: { dataConsumerId: e, peerId: t },
              };
            },
            se = function (e) {
              var t = e.type,
                r = void 0 === t ? "info" : t,
                n = e.text,
                a = e.title,
                i = e.timeout;
              if (!i)
                switch (r) {
                  case "info":
                    i = 3e3;
                    break;
                  case "error":
                    i = 5e3;
                }
              var s = {
                id: x()({ length: 6 }).toLowerCase(),
                type: r,
                title: a,
                text: n,
                timeout: i,
              };
              return function (e) {
                e(
                  (function (e) {
                    return {
                      type: "ADD_NOTIFICATION",
                      payload: { notification: e },
                    };
                  })(s)
                ),
                  setTimeout(function () {
                    e({
                      type: "REMOVE_NOTIFICATION",
                      payload: { notificationId: s.id },
                    });
                  }, i);
              };
            },
            oe = r(7187),
            ce = r(885),
            de = r(8962),
            le = {},
            ue = {},
            pe = {};
          for (var he in de.v.videoProfiles)
            "oneSixNine" == de.v.videoProfiles[he].aspectRatio &&
              ((le[he] = de.v.videoProfiles[he]),
              (le[he].encoding = {
                maxBitrate: le[he].bitRate,
                maxFramerate: le[he].frameRate,
              })),
              "fourThree" == de.v.videoProfiles[he].aspectRatio &&
                ((ue[he] = de.v.videoProfiles[he]),
                (ue[he].encoding = {
                  maxBitrate: ue[he].bitRate,
                  maxFramerate: ue[he].frameRate,
                }));
          for (var he in de.v.screenShareProfiles)
            (pe[he] = de.v.screenShareProfiles[he]),
              (pe[he].encoding = {
                maxBitrate: pe[he].bitRate,
                maxFramerate: pe[he].frameRate,
              });
          var me = Object.values(le),
            fe = Object.values(ue),
            ve = Object.values(pe),
            _e = [le.h180p_w320p, le.h360p_w640p],
            ge = [ue.h180p_w240p, ue.h360p_w480p],
            ye = ["q", "h", "f"];
          function be(e, t, r, n) {
            var a = n && n.videoEncoding;
            e && (a = n && n.screenShareEncoding);
            var i = null == n ? void 0 : n.simulcast;
            if (
              (a ||
                (a = (function (e, t, r) {
                  for (
                    var n = (function (e, t, r) {
                        if (e) return ve;
                        var n = t > r ? t / r : r / t;
                        if (Math.abs(n - 16 / 9) < Math.abs(n - 4 / 3))
                          return me;
                        return fe;
                      })(e, t, r),
                      a = n[0].encoding,
                      i = Math.max(t, r),
                      s = 0;
                    s < n.length;
                    s += 1
                  ) {
                    var o = n[s];
                    if (((a = o.encoding), o.width >= i)) break;
                  }
                  return a;
                })(e, t, r)),
              !i)
            )
              return [a];
            var s,
              o = {
                width: t,
                height: r,
                encoding: {
                  maxBitrate: a.maxBitrate,
                  maxFramerate: a.maxFramerate,
                },
              },
              c = [],
              d = (c = we(e, o))[0];
            if (c.length > 1) {
              var l = c;
              s = (0, ce.Z)(l, 2)[1];
            }
            var u = Math.max(t, r);
            return Se(
              t,
              r,
              u >= 960 && s ? [d, s, o] : u >= 480 ? [d, o] : [o]
            );
          }
          function we(e, t) {
            if (e)
              (r = t),
                [{ scaleResolutionDownBy: 2, fps: 3 }].map(function (e) {
                  var t;
                  return {
                    width: Math.floor(r.width / e.scaleResolutionDownBy),
                    height: Math.floor(r.height / e.scaleResolutionDownBy),
                    encodings: {
                      maxBitrate: Math.max(
                        15e4,
                        Math.floor(
                          r.encoding.maxBitrate /
                            (Math.pow(e.scaleResolutionDownBy, 2) *
                              ((null !== (t = r.encoding.maxFramerate) &&
                              void 0 !== t
                                ? t
                                : 30) /
                                e.fps))
                        )
                      ),
                      maxFramerate: e.fps,
                    },
                  };
                });
            var r,
              n = t.width,
              a = t.height,
              i = n > a ? n / a : a / n;
            return Math.abs(i - 16 / 9) < Math.abs(i - 4 / 3) ? _e : ge;
          }
          function Se(e, t, r) {
            var n = [];
            return (
              r.forEach(function (r, a) {
                if (!(a >= ye.length)) {
                  var i = Math.min(e, t),
                    s = {
                      rid: ye[a],
                      scaleResolutionDownBy: i / Math.min(r.width, r.height),
                      maxBitrate: r.encoding.maxBitrate,
                      maxFramerate: r.encoding.maxFramerate,
                    };
                  n.push(s);
                }
              }),
              n
            );
          }
          function ke(e, t, r) {
            if (!e) return {};
            var n = e.id,
              a =
                (e.preferredSpatialLayer, e.preferredTemporalLayer, e.appData),
              i = a.width,
              s = a.height,
              o = a.encodings;
            try {
              var c = (function (e) {
                var t = [];
                if (e && 0 != e.length) {
                  if (1 === e.length) {
                    for (var r = 0; r < 3; r++) t.push(Math.pow(2, 3 - r - 1));
                    return t;
                  }
                  var n = !1;
                  return (
                    e.forEach(function (e) {
                      void 0 !== e.scaleResolutionDownBy
                        ? ((n = !0),
                          t.push(Math.max(1, e.scaleResolutionDownBy)))
                        : t.push(1);
                    }),
                    n ||
                      e.forEach(function (r, n) {
                        t[n] = Math.pow(2, e.length - n - 1);
                      }),
                    t
                  );
                }
              })(o);
              if (!c) return {};
              for (
                var d = Math.min(
                    Math.max(de.v.adaptiveScalingFactor || 0.75, 0.5),
                    1
                  ),
                  l = 0,
                  u = 0;
                u < c.length;
                u++
              ) {
                var p = (d * i) / c[u],
                  h = (d * s) / c[u];
                if (!(t >= p && r >= h)) break;
                l = u;
              }
              var m = (e.temporalLayers ? e.temporalLayers : 3) - 1;
              if (0 === l && m > 0) {
                var f = i / c[0],
                  v = s / c[0];
                t < 0.5 * f && r < 0.5 * v && (m -= 1),
                  m > 0 && t < 0.25 * f && r < 0.25 * v && (m -= 1);
              }
              return {
                consumerId: n,
                newPreferredSpatialLayer: l,
                newPreferredTemporalLayer: m,
              };
            } catch (e) {
              return {};
            }
          }
          var Re = r(6900),
            Ee = r(8225),
            Te = r(4180),
            Pe = r(3430),
            Ce = r(6380),
            xe = r(2982),
            Oe = Array(32);
          function De() {
            for (var e = 0; e < 16; e++)
              (Oe[e] = Math.floor(16 * Math.random()) + 48),
                Oe[e] >= 58 && (Oe[e] += 39);
            return String.fromCharCode.apply(null, Oe.slice(0, 16));
          }
          function Ie() {
            var e = (1e6 * new Date().getTime()).toString().padEnd(19, "0");
            return Number(e);
          }
          function Me(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t &&
                (n = n.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, n);
            }
            return r;
          }
          function Le(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2
                ? Me(Object(r), !0).forEach(function (t) {
                    (0, o.Z)(e, t, r[t]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    e,
                    Object.getOwnPropertyDescriptors(r)
                  )
                : Me(Object(r)).forEach(function (t) {
                    Object.defineProperty(
                      e,
                      t,
                      Object.getOwnPropertyDescriptor(r, t)
                    );
                  });
            }
            return e;
          }
          var Ae = (function () {
            function e(t) {
              var r = this,
                n = t.roomId,
                a = t.peerId,
                s = t.sdkName,
                o = t.observabilityJwt,
                c = t.metaData,
                d = t.traces;
              (0, i.Z)(this, e),
                (this._traceId = (function () {
                  for (var e = 0; e < 32; e++)
                    (Oe[e] = Math.floor(16 * Math.random()) + 48),
                      Oe[e] >= 58 && (Oe[e] += 39);
                  return String.fromCharCode.apply(null, Oe.slice(0, 32));
                })()),
                (this._rootSpanId = De()),
                (this._observabilityJwt = o),
                (this._tracesEnabled = d.enabled);
              var l = (function (e) {
                for (
                  var t = "0123456789abcdefghijklmnopqrstuvwxyz", r = "", n = e;
                  n > 0;
                  n--
                )
                  r += t[Math.floor(Math.random() * t.length)];
                return r;
              })(8);
              (this._spans = []),
                (this._traceJSON = {
                  resourceSpans: [
                    {
                      resource: {
                        attributes: [
                          {
                            key: "service.name",
                            value: { stringValue: "videosdk-otel" },
                          },
                          {
                            key: "telemetry.sdk.language",
                            value: { stringValue: "webjs" },
                          },
                          {
                            key: "telemetry.sdk.name",
                            value: { stringValue: "opentelemetry" },
                          },
                          {
                            key: "telemetry.sdk.version",
                            value: { stringValue: "1.14.0" },
                          },
                          {
                            key: "sdk-version",
                            value: { stringValue: "0.0.1" },
                          },
                        ],
                        droppedAttributesCount: 0,
                      },
                      scopeSpans: [{ scope: { name: l }, spans: [] }],
                    },
                  ],
                }),
                this._tracesEnabled &&
                  (this.addRootSpan(n, a, s, c),
                  setInterval(function () {
                    r.processQueue();
                  }, 4e3));
            }
            return (
              (0, s.Z)(e, [
                {
                  key: "addRootSpan",
                  value: function (e, t, r, n) {
                    if (this._tracesEnabled) {
                      var a = {
                        traceId: this._traceId,
                        spanId: this._rootSpanId,
                        name: "room_"
                          .concat(e, "_peer_")
                          .concat(t, "_sdk_")
                          .concat(r),
                        kind: 1,
                        startTimeUnixNano: Ie(),
                        endTimeUnixNano: Ie(),
                        attributes: [
                          { key: "roomId", value: { stringValue: e } },
                          { key: "peerId", value: { stringValue: t } },
                          { key: "sdkName", value: { stringValue: r } },
                          { key: "userId", value: { stringValue: n.userId } },
                          { key: "email", value: { stringValue: n.email } },
                        ],
                        droppedAttributesCount: 0,
                        events: [],
                        droppedEventsCount: 0,
                        status: { code: 0 },
                        links: [],
                        droppedLinksCount: 0,
                      };
                      this._spans.push(a);
                    }
                  },
                },
                {
                  key: "addSpanToTrace",
                  value: function (e) {
                    this._spans.push(e);
                  },
                },
                {
                  key: "trace",
                  value: function (e) {
                    var t = e.spanName,
                      r = e.attributes,
                      n = void 0 === r ? {} : r,
                      a = e.span,
                      i = void 0 === a ? void 0 : a;
                    if (this._tracesEnabled) {
                      var s = De(),
                        o = Ie(),
                        c = {
                          traceId: this._traceId,
                          spanId: s,
                          parentSpanId: i || this._rootSpanId,
                          name: t,
                          kind: 1,
                          startTimeUnixNano: o,
                          droppedAttributesCount: 0,
                          events: [],
                          droppedEventsCount: 0,
                          links: [],
                          droppedLinksCount: 0,
                        };
                      return (
                        Object.keys(n).length > 0 &&
                          (c.attributes = Object.entries(n).map(function (e) {
                            var t = (0, ce.Z)(e, 2);
                            return { key: t[0], value: { stringValue: t[1] } };
                          })),
                        this.addSpanToTrace(c),
                        s
                      );
                    }
                  },
                },
                {
                  key: "traceAutoComplete",
                  value: function (e) {
                    var t = e.spanName,
                      r = e.attributes,
                      n = void 0 === r ? {} : r,
                      a = e.status,
                      i = void 0 === a ? 1 : a,
                      s = e.span,
                      o = void 0 === s ? void 0 : s,
                      c = e.message,
                      d = void 0 === c ? "SUCCESS" : c;
                    if (this._tracesEnabled) {
                      var l = De(),
                        u = Ie(),
                        p = Ie(),
                        h = {
                          traceId: this._traceId,
                          spanId: l,
                          parentSpanId: o || this._rootSpanId,
                          name: t,
                          kind: 1,
                          startTimeUnixNano: u,
                          endTimeUnixNano: p,
                          droppedAttributesCount: 0,
                          events: [],
                          droppedEventsCount: 0,
                          links: [],
                          droppedLinksCount: 0,
                          status: { code: i, message: d },
                        };
                      Object.keys(n).length > 0 &&
                        (h.attributes = Object.entries(n).map(function (e) {
                          var t = (0, ce.Z)(e, 2);
                          return { key: t[0], value: { stringValue: t[1] } };
                        })),
                        this.addSpanToTrace(h);
                    }
                  },
                },
                {
                  key: "completeSpan",
                  value: function (e) {
                    var t = e.span,
                      r = e.status,
                      n = e.message,
                      a = e.attributes,
                      i = void 0 === a ? {} : a;
                    if (this._tracesEnabled) {
                      var s = Ie();
                      this._spans = this._spans.map(function (e) {
                        if (e.spanId !== t) return e;
                        var a = Object.entries(i).map(function (e) {
                          var t = (0, ce.Z)(e, 2);
                          return { key: t[0], value: { stringValue: t[1] } };
                        });
                        return (
                          (e.attributes = e.attributes
                            ? [].concat((0, xe.Z)(e.attributes), (0, xe.Z)(a))
                            : a),
                          Le(
                            Le({}, e),
                            {},
                            {
                              status: { code: r, message: n },
                              endTimeUnixNano: s,
                            }
                          )
                        );
                      });
                    }
                  },
                },
                {
                  key: "processQueue",
                  value: function () {
                    var e = this;
                    if (this._spans.length > 0) {
                      (this._traceJSON.resourceSpans[0].scopeSpans[0].spans =
                        this._spans),
                        (this._spans = []);
                      var t = {
                        method: "POST",
                        headers: {
                          Authorization: this._observabilityJwt,
                          "Content-Type": "application/json",
                        },
                        body: JSON.stringify(this._traceJSON),
                      };
                      fetch("https://api.videosdk.live/otel/v1/traces", t)
                        .then(
                          (function () {
                            var t = (0, a.Z)(
                              d().mark(function t(r) {
                                return d().wrap(function (t) {
                                  for (;;)
                                    switch ((t.prev = t.next)) {
                                      case 0:
                                        return (
                                          (e._traceJSON.resourceSpans[0].scopeSpans[0].spans =
                                            []),
                                          (t.next = 3),
                                          r.text()
                                        );
                                      case 3:
                                        return t.abrupt("return", t.sent);
                                      case 4:
                                      case "end":
                                        return t.stop();
                                    }
                                }, t);
                              })
                            );
                            return function (e) {
                              return t.apply(this, arguments);
                            };
                          })()
                        )
                        .then(function (e) {})
                        .catch(function (t) {
                          (e._spans =
                            e._traceJSON.resourceSpans[0].scopeSpans[0].spans),
                            console.error(
                              "There was a problem with the POST request:",
                              t
                            );
                        });
                    }
                  },
                },
              ]),
              e
            );
          })();
          function je(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t &&
                (n = n.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, n);
            }
            return r;
          }
          function Ne(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2
                ? je(Object(r), !0).forEach(function (t) {
                    (0, o.Z)(e, t, r[t]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    e,
                    Object.getOwnPropertyDescriptors(r)
                  )
                : je(Object(r)).forEach(function (t) {
                    Object.defineProperty(
                      e,
                      t,
                      Object.getOwnPropertyDescriptor(r, t)
                    );
                  });
            }
            return e;
          }
          var Be = (function () {
            function e(t) {
              var r = t.roomId,
                n = t.peerId,
                a = t.sdkName,
                s = t.logs,
                o = t.observabilityJwt;
              (0, i.Z)(this, e),
                (this._peerId = n),
                (this._roomId = r),
                (this._logs = s),
                (this._observabilityJwt = o),
                (this._sdkName = a);
            }
            var t;
            return (
              (0, s.Z)(e, [
                {
                  key: "pushLogs",
                  value:
                    ((t = (0, a.Z)(
                      d().mark(function e(t) {
                        var r, n, a, i, s, o;
                        return d().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (
                                    ((r = t.logType),
                                    (n = t.logText),
                                    (a = t.attributes),
                                    (i = this._logs),
                                    (s = i.enabled),
                                    (o = i.endPoint),
                                    !s)
                                  ) {
                                    e.next = 8;
                                    break;
                                  }
                                  return (
                                    (e.next = 5),
                                    fetch(o, {
                                      method: "POST",
                                      headers: {
                                        Authorization: this._observabilityJwt,
                                        "Content-Type": "application/json",
                                      },
                                      body: JSON.stringify({
                                        logType: r,
                                        logText: n,
                                        attributes: Ne(
                                          Ne({}, a),
                                          {},
                                          {
                                            roomId: this._roomId,
                                            peerId: this._peerId,
                                            SDK: this._sdkName,
                                          }
                                        ),
                                      }),
                                    })
                                      .then(function (e) {
                                        return e.json();
                                      })
                                      .catch(function (e) {
                                        return console.log("error", e), {};
                                      })
                                  );
                                case 5:
                                  return e.abrupt("return", e.sent);
                                case 8:
                                  return e.abrupt("return", null);
                                case 9:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function (e) {
                      return t.apply(this, arguments);
                    }),
                },
              ]),
              e
            );
          })();
          function Fe(e, t) {
            var r =
              ("undefined" != typeof Symbol && e[Symbol.iterator]) ||
              e["@@iterator"];
            if (!r) {
              if (
                Array.isArray(e) ||
                (r = (function (e, t) {
                  if (!e) return;
                  if ("string" == typeof e) return Ue(e, t);
                  var r = Object.prototype.toString.call(e).slice(8, -1);
                  "Object" === r && e.constructor && (r = e.constructor.name);
                  if ("Map" === r || "Set" === r) return Array.from(e);
                  if (
                    "Arguments" === r ||
                    /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                  )
                    return Ue(e, t);
                })(e)) ||
                (t && e && "number" == typeof e.length)
              ) {
                r && (e = r);
                var n = 0,
                  a = function () {};
                return {
                  s: a,
                  n: function () {
                    return n >= e.length
                      ? { done: !0 }
                      : { done: !1, value: e[n++] };
                  },
                  e: function (e) {
                    throw e;
                  },
                  f: a,
                };
              }
              throw new TypeError(
                "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
              );
            }
            var i,
              s = !0,
              o = !1;
            return {
              s: function () {
                r = r.call(e);
              },
              n: function () {
                var e = r.next();
                return (s = e.done), e;
              },
              e: function (e) {
                (o = !0), (i = e);
              },
              f: function () {
                try {
                  s || null == r.return || r.return();
                } finally {
                  if (o) throw i;
                }
              },
            };
          }
          function Ue(e, t) {
            (null == t || t > e.length) && (t = e.length);
            for (var r = 0, n = new Array(t); r < t; r++) n[r] = e[r];
            return n;
          }
          function We(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t &&
                (n = n.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, n);
            }
            return r;
          }
          function Ve(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2
                ? We(Object(r), !0).forEach(function (t) {
                    (0, o.Z)(e, t, r[t]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    e,
                    Object.getOwnPropertyDescriptors(r)
                  )
                : We(Object(r)).forEach(function (t) {
                    Object.defineProperty(
                      e,
                      t,
                      Object.getOwnPropertyDescriptor(r, t)
                    );
                  });
            }
            return e;
          }
          var He,
            Ze = {
              sd: {
                low: { s: 0, t: 2 },
                med: { s: 0, t: 2 },
                high: { s: 1, t: 2 },
                s0t0: { s: 0, t: 0 },
                s0t1: { s: 0, t: 1 },
                s0t2: { s: 0, t: 2 },
                s1t0: { s: 1, t: 0 },
                s1t1: { s: 1, t: 1 },
                s1t2: { s: 1, t: 2 },
                s2t0: { s: 2, t: 0 },
                s2t1: { s: 2, t: 1 },
                s2t2: { s: 2, t: 2 },
              },
              hd: {
                low: { s: 0, t: 2 },
                med: { s: 1, t: 2 },
                high: { s: 2, t: 2 },
                s0t0: { s: 0, t: 0 },
                s0t1: { s: 0, t: 1 },
                s0t2: { s: 0, t: 2 },
                s1t0: { s: 1, t: 0 },
                s1t1: { s: 1, t: 1 },
                s1t2: { s: 1, t: 2 },
                s2t0: { s: 2, t: 0 },
                s2t1: { s: 2, t: 1 },
                s2t2: { s: 2, t: 2 },
              },
            },
            qe = {
              qvga: { width: { ideal: 320 }, height: { ideal: 240 } },
              vga: { width: { ideal: 640 }, height: { ideal: 480 } },
              sd: {
                width: { ideal: 1280 },
                height: { ideal: 720 },
                frameRate: { ideal: 24 },
              },
              hd: {
                width: { ideal: 1280 },
                height: { ideal: 720 },
                frameRate: { ideal: 24 },
              },
            },
            ze = {
              sd: [
                { scaleResolutionDownBy: 6 },
                { scaleResolutionDownBy: 4 },
                { scaleResolutionDownBy: 2 },
              ],
              hd: [
                { scaleResolutionDownBy: 4 },
                { scaleResolutionDownBy: 2 },
                { scaleResolutionDownBy: 1 },
              ],
            },
            Ge = [{ scalabilityMode: "S3T3_KEY" }],
            Ke = [{ dtx: !0, maxFramerate: 10 }],
            $e = [{ scalabilityMode: "S3T3", dtx: !0 }],
            Je = new f("RoomClient"),
            Qe = (function () {
              function e(t) {
                var r,
                  n,
                  a = t.roomId,
                  s = t.peerId,
                  c = t.secret,
                  d = t.displayName,
                  l = t.device,
                  u = t.handlerName,
                  p = t.useSimulcast,
                  h = t.useSharingSimulcast,
                  m = t.forceTcp,
                  f = t.mode,
                  v = t.forceH264,
                  _ = t.forceVP9,
                  g = t.svc,
                  y = t.datachannel,
                  b = t.externalVideo,
                  w = t.micEnabled,
                  S = t.webcamEnabled,
                  k = t.maxResolution,
                  R = t.useSpartialLayerAnalytics,
                  E = t._deviceInfo,
                  T = t.customCameraVideoTrack,
                  P = t.customMicrophoneAudioTrack,
                  C = t.autoConsume,
                  x = t.preferredProtocol,
                  O = t.signalingBaseUrl,
                  D = t.metaData,
                  I = t.defaultCameraIndex;
                (0, i.Z)(this, e),
                  (0, o.Z)(this, "delay", function (e) {
                    return new Promise(function (t) {
                      return setTimeout(t, e);
                    });
                  }),
                  Je.debug(
                    'constructor() [roomId:"%s", peerId:"%s", displayName:"%s", device:%s]',
                    a,
                    s,
                    d,
                    l.flag
                  ),
                  (this.useSpartialLayerAnalytics = R || !1),
                  (this._deviceInfo = E),
                  (this._eventEmitter = new oe.EventEmitter()),
                  (this._closed = !1),
                  (this._displayName = d),
                  (this._device = l),
                  (this._forceTcp = m),
                  (this._preferredProtocol = x),
                  f == Pe.S.CONFERENCE
                    ? ((r = !0), (n = !0))
                    : ((r = !1), (n = !1)),
                  (this._mode = f),
                  (this._produce = r),
                  (this._consume = n),
                  (this._useDataChannel = y),
                  (this._forceH264 = Boolean(v)),
                  (this._forceVP9 = Boolean(_)),
                  (this._micEnabled = Boolean(w)),
                  (this._webcamEnabled = Boolean(S)),
                  (this._externalVideo = null),
                  (this._externalVideoStream = null),
                  (this._nextDataChannelTestNumber = 0),
                  b &&
                    ((this._externalVideo = document.createElement("video")),
                    (this._externalVideo.controls = !0),
                    (this._externalVideo.loop = !0),
                    this._externalVideo.setAttribute("playsinline", ""),
                    (this._externalVideo.src = b),
                    this._externalVideo.play().catch(function (e) {
                      return Je.warn("externalVideo.play() failed:%o", e);
                    })),
                  (this._handlerName = u),
                  (this._useSimulcast = p),
                  (this._useSharingSimulcast = h),
                  (this._protooUrl = ""),
                  (this._secret = c),
                  (this._peerId = s),
                  (this._roomId = a),
                  (this._baseUrl = ""),
                  (this._protoo = null),
                  (this._mediasoupDevice = null),
                  (this._sendTransport = null),
                  (this._recvTransport = null),
                  (this._micProducer = null),
                  (this._webcamProducer = null),
                  (this._shareProducer = null),
                  (this._shareAudioProducer = null),
                  (this._chatDataProducer = null),
                  (this._botDataProducer = null),
                  (this._consumers = new Map()),
                  (this._dataConsumers = new Map()),
                  (this._mics = new Map()),
                  (this._mic = { device: null }),
                  (this._webcams = new Map()),
                  (this._webcam = { device: null, resolution: k || "hd" }),
                  (this._pinnedParticipants = new Map()),
                  g &&
                    ((Ge[0].scalabilityMode = "".concat(g, "_KEY")),
                    ($e[0].scalabilityMode = g)),
                  (this.customCameraVideoTrack = T),
                  (this.customMicrophoneAudioTrack = P),
                  (this._autoConsume = C),
                  (this._iceServers = []);
                (this._metrics = new Te.VideoSDKMetrics({
                  refreshEvery: 1e3,
                  startAfter: 1e3,
                  verbose: !1,
                })),
                  (this._collectStats = "react-native" != E.sdkType),
                  (this._stats = {}),
                  (this._latestStats = {}),
                  (this._isWebsocketAlive = !1),
                  (this._pingWebsocketInterval = null),
                  (this._pingInternetInterval = null),
                  (this._pingWebsocketFailedCounter = 0),
                  (this._pongInternetCounter = 0),
                  (this._transportState = ""),
                  (this._openTelemetry = null),
                  (this._videosdkLogs = null),
                  (this._signalingBaseUrl = O || "api.videosdk.live"),
                  (this._metaData = D),
                  (this._defaultCameraIndex = I);
              }
              var t,
                r,
                c,
                p,
                h,
                m,
                f,
                v,
                _,
                g,
                b,
                w,
                S,
                k,
                R,
                E,
                C,
                x,
                ce,
                le,
                ue,
                pe,
                he,
                me,
                fe,
                ve,
                _e,
                ge,
                ye,
                we,
                Se,
                xe,
                Oe,
                De,
                Ie,
                Me,
                Le,
                je,
                Ne,
                Ue,
                We,
                Qe,
                Ye,
                Xe,
                et,
                tt,
                rt,
                nt,
                at,
                it,
                st,
                ot,
                ct,
                dt,
                lt,
                ut,
                pt,
                ht,
                mt,
                ft,
                vt,
                _t,
                gt,
                yt,
                bt,
                wt,
                St,
                kt,
                Rt,
                Et,
                Tt,
                Pt,
                Ct,
                xt,
                Ot,
                Dt,
                It,
                Mt,
                Lt,
                At,
                jt,
                Nt,
                Bt,
                Ft,
                Ut,
                Wt,
                Vt,
                Ht,
                Zt,
                qt,
                zt,
                Gt,
                Kt,
                $t,
                Jt,
                Qt,
                Yt,
                Xt;
              return (
                (0, s.Z)(
                  e,
                  [
                    {
                      key: "on",
                      value: function (e, t) {
                        this._eventEmitter.on(e, t);
                      },
                    },
                    {
                      key: "close",
                      value: function (e) {
                        var t,
                          r,
                          n,
                          a,
                          i,
                          s = e.sendLeft,
                          o = void 0 === s || s;
                        o &&
                          (this._eventEmitter.emit("MEETING_STATE_CHANGED", {
                            state: "CLOSING",
                          }),
                          null === (i = this._openTelemetry) ||
                            void 0 === i ||
                            i.traceAutoComplete({
                              spanName: "Meeting is in CLOSING State",
                              status: 1,
                            }));
                        if (!this._closed) {
                          (this._closed = !0),
                            this._pingWebsocketInterval &&
                              clearInterval(this._pingWebsocketInterval),
                            (this._pingWebsocketInterval = null),
                            this._pingInternetInterval &&
                              clearInterval(this._pingInternetInterval),
                            (this._pingInternetInterval = null),
                            this._protoo.close(),
                            this._metrics.running &&
                              this._metrics.stopAllProbes(),
                            Je.debug("close()");
                          var c =
                            null === (t = this._openTelemetry) || void 0 === t
                              ? void 0
                              : t.trace({ spanName: "Closing Trasnport" });
                          this._sendTransport && this._sendTransport.close(),
                            this._recvTransport && this._recvTransport.close(),
                            null === (r = this._openTelemetry) ||
                              void 0 === r ||
                              r.completeSpan({
                                span: c,
                                status: 1,
                                message: "Closed Trasnport",
                              }),
                            He.dispatch(O("closed")),
                            o &&
                              this._eventEmitter.emit("MEETING_STATE_CHANGED", {
                                state: "CLOSED",
                              }),
                            null === (n = this._openTelemetry) ||
                              void 0 === n ||
                              n.traceAutoComplete({
                                spanName: "Meeting is in CLOSED State",
                                status: 1,
                              }),
                            o && this._eventEmitter.emit("MEETING_LEFT"),
                            null === (a = this._openTelemetry) ||
                              void 0 === a ||
                              a.traceAutoComplete({
                                spanName: "Emitted MEETING_LEFT Event",
                                status: 1,
                              });
                        }
                      },
                    },
                    {
                      key: "join",
                      value:
                        ((Xt = (0, a.Z)(
                          d().mark(function e() {
                            var t,
                              r,
                              n,
                              i,
                              s,
                              c,
                              p,
                              h,
                              m,
                              f,
                              v,
                              _ = this;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (e.next = 2),
                                        y({
                                          roomId: this._roomId,
                                          secret: this._secret,
                                          signalingBaseUrl:
                                            this._signalingBaseUrl,
                                        })
                                      );
                                    case 2:
                                      (n = e.sent),
                                        (i = n.baseUrl),
                                        (s = n.iceServers),
                                        (c = n.logs),
                                        (p = n.observabilityJwt),
                                        (h = n.traces),
                                        (m = n.metaData),
                                        (f = n.signalingUrl),
                                        (this._baseUrl = i),
                                        (this._protooUrl = ""
                                          .concat(
                                            f || "wss://".concat(this._baseUrl),
                                            "/?roomId="
                                          )
                                          .concat(this._roomId, "&peerId=")
                                          .concat(this._peerId, "&secret=")
                                          .concat(this._secret, "&mode=")
                                          .concat(this._mode)),
                                        (this._iceServers = s),
                                        (this._tracesEnabled = h.enabled),
                                        (this._openTelemetry = new Ae(
                                          (0, o.Z)(
                                            {
                                              roomId: this._roomId,
                                              peerId: this._peerId,
                                              sdkName: "".concat(
                                                this._deviceInfo.sdkType,
                                                "-sdk"
                                              ),
                                              traces: h,
                                              logs: c,
                                              observabilityJwt: p,
                                              metaData: m,
                                            },
                                            "traces",
                                            h
                                          )
                                        )),
                                        (this._videosdkLogs = new Be({
                                          roomId: this._roomId,
                                          peerId: this._peerId,
                                          sdkName: "".concat(
                                            this._deviceInfo.sdkType,
                                            "-sdk"
                                          ),
                                          logs: c,
                                          observabilityJwt: p,
                                        })),
                                        (this._joinSpan =
                                          null === (t = this._openTelemetry) ||
                                          void 0 === t
                                            ? void 0
                                            : t.trace({
                                                spanName: "Join() Calling",
                                                attributes: {
                                                  DeviceInfo: JSON.stringify(
                                                    this._deviceInfo
                                                  ),
                                                  mode: this._mode,
                                                  displayName:
                                                    this._displayName,
                                                  multiStream:
                                                    this._useSimulcast,
                                                  micEnabled: this._micEnabled,
                                                  webcamEnabled:
                                                    this._webcamEnabled,
                                                  CustomVideoTrack:
                                                    !!this
                                                      .customCameraVideoTrack,
                                                  CustomMicTrack:
                                                    !!this
                                                      .customMicrophoneAudioTrack,
                                                  signalingUrl:
                                                    f ||
                                                    "signalingUrl not specify",
                                                },
                                              })),
                                        (v = new l.qo(this._protooUrl)),
                                        (this._protoo = new l._z(v)),
                                        this._eventEmitter.emit(
                                          "MEETING_STATE_CHANGED",
                                          { state: "CONNECTING" }
                                        ),
                                        He.dispatch(O("connecting")),
                                        null === (r = this._openTelemetry) ||
                                          void 0 === r ||
                                          r.traceAutoComplete({
                                            spanName:
                                              "Meeting is in CONNECTING State",
                                            span: this._joinSpan,
                                            status: 1,
                                          }),
                                        this._protoo.on("open", function () {
                                          var e;
                                          (_._isWebsocketAlive = !0),
                                            (_._closed = !1),
                                            _.startPingPong(),
                                            _._eventEmitter.emit(
                                              "MEETING_STATE_CHANGED",
                                              { state: "CONNECTED" }
                                            ),
                                            null === (e = _._openTelemetry) ||
                                              void 0 === e ||
                                              e.traceAutoComplete({
                                                spanName:
                                                  "Meeting is in CONNECTED State",
                                                span: _._joinSpan,
                                                status: 1,
                                              }),
                                            _.requestEntry();
                                        }),
                                        this._protoo.on("failed", function () {
                                          var e;
                                          _._eventEmitter.emit(
                                            "MEETING_STATE_CHANGED",
                                            { state: "FAILED" }
                                          ),
                                            null === (e = _._openTelemetry) ||
                                              void 0 === e ||
                                              e.traceAutoComplete({
                                                spanName:
                                                  "Meeting is in FAILED State",
                                                span: _._joinSpan,
                                                status: 2,
                                              }),
                                            He.dispatch(
                                              se({
                                                type: "error",
                                                text: "WebSocket connection failed",
                                              })
                                            );
                                        }),
                                        this._protoo.on(
                                          "disconnected",
                                          function () {
                                            var e;
                                            _._eventEmitter.emit(
                                              "MEETING_STATE_CHANGED",
                                              { state: "DISCONNECTED" }
                                            ),
                                              null === (e = _._openTelemetry) ||
                                                void 0 === e ||
                                                e.traceAutoComplete({
                                                  spanName:
                                                    "Meeting is in DISCONNECTED State",
                                                  span: _._joinSpan,
                                                  status: 1,
                                                }),
                                              He.dispatch(
                                                se({
                                                  type: "error",
                                                  text: "WebSocket disconnected",
                                                })
                                              ),
                                              _._sendTransport &&
                                                (_._sendTransport.close(),
                                                (_._sendTransport = null)),
                                              _._recvTransport &&
                                                (_._recvTransport.close(),
                                                (_._recvTransport = null)),
                                              He.dispatch(O("closed"));
                                          }
                                        ),
                                        this._protoo.on("close", function () {
                                          _._closed ||
                                            _.close({ sendLeft: !0 });
                                        }),
                                        this._protoo.on(
                                          "request",
                                          (function () {
                                            var e = (0, a.Z)(
                                              d().mark(function e(t, r, n) {
                                                var a,
                                                  i,
                                                  s,
                                                  o,
                                                  c,
                                                  l,
                                                  p,
                                                  h,
                                                  m,
                                                  f,
                                                  v,
                                                  g,
                                                  y,
                                                  b,
                                                  w,
                                                  S,
                                                  k,
                                                  R,
                                                  E,
                                                  T,
                                                  P,
                                                  C,
                                                  x,
                                                  O,
                                                  D,
                                                  I,
                                                  M,
                                                  L,
                                                  A,
                                                  j,
                                                  N,
                                                  B,
                                                  F,
                                                  U,
                                                  W,
                                                  V,
                                                  H,
                                                  Z,
                                                  q,
                                                  z,
                                                  G,
                                                  K,
                                                  $,
                                                  Y,
                                                  X,
                                                  ee,
                                                  te,
                                                  re,
                                                  ne,
                                                  ie,
                                                  oe,
                                                  ce,
                                                  de,
                                                  le,
                                                  ue,
                                                  pe,
                                                  he,
                                                  me,
                                                  fe,
                                                  ve,
                                                  _e,
                                                  ge;
                                                return d().wrap(
                                                  function (e) {
                                                    for (;;)
                                                      switch (
                                                        (e.prev = e.next)
                                                      ) {
                                                        case 0:
                                                          Je.debug(
                                                            'proto "request" event [method:%s, data:%o]',
                                                            t.method,
                                                            t.data
                                                          ),
                                                            (e.t0 = t.method),
                                                            (e.next =
                                                              "close" === e.t0
                                                                ? 4
                                                                : "newConsumer" ===
                                                                  e.t0
                                                                ? 7
                                                                : "newDataConsumer" ===
                                                                  e.t0
                                                                ? 45
                                                                : "enableMic" ===
                                                                  e.t0
                                                                ? 72
                                                                : "disableMic" ===
                                                                  e.t0
                                                                ? 74
                                                                : "enableWebcam" ===
                                                                  e.t0
                                                                ? 88
                                                                : "disableWebcam" ===
                                                                  e.t0
                                                                ? 90
                                                                : "pinStateChanged" ===
                                                                  e.t0
                                                                ? 104
                                                                : "switchRoom" ===
                                                                  e.t0
                                                                ? 124
                                                                : "statsData" ===
                                                                  e.t0
                                                                ? 127
                                                                : 130);
                                                          break;
                                                        case 4:
                                                          return (
                                                            r(),
                                                            _.close({
                                                              sendLeft: !0,
                                                            }),
                                                            e.abrupt(
                                                              "break",
                                                              130
                                                            )
                                                          );
                                                        case 7:
                                                          if (
                                                            ((s =
                                                              null ===
                                                                (a =
                                                                  _._openTelemetry) ||
                                                              void 0 === a
                                                                ? void 0
                                                                : a.trace({
                                                                    spanName:
                                                                      "Protoo REQ: newConsumer",
                                                                    attributes:
                                                                      {
                                                                        request:
                                                                          JSON.stringify(
                                                                            t
                                                                          ),
                                                                      },
                                                                  })),
                                                            _._consume)
                                                          ) {
                                                            e.next = 12;
                                                            break;
                                                          }
                                                          return (
                                                            n(
                                                              403,
                                                              "I do not want to consume"
                                                            ),
                                                            null ===
                                                              (o =
                                                                _._openTelemetry) ||
                                                              void 0 === o ||
                                                              o.completeSpan({
                                                                span: s,
                                                                status: 2,
                                                                message:
                                                                  "I do not want to consume",
                                                              }),
                                                            e.abrupt(
                                                              "break",
                                                              130
                                                            )
                                                          );
                                                        case 12:
                                                          return (
                                                            (c = t.data),
                                                            (l = c.peerId),
                                                            (p = c.producerId),
                                                            (h = c.id),
                                                            (m = c.kind),
                                                            (f =
                                                              c.rtpParameters),
                                                            (v = c.type),
                                                            (g = c.appData),
                                                            (y =
                                                              c.producerPaused),
                                                            (b =
                                                              null ===
                                                                (i =
                                                                  _._openTelemetry) ||
                                                              void 0 === i
                                                                ? void 0
                                                                : i.trace({
                                                                    spanName:
                                                                      "Creating Consumer",
                                                                    span: s,
                                                                  })),
                                                            (e.prev = 14),
                                                            (e.next = 17),
                                                            _._recvTransport.consume(
                                                              {
                                                                id: h,
                                                                producerId: p,
                                                                kind: m,
                                                                rtpParameters:
                                                                  f,
                                                                appData: Ve(
                                                                  Ve({}, g),
                                                                  {},
                                                                  { peerId: l }
                                                                ),
                                                              }
                                                            )
                                                          );
                                                        case 17:
                                                          (E = e.sent),
                                                            (T =
                                                              u.parseScalabilityMode(
                                                                E.rtpParameters
                                                                  .encodings[0]
                                                                  .scalabilityMode
                                                              )),
                                                            (P =
                                                              T.spatialLayers),
                                                            (C =
                                                              T.temporalLayers),
                                                            (E.spatialLayers =
                                                              P),
                                                            (E.temporalLayers =
                                                              C),
                                                            (E.currentSpatialLayers =
                                                              P - 1),
                                                            (E.currentTemporalLayers =
                                                              C - 1),
                                                            _._consumers.set(
                                                              E.id,
                                                              E
                                                            ),
                                                            E.on(
                                                              "transportclose",
                                                              function () {
                                                                _._consumers.delete(
                                                                  E.id
                                                                );
                                                                var e = Q(
                                                                  E.id,
                                                                  l
                                                                );
                                                                He.dispatch(e),
                                                                  _._eventEmitter.emit(
                                                                    e.type,
                                                                    e.payload
                                                                  );
                                                              }
                                                            ),
                                                            null ===
                                                              (w =
                                                                _._openTelemetry) ||
                                                              void 0 === w ||
                                                              w.completeSpan({
                                                                span: b,
                                                                status: 1,
                                                                message:
                                                                  "Consumer Created",
                                                              }),
                                                            (b =
                                                              null ===
                                                                (S =
                                                                  _._openTelemetry) ||
                                                              void 0 === S
                                                                ? void 0
                                                                : S.trace({
                                                                    spanName:
                                                                      "Sending Stream Enabled Event",
                                                                    span: s,
                                                                  })),
                                                            (x = J(
                                                              {
                                                                id: E.id,
                                                                type: v,
                                                                locallyPaused:
                                                                  !1,
                                                                remotelyPaused:
                                                                  y,
                                                                rtpParameters:
                                                                  E.rtpParameters,
                                                                spatialLayers:
                                                                  P,
                                                                temporalLayers:
                                                                  C,
                                                                currentSpatialLayer:
                                                                  P - 1,
                                                                currentTemporalLayer:
                                                                  C - 1,
                                                                preferredSpatialLayer:
                                                                  P - 1,
                                                                preferredTemporalLayer:
                                                                  C - 1,
                                                                priority: 1,
                                                                codec:
                                                                  E.rtpParameters.codecs[0].mimeType.split(
                                                                    "/"
                                                                  )[1],
                                                                track: E.track,
                                                                appData: g,
                                                                instance: E,
                                                              },
                                                              l
                                                            )),
                                                            He.dispatch(x),
                                                            _._eventEmitter.emit(
                                                              x.type,
                                                              x.payload
                                                            ),
                                                            r(),
                                                            "video" ===
                                                              E.kind &&
                                                              He.getState().me
                                                                .audioOnly &&
                                                              _._pauseConsumer(
                                                                E
                                                              ),
                                                            null ===
                                                              (k =
                                                                _._openTelemetry) ||
                                                              void 0 === k ||
                                                              k.completeSpan({
                                                                span: b,
                                                                status: 1,
                                                                message:
                                                                  "Event Send Successfully",
                                                              }),
                                                            null ===
                                                              (R =
                                                                _._openTelemetry) ||
                                                              void 0 === R ||
                                                              R.completeSpan({
                                                                span: s,
                                                                status: 1,
                                                                message:
                                                                  "New Consumer Created Successfully",
                                                                attributes: {
                                                                  "consumer.consumerId":
                                                                    E.id,
                                                                },
                                                              }),
                                                            "video" == E.kind &&
                                                              E.appData.share &&
                                                              (null ===
                                                                (O =
                                                                  _._openTelemetry) ||
                                                                void 0 === O ||
                                                                O.traceAutoComplete(
                                                                  {
                                                                    spanName:
                                                                      "Presenter Changed",
                                                                    span: s,
                                                                    attributes:
                                                                      {
                                                                        "peer.id":
                                                                          l,
                                                                      },
                                                                  }
                                                                )),
                                                            (e.next = 44);
                                                          break;
                                                        case 37:
                                                          throw (
                                                            ((e.prev = 37),
                                                            (e.t1 =
                                                              e.catch(14)),
                                                            null ===
                                                              (D =
                                                                _._openTelemetry) ||
                                                              void 0 === D ||
                                                              D.completeSpan({
                                                                span: b,
                                                                status: 2,
                                                                message:
                                                                  "Error creating a Consumer: ".concat(
                                                                    e.t1
                                                                  ),
                                                              }),
                                                            null ===
                                                              (I =
                                                                _._openTelemetry) ||
                                                              void 0 === I ||
                                                              I.completeSpan({
                                                                span: s,
                                                                status: 2,
                                                                message:
                                                                  "Error creating a Consumer: ".concat(
                                                                    e.t1
                                                                  ),
                                                              }),
                                                            He.dispatch(
                                                              se({
                                                                type: "error",
                                                                text: "Error creating a Consumer: ".concat(
                                                                  e.t1
                                                                ),
                                                              })
                                                            ),
                                                            null ===
                                                              (M =
                                                                _._videosdkLogs) ||
                                                              void 0 === M ||
                                                              M.pushLogs({
                                                                logText:
                                                                  "Error creating a Consumer",
                                                                logType:
                                                                  "ERROR",
                                                                attributes: {
                                                                  error:
                                                                    e.t1
                                                                      .message,
                                                                },
                                                              }),
                                                            e.t1)
                                                          );
                                                        case 44:
                                                          return e.abrupt(
                                                            "break",
                                                            130
                                                          );
                                                        case 45:
                                                          if (_._consume) {
                                                            e.next = 48;
                                                            break;
                                                          }
                                                          return (
                                                            n(
                                                              403,
                                                              "I do not want to data consume"
                                                            ),
                                                            e.abrupt(
                                                              "break",
                                                              130
                                                            )
                                                          );
                                                        case 48:
                                                          if (
                                                            _._useDataChannel
                                                          ) {
                                                            e.next = 51;
                                                            break;
                                                          }
                                                          return (
                                                            n(
                                                              403,
                                                              "I do not want DataChannels"
                                                            ),
                                                            e.abrupt(
                                                              "break",
                                                              130
                                                            )
                                                          );
                                                        case 51:
                                                          return (
                                                            (L = t.data),
                                                            (A = L.peerId),
                                                            (j =
                                                              L.dataProducerId),
                                                            (N = L.id),
                                                            (B =
                                                              L.sctpStreamParameters),
                                                            (F = L.label),
                                                            (U = L.protocol),
                                                            (W = L.appData),
                                                            (e.prev = 52),
                                                            (e.next = 55),
                                                            _._recvTransport.consumeData(
                                                              {
                                                                id: N,
                                                                dataProducerId:
                                                                  j,
                                                                sctpStreamParameters:
                                                                  B,
                                                                label: F,
                                                                protocol: U,
                                                                appData: Ve(
                                                                  Ve({}, W),
                                                                  {},
                                                                  { peerId: A }
                                                                ),
                                                              }
                                                            )
                                                          );
                                                        case 55:
                                                          (V = e.sent),
                                                            _._dataConsumers.set(
                                                              V.id,
                                                              V
                                                            ),
                                                            V.on(
                                                              "transportclose",
                                                              function () {
                                                                _._dataConsumers.delete(
                                                                  V.id
                                                                );
                                                              }
                                                            ),
                                                            V.on(
                                                              "open",
                                                              function () {
                                                                Je.debug(
                                                                  'DataConsumer "open" event'
                                                                );
                                                              }
                                                            ),
                                                            V.on(
                                                              "close",
                                                              function () {
                                                                Je.warn(
                                                                  'DataConsumer "close" event'
                                                                ),
                                                                  _._dataConsumers.delete(
                                                                    V.id
                                                                  ),
                                                                  He.dispatch(
                                                                    se({
                                                                      type: "error",
                                                                      text: "DataConsumer closed",
                                                                    })
                                                                  );
                                                              }
                                                            ),
                                                            V.on(
                                                              "error",
                                                              function (e) {
                                                                Je.error(
                                                                  'DataConsumer "error" event:%o',
                                                                  e
                                                                ),
                                                                  He.dispatch(
                                                                    se({
                                                                      type: "error",
                                                                      text: "DataConsumer error: ".concat(
                                                                        e
                                                                      ),
                                                                    })
                                                                  );
                                                              }
                                                            ),
                                                            V.on(
                                                              "message",
                                                              function (e) {
                                                                if (
                                                                  (Je.debug(
                                                                    'DataConsumer "message" event [streamId:%d]',
                                                                    V
                                                                      .sctpStreamParameters
                                                                      .streamId
                                                                  ),
                                                                  (window.DC_MESSAGE =
                                                                    e),
                                                                  e instanceof
                                                                    ArrayBuffer)
                                                                ) {
                                                                  var t =
                                                                    new DataView(
                                                                      e
                                                                    ).getUint32();
                                                                  return t ==
                                                                    Math.pow(
                                                                      2,
                                                                      32
                                                                    ) -
                                                                      1
                                                                    ? (Je.warn(
                                                                        "dataChannelTest finished!"
                                                                      ),
                                                                      void (_._nextDataChannelTestNumber = 0))
                                                                    : (t >
                                                                        _._nextDataChannelTestNumber &&
                                                                        Je.warn(
                                                                          "dataChannelTest: %s packets missing",
                                                                          t -
                                                                            _._nextDataChannelTestNumber
                                                                        ),
                                                                      void (_._nextDataChannelTestNumber =
                                                                        t + 1));
                                                                }
                                                                if (
                                                                  "string" ==
                                                                  typeof e
                                                                )
                                                                  switch (
                                                                    V.label
                                                                  ) {
                                                                    case "chat":
                                                                      var r =
                                                                          He.getState()
                                                                            .peers,
                                                                        n =
                                                                          Object.keys(
                                                                            r
                                                                          )
                                                                            .map(
                                                                              function (
                                                                                e
                                                                              ) {
                                                                                return r[
                                                                                  e
                                                                                ];
                                                                              }
                                                                            )
                                                                            .find(
                                                                              function (
                                                                                e
                                                                              ) {
                                                                                return e.dataConsumers.includes(
                                                                                  V.id
                                                                                );
                                                                              }
                                                                            );
                                                                      if (!n) {
                                                                        Je.warn(
                                                                          'DataConsumer "message" from unknown peer'
                                                                        );
                                                                        break;
                                                                      }
                                                                      He.dispatch(
                                                                        se({
                                                                          title:
                                                                            "".concat(
                                                                              n.displayName,
                                                                              " says:"
                                                                            ),
                                                                          text: e,
                                                                          timeout: 5e3,
                                                                        })
                                                                      ),
                                                                        _._eventEmitter.emit(
                                                                          "CHAT_MESSAGE",
                                                                          {
                                                                            text: e,
                                                                            senderId:
                                                                              n.id,
                                                                            timestamp:
                                                                              new Date().getTime(),
                                                                          }
                                                                        );
                                                                      break;
                                                                    case "bot":
                                                                      He.dispatch(
                                                                        se({
                                                                          title:
                                                                            "Message from Bot:",
                                                                          text: e,
                                                                          timeout: 5e3,
                                                                        })
                                                                      );
                                                                  }
                                                                else
                                                                  Je.warn(
                                                                    'ignoring DataConsumer "message" (not a string)'
                                                                  );
                                                              }
                                                            ),
                                                            (window.DC = V),
                                                            He.dispatch(
                                                              ae(
                                                                {
                                                                  id: V.id,
                                                                  sctpStreamParameters:
                                                                    V.sctpStreamParameters,
                                                                  label:
                                                                    V.label,
                                                                  protocol:
                                                                    V.protocol,
                                                                },
                                                                A
                                                              )
                                                            ),
                                                            r(),
                                                            (e.next = 71);
                                                          break;
                                                        case 67:
                                                          (e.prev = 67),
                                                            (e.t2 =
                                                              e.catch(52)),
                                                            Je.error(
                                                              '"newDataConsumer" request failed:%o',
                                                              e.t2
                                                            ),
                                                            He.dispatch(
                                                              se({
                                                                type: "error",
                                                                text: "Error creating a DataConsumer: ".concat(
                                                                  e.t2
                                                                ),
                                                              })
                                                            );
                                                        case 71:
                                                          return e.abrupt(
                                                            "break",
                                                            130
                                                          );
                                                        case 72:
                                                          try {
                                                            (Z = t.data.peerId),
                                                              null ===
                                                                (H =
                                                                  _._openTelemetry) ||
                                                                void 0 === H ||
                                                                H.traceAutoComplete(
                                                                  {
                                                                    spanName:
                                                                      "Emitting MIC_REQUESTED & Protoo REQ: enableMic for ".concat(
                                                                        Z
                                                                      ),
                                                                    status: 1,
                                                                  }
                                                                ),
                                                              _._eventEmitter.emit(
                                                                "MIC_REQUESTED",
                                                                { peerId: Z }
                                                              ),
                                                              r();
                                                          } catch (e) {
                                                            Je.error(
                                                              '"enableMic" request failed:%o',
                                                              e
                                                            ),
                                                              null ===
                                                                (q =
                                                                  _._videosdkLogs) ||
                                                                void 0 === q ||
                                                                q.pushLogs({
                                                                  logText:
                                                                    "Error enableMic request failed",
                                                                  logType:
                                                                    "ERROR",
                                                                  attributes: {
                                                                    error:
                                                                      e.message,
                                                                  },
                                                                }),
                                                              _._emitError({
                                                                code: 3027,
                                                                message:
                                                                  e.message,
                                                              });
                                                          }
                                                          return e.abrupt(
                                                            "break",
                                                            130
                                                          );
                                                        case 74:
                                                          return (
                                                            (e.prev = 74),
                                                            (z =
                                                              null ===
                                                                (G =
                                                                  _._openTelemetry) ||
                                                              void 0 === G
                                                                ? void 0
                                                                : G.trace({
                                                                    spanName:
                                                                      "Protoo REQ: disableMic",
                                                                  })),
                                                            (e.next = 78),
                                                            _.disableMic(!1, z)
                                                          );
                                                        case 78:
                                                          null ===
                                                            (K =
                                                              _._openTelemetry) ||
                                                            void 0 === K ||
                                                            K.completeSpan({
                                                              span: z,
                                                              status: 1,
                                                              message:
                                                                "Request Completed",
                                                            }),
                                                            r(),
                                                            (e.next = 87);
                                                          break;
                                                        case 82:
                                                          (e.prev = 82),
                                                            (e.t3 =
                                                              e.catch(74)),
                                                            null ===
                                                              ($ =
                                                                _._openTelemetry) ||
                                                              void 0 === $ ||
                                                              $.completeSpan({
                                                                span: z,
                                                                status: 2,
                                                                message:
                                                                  "disableMic request failed ".concat(
                                                                    e.t3
                                                                  ),
                                                              }),
                                                            null ===
                                                              (Y =
                                                                _._videosdkLogs) ||
                                                              void 0 === Y ||
                                                              Y.pushLogs({
                                                                logText:
                                                                  "Error disableMic request failed",
                                                                logType:
                                                                  "ERROR",
                                                                attributes: {
                                                                  error:
                                                                    e.t3
                                                                      .message,
                                                                },
                                                              }),
                                                            _._emitError({
                                                              code: 3028,
                                                              message:
                                                                e.t3.message,
                                                            });
                                                        case 87:
                                                          return e.abrupt(
                                                            "break",
                                                            130
                                                          );
                                                        case 88:
                                                          try {
                                                            (ee =
                                                              t.data.peerId),
                                                              null ===
                                                                (X =
                                                                  _._openTelemetry) ||
                                                                void 0 === X ||
                                                                X.traceAutoComplete(
                                                                  {
                                                                    spanName:
                                                                      "Emitting WEBCAM_REQUESTED & Protoo REQ: enableWebcam for ".concat(
                                                                        ee
                                                                      ),
                                                                    status: 1,
                                                                  }
                                                                ),
                                                              _._eventEmitter.emit(
                                                                "WEBCAM_REQUESTED",
                                                                { peerId: ee }
                                                              ),
                                                              r();
                                                          } catch (e) {
                                                            Je.error(
                                                              '"enableWebcam" request failed:%o',
                                                              e
                                                            ),
                                                              null ===
                                                                (te =
                                                                  _._videosdkLogs) ||
                                                                void 0 === te ||
                                                                te.pushLogs({
                                                                  logText:
                                                                    "Error enableWebcam request failed",
                                                                  logType:
                                                                    "ERROR",
                                                                  attributes: {
                                                                    error:
                                                                      e.message,
                                                                  },
                                                                }),
                                                              _._emitError({
                                                                code: 3029,
                                                                message:
                                                                  e.message,
                                                              });
                                                          }
                                                          return e.abrupt(
                                                            "break",
                                                            130
                                                          );
                                                        case 90:
                                                          return (
                                                            (e.prev = 90),
                                                            (re =
                                                              null ===
                                                                (ne =
                                                                  _._openTelemetry) ||
                                                              void 0 === ne
                                                                ? void 0
                                                                : ne.trace({
                                                                    spanName:
                                                                      "Protoo REQ: disableWebcam",
                                                                  })),
                                                            (e.next = 94),
                                                            _.disableWebcam(re)
                                                          );
                                                        case 94:
                                                          null ===
                                                            (ie =
                                                              _._openTelemetry) ||
                                                            void 0 === ie ||
                                                            ie.completeSpan({
                                                              span: re,
                                                              status: 1,
                                                              message:
                                                                "Request Completed",
                                                            }),
                                                            r(),
                                                            (e.next = 103);
                                                          break;
                                                        case 98:
                                                          (e.prev = 98),
                                                            (e.t4 =
                                                              e.catch(90)),
                                                            null ===
                                                              (oe =
                                                                _._openTelemetry) ||
                                                              void 0 === oe ||
                                                              oe.completeSpan({
                                                                span: re,
                                                                status: 2,
                                                                message:
                                                                  "disableWebcam request failed ".concat(
                                                                    e.t4
                                                                  ),
                                                              }),
                                                            null ===
                                                              (ce =
                                                                _._videosdkLogs) ||
                                                              void 0 === ce ||
                                                              ce.pushLogs({
                                                                logText:
                                                                  "Error disableWebcam request failed",
                                                                logType:
                                                                  "ERROR",
                                                                attributes: {
                                                                  error:
                                                                    e.t4
                                                                      .message,
                                                                },
                                                              }),
                                                            _._emitError({
                                                              code: 3030,
                                                              message:
                                                                e.t4.message,
                                                            });
                                                        case 103:
                                                          return e.abrupt(
                                                            "break",
                                                            130
                                                          );
                                                        case 104:
                                                          (e.prev = 104),
                                                            (pe = t.data),
                                                            (he = pe.peerId),
                                                            (me = pe.state),
                                                            (fe = pe.pinnedBy),
                                                            (de =
                                                              null ===
                                                                (le =
                                                                  _._openTelemetry) ||
                                                              void 0 === le
                                                                ? void 0
                                                                : le.trace({
                                                                    spanName:
                                                                      "Protoo REQ: pinStateChanged",
                                                                    attributes:
                                                                      {
                                                                        requestData:
                                                                          JSON.stringify(
                                                                            {
                                                                              peerId:
                                                                                he,
                                                                              state:
                                                                                me,
                                                                              pinnedBy:
                                                                                fe,
                                                                            }
                                                                          ),
                                                                      },
                                                                  })),
                                                            _._pinnedParticipants.has(
                                                              he
                                                            ) ||
                                                              _._pinnedParticipants.set(
                                                                he,
                                                                {
                                                                  cam: !1,
                                                                  share: !1,
                                                                }
                                                              ),
                                                            (ve =
                                                              _._pinnedParticipants.get(
                                                                he
                                                              )),
                                                            null != me.cam &&
                                                              (ve.cam = me.cam),
                                                            null != me.share &&
                                                              (ve.share =
                                                                me.share),
                                                            _._pinnedParticipants.set(
                                                              he,
                                                              ve
                                                            ),
                                                            _._eventEmitter.emit(
                                                              "PIN_STATE_CHANGED",
                                                              {
                                                                peerId: he,
                                                                state: me,
                                                                pinnedBy: fe,
                                                              }
                                                            ),
                                                            0 == ve.share &&
                                                              0 == ve.cam &&
                                                              _._pinnedParticipants.delete(
                                                                he
                                                              ),
                                                            null ===
                                                              (ue =
                                                                _._openTelemetry) ||
                                                              void 0 === ue ||
                                                              ue.completeSpan({
                                                                span: de,
                                                                status: 1,
                                                                message:
                                                                  "Request Completed",
                                                                attributes: {
                                                                  _pinnedParticipants:
                                                                    JSON.stringify(
                                                                      _._pinnedParticipants
                                                                    ),
                                                                },
                                                              }),
                                                            r(),
                                                            (e.next = 123);
                                                          break;
                                                        case 118:
                                                          throw (
                                                            ((e.prev = 118),
                                                            (e.t5 =
                                                              e.catch(104)),
                                                            null ===
                                                              (_e =
                                                                _._openTelemetry) ||
                                                              void 0 === _e ||
                                                              _e.completeSpan({
                                                                span: de,
                                                                status: 2,
                                                                message:
                                                                  "pinStateChanged request failed",
                                                              }),
                                                            null ===
                                                              (ge =
                                                                _._videosdkLogs) ||
                                                              void 0 === ge ||
                                                              ge.pushLogs({
                                                                logText:
                                                                  "Error pinStateChanged request failed",
                                                                logType:
                                                                  "ERROR",
                                                                attributes: {
                                                                  error:
                                                                    e.t5
                                                                      .message,
                                                                },
                                                              }),
                                                            e.t5)
                                                          );
                                                        case 123:
                                                          return e.abrupt(
                                                            "break",
                                                            130
                                                          );
                                                        case 124:
                                                          return (
                                                            _._eventEmitter.emit(
                                                              "SWITCH_ROOM",
                                                              t.data
                                                            ),
                                                            r(),
                                                            e.abrupt(
                                                              "break",
                                                              130
                                                            )
                                                          );
                                                        case 127:
                                                          return (
                                                            r({
                                                              peerId: _._peerId,
                                                              statsData:
                                                                _._stats,
                                                            }),
                                                            (_._stats = {}),
                                                            e.abrupt(
                                                              "break",
                                                              130
                                                            )
                                                          );
                                                        case 130:
                                                        case "end":
                                                          return e.stop();
                                                      }
                                                  },
                                                  e,
                                                  null,
                                                  [
                                                    [14, 37],
                                                    [52, 67],
                                                    [74, 82],
                                                    [90, 98],
                                                    [104, 118],
                                                  ]
                                                );
                                              })
                                            );
                                            return function (t, r, n) {
                                              return e.apply(this, arguments);
                                            };
                                          })()
                                        ),
                                        this._protoo.on(
                                          "notification",
                                          (function () {
                                            var e = (0, a.Z)(
                                              d().mark(function e(t) {
                                                var r,
                                                  n,
                                                  a,
                                                  i,
                                                  s,
                                                  o,
                                                  c,
                                                  l,
                                                  u,
                                                  p,
                                                  h,
                                                  m,
                                                  f,
                                                  v,
                                                  g,
                                                  y,
                                                  b,
                                                  w,
                                                  S,
                                                  k,
                                                  R,
                                                  E,
                                                  T,
                                                  P,
                                                  C,
                                                  x,
                                                  O,
                                                  I,
                                                  M,
                                                  L,
                                                  A,
                                                  j,
                                                  N,
                                                  B,
                                                  F,
                                                  U,
                                                  W,
                                                  V,
                                                  Z,
                                                  q,
                                                  z,
                                                  J,
                                                  te,
                                                  re,
                                                  ae,
                                                  oe,
                                                  ce,
                                                  de,
                                                  le,
                                                  ue,
                                                  pe,
                                                  he,
                                                  me,
                                                  fe,
                                                  ve,
                                                  _e,
                                                  ge,
                                                  ye,
                                                  be,
                                                  we,
                                                  Se,
                                                  ke,
                                                  Re,
                                                  Ee,
                                                  Te,
                                                  Pe,
                                                  xe,
                                                  Oe,
                                                  De,
                                                  Ie,
                                                  Me,
                                                  Le,
                                                  Ae,
                                                  je;
                                                return d().wrap(function (e) {
                                                  for (;;)
                                                    switch ((e.prev = e.next)) {
                                                      case 0:
                                                        Je.debug(
                                                          'proto "notification" event [method:%s, data:%o]',
                                                          t.method,
                                                          t.data
                                                        ),
                                                          (e.t0 = t.method),
                                                          (e.next =
                                                            "error" === e.t0
                                                              ? 4
                                                              : "participantMediaStateChanged" ===
                                                                e.t0
                                                              ? 9
                                                              : "producerScore" ===
                                                                e.t0
                                                              ? 10
                                                              : "entryRequested" ===
                                                                e.t0
                                                              ? 13
                                                              : "entryResponded" ===
                                                                e.t0
                                                              ? 17
                                                              : "newPeer" ===
                                                                e.t0
                                                              ? 22
                                                              : "peerClosed" ===
                                                                e.t0
                                                              ? 29
                                                              : "peerDisplayNameChanged" ===
                                                                e.t0
                                                              ? 35
                                                              : "downlinkBwe" ===
                                                                e.t0
                                                              ? 39
                                                              : "consumerClosed" ===
                                                                e.t0
                                                              ? 41
                                                              : "consumerPaused" ===
                                                                e.t0
                                                              ? 53
                                                              : "consumerResumed" ===
                                                                e.t0
                                                              ? 60
                                                              : "consumerLayersChanged" ===
                                                                e.t0
                                                              ? 67
                                                              : "consumerScore" ===
                                                                e.t0
                                                              ? 78
                                                              : "dataConsumerClosed" ===
                                                                e.t0
                                                              ? 81
                                                              : "activeSpeaker" ===
                                                                e.t0
                                                              ? 90
                                                              : "recordingStateChanged" ===
                                                                e.t0
                                                              ? 95
                                                              : "recordingStarted" ===
                                                                e.t0
                                                              ? 98
                                                              : "recordingStopped" ===
                                                                e.t0
                                                              ? 100
                                                              : "livestreamStateChanged" ===
                                                                e.t0
                                                              ? 102
                                                              : "livestreamStarted" ===
                                                                e.t0
                                                              ? 105
                                                              : "livestreamStopped" ===
                                                                e.t0
                                                              ? 107
                                                              : "hlsStateChanged" ===
                                                                e.t0
                                                              ? 109
                                                              : "hlsPlayableStateChanged" ===
                                                                e.t0
                                                              ? 112
                                                              : "hlsStarted" ===
                                                                e.t0
                                                              ? 114
                                                              : "hlsStopped" ===
                                                                e.t0
                                                              ? 117
                                                              : "whiteboardStarted" ===
                                                                e.t0
                                                              ? 119
                                                              : "whiteboardStopped" ===
                                                                e.t0
                                                              ? 122
                                                              : "videoStatusChanged" ===
                                                                e.t0
                                                              ? 124
                                                              : "videoSeeked" ===
                                                                e.t0
                                                              ? 126
                                                              : "connectionOpen" ===
                                                                e.t0
                                                              ? 129
                                                              : "connectionClose" ===
                                                                e.t0
                                                              ? 131
                                                              : "connectionChatMessage" ===
                                                                e.t0
                                                              ? 133
                                                              : "connectionParticipantJoined" ===
                                                                e.t0
                                                              ? 135
                                                              : "connectionParticipantLeft" ===
                                                                e.t0
                                                              ? 137
                                                              : "pubsubMessage" ===
                                                                e.t0
                                                              ? 139
                                                              : "peerModeChanged" ===
                                                                e.t0
                                                              ? 141
                                                              : "restartIce" ===
                                                                e.t0
                                                              ? 144
                                                              : 148);
                                                        break;
                                                      case 4:
                                                        return (
                                                          (a = t.data),
                                                          _._eventEmitter.emit(
                                                            "ERROR",
                                                            a
                                                          ),
                                                          null ===
                                                            (r =
                                                              _._videosdkLogs) ||
                                                            void 0 === r ||
                                                            r.pushLogs({
                                                              logText:
                                                                "Error in Meeting Session",
                                                              logType: "ERROR",
                                                              attributes: {
                                                                error:
                                                                  a.message,
                                                              },
                                                            }),
                                                          null ===
                                                            (n =
                                                              _._openTelemetry) ||
                                                            void 0 === n ||
                                                            n.traceAutoComplete(
                                                              {
                                                                spanName:
                                                                  "Emitted `ERROR` Event",
                                                                attributes: {
                                                                  error:
                                                                    a.message,
                                                                },
                                                                status: 2,
                                                              }
                                                            ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 9:
                                                        try {
                                                          (i = t.data),
                                                            (s = i.peerId),
                                                            (o = i.kind),
                                                            (c = i.newState),
                                                            _._eventEmitter.emit(
                                                              "PARTICIPANT_MEDIA_STATE_CHANGED",
                                                              {
                                                                peerId: s,
                                                                kind: o,
                                                                newState: c,
                                                              }
                                                            ),
                                                            "video" == o &&
                                                              (null ===
                                                                (l =
                                                                  _._openTelemetry) ||
                                                                void 0 === l ||
                                                                l.traceAutoComplete(
                                                                  {
                                                                    spanName: ""
                                                                      .concat(
                                                                        s,
                                                                        " has "
                                                                      )
                                                                      .concat(
                                                                        c
                                                                          ? "enable"
                                                                          : "disable",
                                                                        " "
                                                                      )
                                                                      .concat(
                                                                        o
                                                                      ),
                                                                    status: 1,
                                                                  }
                                                                ));
                                                        } catch (e) {
                                                          Je.error(
                                                            '"newProducer" request failed:%o',
                                                            e
                                                          ),
                                                            null ===
                                                              (u =
                                                                _._videosdkLogs) ||
                                                              void 0 === u ||
                                                              u.pushLogs({
                                                                logText:
                                                                  "Error newProducer request failed",
                                                                logType:
                                                                  "ERROR",
                                                                attributes: {
                                                                  error:
                                                                    e.message,
                                                                },
                                                              });
                                                        }
                                                      case 10:
                                                        return (
                                                          (p = t.data),
                                                          (h = p.producerId),
                                                          (m = p.score),
                                                          He.dispatch(H(h, m)),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 13:
                                                        return (
                                                          (v = t.data),
                                                          (g = v.id),
                                                          (y = v.name),
                                                          (b =
                                                            null ===
                                                              (f =
                                                                _._openTelemetry) ||
                                                            void 0 === f
                                                              ? void 0
                                                              : f.trace({
                                                                  spanName:
                                                                    "Protoo Noti: entryRequested",
                                                                  span: _._joinSpan,
                                                                  attributes: {
                                                                    data: JSON.stringify(
                                                                      {
                                                                        id: g,
                                                                        name: y,
                                                                      }
                                                                    ),
                                                                  },
                                                                })),
                                                          g !== _._peerId
                                                            ? (_._eventEmitter.emit(
                                                                "ENTRY_REQUESTED",
                                                                {
                                                                  id: g,
                                                                  name: y,
                                                                }
                                                              ),
                                                              null ===
                                                                (w =
                                                                  _._openTelemetry) ||
                                                                void 0 === w ||
                                                                w.completeSpan({
                                                                  span: b,
                                                                  status: 1,
                                                                  message:
                                                                    "EntryResponded Recieved",
                                                                }))
                                                            : null ===
                                                                (S =
                                                                  _._openTelemetry) ||
                                                              void 0 === S ||
                                                              S.completeSpan({
                                                                span: b,
                                                                status: 2,
                                                                message:
                                                                  "Entry Request Failed",
                                                              }),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 17:
                                                        return (
                                                          (R = t.data),
                                                          (E = R.id),
                                                          (T = R.decision),
                                                          R.sessionId,
                                                          _._eventEmitter.emit(
                                                            "ENTRY_RESPONDED",
                                                            {
                                                              id: E,
                                                              decision: T,
                                                            }
                                                          ),
                                                          (P =
                                                            null ===
                                                              (k =
                                                                _._openTelemetry) ||
                                                            void 0 === k
                                                              ? void 0
                                                              : k.trace({
                                                                  spanName:
                                                                    "Protoo Noti: entryResponded",
                                                                  attributes: {
                                                                    data: JSON.stringify(
                                                                      {
                                                                        id: E,
                                                                        decision:
                                                                          T,
                                                                      }
                                                                    ),
                                                                  },
                                                                  span: _._joinSpan,
                                                                })),
                                                          E === _._peerId &&
                                                          "allowed" === T
                                                            ? (_.joinRoom(),
                                                              null ===
                                                                (C =
                                                                  _._openTelemetry) ||
                                                                void 0 === C ||
                                                                C.completeSpan({
                                                                  span: P,
                                                                  status: 1,
                                                                  message:
                                                                    "EntryResponded Recieved",
                                                                }))
                                                            : null ===
                                                                (x =
                                                                  _._openTelemetry) ||
                                                              void 0 === x ||
                                                              x.completeSpan({
                                                                span: _._joinSpan,
                                                                status: 2,
                                                                message:
                                                                  "Join Request Denied",
                                                              }),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 22:
                                                        (O = t.data),
                                                          (I = G(
                                                            Ve(
                                                              Ve({}, O),
                                                              {},
                                                              {
                                                                consumers: [],
                                                                dataConsumers:
                                                                  [],
                                                              }
                                                            )
                                                          )),
                                                          He.dispatch(I),
                                                          _._eventEmitter.emit(
                                                            I.type,
                                                            I.payload
                                                          ),
                                                          He.dispatch(
                                                            se({
                                                              text: "".concat(
                                                                O.displayName,
                                                                " has joined the room"
                                                              ),
                                                            })
                                                          );
                                                        try {
                                                          null ===
                                                            (M =
                                                              _._openTelemetry) ||
                                                            void 0 === M ||
                                                            M.traceAutoComplete(
                                                              {
                                                                spanName:
                                                                  "Protoo Noti: newPeer ".concat(
                                                                    O.displayName
                                                                  ),
                                                                attributes: {
                                                                  peerData:
                                                                    JSON.stringify(
                                                                      O
                                                                    ),
                                                                },
                                                              }
                                                            );
                                                        } catch (e) {
                                                          null ===
                                                            (L =
                                                              _._videosdkLogs) ||
                                                            void 0 === L ||
                                                            L.pushLogs({
                                                              logText:
                                                                "Error Protoo Noti: newPeer",
                                                              logType: "ERROR",
                                                              attributes: {
                                                                error:
                                                                  e.message,
                                                              },
                                                            }),
                                                            console.error(e);
                                                        }
                                                        return e.abrupt(
                                                          "break",
                                                          149
                                                        );
                                                      case 29:
                                                        return (
                                                          (j = t.data.peerId),
                                                          (N = K(j)),
                                                          He.dispatch(N),
                                                          _._eventEmitter.emit(
                                                            N.type,
                                                            N.payload
                                                          ),
                                                          null ===
                                                            (A =
                                                              _._openTelemetry) ||
                                                            void 0 === A ||
                                                            A.traceAutoComplete(
                                                              {
                                                                spanName:
                                                                  "Protoo Noti: peerClosed for ".concat(
                                                                    j
                                                                  ),
                                                              }
                                                            ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 35:
                                                        return (
                                                          (B = t.data),
                                                          (F = B.peerId),
                                                          (U = B.displayName),
                                                          (W =
                                                            B.oldDisplayName),
                                                          He.dispatch($(U, F)),
                                                          He.dispatch(
                                                            se({
                                                              text: ""
                                                                .concat(
                                                                  W,
                                                                  " is now "
                                                                )
                                                                .concat(U),
                                                            })
                                                          ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 39:
                                                        return (
                                                          Je.debug(
                                                            "'downlinkBwe' event:%o",
                                                            t.data
                                                          ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 41:
                                                        if (
                                                          ((Z =
                                                            t.data.consumerId),
                                                          (q =
                                                            _._consumers.get(
                                                              Z
                                                            )))
                                                        ) {
                                                          e.next = 45;
                                                          break;
                                                        }
                                                        return e.abrupt(
                                                          "break",
                                                          149
                                                        );
                                                      case 45:
                                                        return (
                                                          q.close(),
                                                          _._consumers.delete(
                                                            Z
                                                          ),
                                                          (z =
                                                            q.appData.peerId),
                                                          (J = Q(Z, z)),
                                                          He.dispatch(J),
                                                          _._eventEmitter.emit(
                                                            J.type,
                                                            J.payload
                                                          ),
                                                          null ===
                                                            (V =
                                                              _._openTelemetry) ||
                                                            void 0 === V ||
                                                            V.traceAutoComplete(
                                                              {
                                                                spanName:
                                                                  "Protoo Noti: consumerClosed for id ".concat(
                                                                    Z
                                                                  ),
                                                                attributes: {
                                                                  consumerData:
                                                                    JSON.stringify(
                                                                      q
                                                                    ),
                                                                },
                                                              }
                                                            ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 53:
                                                        if (
                                                          ((te =
                                                            t.data.consumerId),
                                                          (re =
                                                            _._consumers.get(
                                                              te
                                                            )))
                                                        ) {
                                                          e.next = 57;
                                                          break;
                                                        }
                                                        return e.abrupt(
                                                          "break",
                                                          149
                                                        );
                                                      case 57:
                                                        return (
                                                          re.pause(),
                                                          He.dispatch(
                                                            Y(te, "remote")
                                                          ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 60:
                                                        if (
                                                          ((ae =
                                                            t.data.consumerId),
                                                          (oe =
                                                            _._consumers.get(
                                                              ae
                                                            )))
                                                        ) {
                                                          e.next = 64;
                                                          break;
                                                        }
                                                        return e.abrupt(
                                                          "break",
                                                          149
                                                        );
                                                      case 64:
                                                        return (
                                                          oe.resume(),
                                                          He.dispatch(
                                                            X(ae, "remote")
                                                          ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 67:
                                                        if (
                                                          ((ce = t.data),
                                                          (de = ce.consumerId),
                                                          (le =
                                                            ce.spatialLayer),
                                                          (ue =
                                                            ce.temporalLayer),
                                                          ((pe =
                                                            _._consumers.get(
                                                              de
                                                            )).currentSpatialLayer =
                                                            le),
                                                          (pe.currentTemporalLayer =
                                                            ue),
                                                          pe)
                                                        ) {
                                                          e.next = 73;
                                                          break;
                                                        }
                                                        return e.abrupt(
                                                          "break",
                                                          149
                                                        );
                                                      case 73:
                                                        return (
                                                          pe.appData.encodings
                                                            .length > 1
                                                            ? (_._eventEmitter.emit(
                                                                "VIDEO_QUALITY_CHANGED",
                                                                {
                                                                  peerId:
                                                                    pe.appData
                                                                      .peerId,
                                                                  prevQuality:
                                                                    pe.spatialLayers -
                                                                      1 -
                                                                      pe.currentSpatialLayer ==
                                                                    0
                                                                      ? "HIGH"
                                                                      : pe.spatialLayers -
                                                                          1 -
                                                                          pe.currentSpatialLayer ==
                                                                        1
                                                                      ? "MEDIUM"
                                                                      : "LOW",
                                                                  currentQuality:
                                                                    pe.spatialLayers -
                                                                      1 -
                                                                      le ==
                                                                    0
                                                                      ? "HIGH"
                                                                      : pe.spatialLayers -
                                                                          1 -
                                                                          le ==
                                                                        1
                                                                      ? "MEDIUM"
                                                                      : "LOW",
                                                                }
                                                              ),
                                                              null ===
                                                                (he =
                                                                  _._videosdkLogs) ||
                                                                void 0 === he ||
                                                                he.pushLogs({
                                                                  logText:
                                                                    "Consumer Peer "
                                                                      .concat(
                                                                        pe
                                                                          .appData
                                                                          .peerId,
                                                                        " changed to "
                                                                      )
                                                                      .concat(
                                                                        pe.spatialLayers -
                                                                          1 -
                                                                          le ==
                                                                          0
                                                                          ? "HIGH"
                                                                          : pe.spatialLayers -
                                                                              1 -
                                                                              le ==
                                                                            1
                                                                          ? "MEDIUM"
                                                                          : "LOW",
                                                                        ", previous quality was "
                                                                      )
                                                                      .concat(
                                                                        pe.spatialLayers -
                                                                          1 -
                                                                          pe.currentSpatialLayer ==
                                                                          0
                                                                          ? "HIGH"
                                                                          : pe.spatialLayers -
                                                                              1 -
                                                                              pe.currentSpatialLayer ==
                                                                            1
                                                                          ? "MEDIUM"
                                                                          : "LOW"
                                                                      ),
                                                                  logType:
                                                                    "INFO",
                                                                  attributes: {
                                                                    consumerId:
                                                                      de,
                                                                  },
                                                                }))
                                                            : (_._eventEmitter.emit(
                                                                "VIDEO_QUALITY_CHANGED",
                                                                {
                                                                  peerId:
                                                                    pe.appData
                                                                      .peerId,
                                                                  prevQuality:
                                                                    "HIGH",
                                                                  currentQuality:
                                                                    "HIGH",
                                                                }
                                                              ),
                                                              null ===
                                                                (me =
                                                                  _._videosdkLogs) ||
                                                                void 0 === me ||
                                                                me.pushLogs({
                                                                  logText:
                                                                    "Consumer Peer ".concat(
                                                                      pe.appData
                                                                        .peerId,
                                                                      " changed to HIGH, previous quality was HIGH"
                                                                    ),
                                                                  logType:
                                                                    "INFO",
                                                                  attributes: {
                                                                    consumerId:
                                                                      de,
                                                                  },
                                                                })),
                                                          (pe.currentSpatialLayer =
                                                            le),
                                                          (pe.currentTemporalLayer =
                                                            ue),
                                                          He.dispatch(
                                                            ee(de, le, ue)
                                                          ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 78:
                                                        return (
                                                          (fe = t.data),
                                                          (ve = fe.consumerId),
                                                          (_e = fe.score),
                                                          He.dispatch(
                                                            ne(ve, _e)
                                                          ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 81:
                                                        if (
                                                          ((ge =
                                                            t.data
                                                              .dataConsumerId),
                                                          (ye =
                                                            _._dataConsumers.get(
                                                              ge
                                                            )))
                                                        ) {
                                                          e.next = 85;
                                                          break;
                                                        }
                                                        return e.abrupt(
                                                          "break",
                                                          149
                                                        );
                                                      case 85:
                                                        return (
                                                          ye.close(),
                                                          _._dataConsumers.delete(
                                                            ge
                                                          ),
                                                          (be =
                                                            ye.appData.peerId),
                                                          He.dispatch(
                                                            ie(ge, be)
                                                          ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 90:
                                                        return (
                                                          (we = t.data.peerId),
                                                          (Se = D(we)),
                                                          He.dispatch(Se),
                                                          _._eventEmitter.emit(
                                                            Se.type,
                                                            Se.payload
                                                          ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 95:
                                                        return (
                                                          _._eventEmitter.emit(
                                                            "RECORDING_STATE_CHANGED",
                                                            t.data
                                                          ),
                                                          null ===
                                                            (ke =
                                                              _._openTelemetry) ||
                                                            void 0 === ke ||
                                                            ke.traceAutoComplete(
                                                              {
                                                                spanName:
                                                                  "Emitted RECORDING_STATE_CHANGED, status : ".concat(
                                                                    t.data
                                                                      .status
                                                                  ),
                                                                attributes: {
                                                                  data: JSON.stringify(
                                                                    t.data
                                                                  ),
                                                                },
                                                                status: 1,
                                                              }
                                                            ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 98:
                                                        return (
                                                          _._eventEmitter.emit(
                                                            "RECORDING_STARTED",
                                                            {}
                                                          ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 100:
                                                        return (
                                                          _._eventEmitter.emit(
                                                            "RECORDING_STOPPED",
                                                            {}
                                                          ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 102:
                                                        return (
                                                          _._eventEmitter.emit(
                                                            "LIVESTREAM_STATE_CHANGED",
                                                            t.data
                                                          ),
                                                          null ===
                                                            (Re =
                                                              _._openTelemetry) ||
                                                            void 0 === Re ||
                                                            Re.traceAutoComplete(
                                                              {
                                                                spanName:
                                                                  "Emitted LIVESTREAM_STATE_CHANGED, status : ".concat(
                                                                    t.data
                                                                      .status
                                                                  ),
                                                                attributes: {
                                                                  data: JSON.stringify(
                                                                    t.data
                                                                  ),
                                                                },
                                                                status: 1,
                                                              }
                                                            ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 105:
                                                        return (
                                                          _._eventEmitter.emit(
                                                            "LIVESTREAM_STARTED",
                                                            {}
                                                          ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 107:
                                                        return (
                                                          _._eventEmitter.emit(
                                                            "LIVESTREAM_STOPPED",
                                                            {}
                                                          ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 109:
                                                        return (
                                                          _._eventEmitter.emit(
                                                            "HLS_STATE_CHANGED",
                                                            t.data
                                                          ),
                                                          null ===
                                                            (Ee =
                                                              _._openTelemetry) ||
                                                            void 0 === Ee ||
                                                            Ee.traceAutoComplete(
                                                              {
                                                                spanName:
                                                                  "Emitted HLS_STATE_CHANGED, status : ".concat(
                                                                    t.data
                                                                      .status
                                                                  ),
                                                                attributes: {
                                                                  data: JSON.stringify(
                                                                    t.data
                                                                  ),
                                                                },
                                                                status: 1,
                                                              }
                                                            ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 112:
                                                        return (
                                                          t.data.isPlayable &&
                                                            (_._eventEmitter.emit(
                                                              "HLS_STATE_CHANGED",
                                                              Ve(
                                                                Ve({}, t.data),
                                                                {},
                                                                {
                                                                  status:
                                                                    Ce.o
                                                                      .HLS_PLAYABLE,
                                                                }
                                                              )
                                                            ),
                                                            null ===
                                                              (Te =
                                                                _._openTelemetry) ||
                                                              void 0 === Te ||
                                                              Te.traceAutoComplete(
                                                                {
                                                                  spanName:
                                                                    "Protoo Noti: hlsPlayableStateChanged",
                                                                  status: 1,
                                                                }
                                                              )),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 114:
                                                        return (
                                                          (Pe =
                                                            t.data
                                                              .downstreamUrl),
                                                          _._eventEmitter.emit(
                                                            "HLS_STARTED",
                                                            Pe
                                                          ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 117:
                                                        return (
                                                          _._eventEmitter.emit(
                                                            "HLS_STOPPED",
                                                            {}
                                                          ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 119:
                                                        return (
                                                          (xe = t.data.state),
                                                          _._eventEmitter.emit(
                                                            "WHITEBOARD_STARTED",
                                                            { state: xe }
                                                          ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 122:
                                                        return (
                                                          _._eventEmitter.emit(
                                                            "WHITEBOARD_STOPPED",
                                                            {}
                                                          ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 124:
                                                        return (
                                                          _._eventEmitter.emit(
                                                            "VIDEO_STATE_CHANGED",
                                                            t.data
                                                          ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 126:
                                                        return (
                                                          (Oe =
                                                            t.data.currentTime),
                                                          _._eventEmitter.emit(
                                                            "VIDEO_SEEKED",
                                                            { currentTime: Oe }
                                                          ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 129:
                                                        return (
                                                          _._eventEmitter.emit(
                                                            "CONNECTION_OPEN",
                                                            t.data
                                                          ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 131:
                                                        return (
                                                          _._eventEmitter.emit(
                                                            "CONNECTION_CLOSE",
                                                            t.data
                                                          ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 133:
                                                        return (
                                                          _._eventEmitter.emit(
                                                            "CONNECTION_CHAT_MESSAGE",
                                                            t.data
                                                          ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 135:
                                                        return (
                                                          _._eventEmitter.emit(
                                                            "CONNECTION_PARTICIPANT_JOIN",
                                                            t.data
                                                          ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 137:
                                                        return (
                                                          _._eventEmitter.emit(
                                                            "CONNECTION_PARTICIPANT_LEFT",
                                                            t.data
                                                          ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 139:
                                                        return (
                                                          _._eventEmitter.emit(
                                                            "PUBSUB_MESSAGE",
                                                            t.data
                                                          ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 141:
                                                        return (
                                                          _._eventEmitter.emit(
                                                            "PEER_MODE_CHANGED",
                                                            t.data
                                                          ),
                                                          null ===
                                                            (De =
                                                              _._openTelemetry) ||
                                                            void 0 === De ||
                                                            De.traceAutoComplete(
                                                              {
                                                                spanName:
                                                                  "Emitted PEER_MODE_CHANGED",
                                                                attributes: {
                                                                  data: JSON.stringify(
                                                                    t.data
                                                                  ),
                                                                },
                                                                status: 1,
                                                              }
                                                            ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 144:
                                                        return (
                                                          (Me = t.data),
                                                          (Le = Me.transportId),
                                                          (Ae =
                                                            Me.iceParameters),
                                                          (je =
                                                            null ===
                                                              (Ie =
                                                                _._openTelemetry) ||
                                                            void 0 === Ie
                                                              ? void 0
                                                              : Ie.trace({
                                                                  spanName:
                                                                    "Protoo Noti: restartIce for transportId :".concat(
                                                                      Le
                                                                    ),
                                                                  attributes: {
                                                                    iceParameters:
                                                                      JSON.stringify(
                                                                        Ae
                                                                      ),
                                                                  },
                                                                })),
                                                          _.handleRemoteRestartIce(
                                                            {
                                                              transportId: Le,
                                                              iceParameters: Ae,
                                                              internalSpan: je,
                                                            }
                                                          ),
                                                          e.abrupt("break", 149)
                                                        );
                                                      case 148:
                                                        Je.error(
                                                          'unknown protoo notification.method "%s"',
                                                          t.method
                                                        );
                                                      case 149:
                                                      case "end":
                                                        return e.stop();
                                                    }
                                                }, e);
                                              })
                                            );
                                            return function (t) {
                                              return e.apply(this, arguments);
                                            };
                                          })()
                                        );
                                    case 28:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return Xt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "requestEntry",
                      value:
                        ((Yt = (0, a.Z)(
                          d().mark(function e() {
                            var t, r, n;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (n =
                                          null === (t = this._openTelemetry) ||
                                          void 0 === t
                                            ? void 0
                                            : t.trace({
                                                spanName: "Requesting Entry",
                                                span: this._joinSpan,
                                              })),
                                        (e.next = 3),
                                        this._protoo.request("requestEntry", {
                                          name: this._displayName,
                                        })
                                      );
                                    case 3:
                                      null === (r = this._openTelemetry) ||
                                        void 0 === r ||
                                        r.completeSpan({
                                          span: n,
                                          status: 1,
                                          message:
                                            "Entry Requested Successfully",
                                        });
                                    case 4:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return Yt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "respondEntry",
                      value:
                        ((Qt = (0, a.Z)(
                          d().mark(function e(t, r) {
                            var n, a, i;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (i =
                                          null === (n = this._openTelemetry) ||
                                          void 0 === n
                                            ? void 0
                                            : n.trace({
                                                spanName: "Responding Entry",
                                                attributes: {
                                                  peerId: t,
                                                  decision: r,
                                                },
                                                span: this._joinSpan,
                                              })),
                                        (e.next = 3),
                                        this._protoo.request("respondEntry", {
                                          id: t,
                                          decision: r,
                                        })
                                      );
                                    case 3:
                                      null === (a = this._openTelemetry) ||
                                        void 0 === a ||
                                        a.completeSpan({
                                          message:
                                            "Entry Responded Successfully",
                                          span: i,
                                          status: 1,
                                        });
                                    case 4:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e, t) {
                          return Qt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "startRecording",
                      value:
                        ((Jt = (0, a.Z)(
                          d().mark(function e(t, r, n) {
                            var a, i, s, o, c;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        Je.debug("startRecording()"),
                                        (s =
                                          null === (a = this._openTelemetry) ||
                                          void 0 === a
                                            ? void 0
                                            : a.trace({
                                                spanName:
                                                  "startRecording() Start",
                                                attributes: {
                                                  webhookUrl:
                                                    t ||
                                                    "webhookUrl Not Specify",
                                                  awsDirPath:
                                                    r ||
                                                    "awsDirPath Not Specify",
                                                  config: n
                                                    ? JSON.stringify(n)
                                                    : "config Not Specify",
                                                },
                                              })),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request("startRecording", {
                                          webhookUrl: t,
                                          awsDirPath: r,
                                          config: n,
                                        })
                                      );
                                    case 5:
                                      e.next = 13;
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(2)),
                                        Je.error(
                                          "startRecording() | failed:%o",
                                          e.t0
                                        ),
                                        null === (o = this._openTelemetry) ||
                                          void 0 === o ||
                                          o.completeSpan({
                                            span: s,
                                            status: 2,
                                            message: "startRecording() failed",
                                          }),
                                        null === (c = this._videosdkLogs) ||
                                          void 0 === c ||
                                          c.pushLogs({
                                            logText:
                                              "Error startRecording() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        this._emitError({
                                          code: 3017,
                                          message: e.t0.message,
                                        });
                                    case 13:
                                      null === (i = this._openTelemetry) ||
                                        void 0 === i ||
                                        i.completeSpan({
                                          span: s,
                                          status: 1,
                                          message: "startRecording() End",
                                        });
                                    case 14:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 7]]
                            );
                          })
                        )),
                        function (e, t, r) {
                          return Jt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "stopRecording",
                      value:
                        (($t = (0, a.Z)(
                          d().mark(function e() {
                            var t, r, n, a, i;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        Je.debug("stopRecording()"),
                                        (n =
                                          null === (t = this._openTelemetry) ||
                                          void 0 === t
                                            ? void 0
                                            : t.trace({
                                                spanName:
                                                  "stopRecording() Start",
                                              })),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request(
                                          "stopRecording",
                                          {}
                                        )
                                      );
                                    case 5:
                                      e.next = 12;
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(2)),
                                        null === (a = this._openTelemetry) ||
                                          void 0 === a ||
                                          a.completeSpan({
                                            span: n,
                                            status: 2,
                                            message: "stopRecording() failed",
                                          }),
                                        null === (i = this._videosdkLogs) ||
                                          void 0 === i ||
                                          i.pushLogs({
                                            logText:
                                              "Error stopRecording() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        this._emitError({
                                          code: 3018,
                                          message: e.t0.message,
                                        });
                                    case 12:
                                      null === (r = this._openTelemetry) ||
                                        void 0 === r ||
                                        r.completeSpan({
                                          span: n,
                                          status: 1,
                                          message: "stopRecording() End",
                                        });
                                    case 13:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 7]]
                            );
                          })
                        )),
                        function () {
                          return $t.apply(this, arguments);
                        }),
                    },
                    {
                      key: "startLivestream",
                      value:
                        ((Kt = (0, a.Z)(
                          d().mark(function e(t, r) {
                            var n, a, i, s, o;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        Je.debug("startLivestream()"),
                                        (i =
                                          null === (n = this._openTelemetry) ||
                                          void 0 === n
                                            ? void 0
                                            : n.trace({
                                                spanName:
                                                  "startLivestream() Start",
                                                attributes: {
                                                  outputs: t
                                                    ? JSON.stringify(t)
                                                    : "outputs Not Specify",
                                                  config: r
                                                    ? JSON.stringify(r)
                                                    : "config Not Specify",
                                                },
                                              })),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request(
                                          "startLivestream",
                                          { outputs: t, config: r }
                                        )
                                      );
                                    case 5:
                                      e.next = 12;
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(2)),
                                        null === (s = this._openTelemetry) ||
                                          void 0 === s ||
                                          s.completeSpan({
                                            span: i,
                                            status: 1,
                                            message: "startLivestream() End",
                                          }),
                                        null === (o = this._videosdkLogs) ||
                                          void 0 === o ||
                                          o.pushLogs({
                                            logText:
                                              "Error startLivestream() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        this._emitError({
                                          code: 3019,
                                          message: e.t0.message,
                                        });
                                    case 12:
                                      null === (a = this._openTelemetry) ||
                                        void 0 === a ||
                                        a.completeSpan({
                                          span: i,
                                          status: 1,
                                          message: "startLivestream() End",
                                        });
                                    case 13:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 7]]
                            );
                          })
                        )),
                        function (e, t) {
                          return Kt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "stopLivestream",
                      value:
                        ((Gt = (0, a.Z)(
                          d().mark(function e() {
                            var t, r, n, a, i;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        Je.debug("stopLivestream()"),
                                        (n =
                                          null === (t = this._openTelemetry) ||
                                          void 0 === t
                                            ? void 0
                                            : t.trace({
                                                spanName:
                                                  "stopLivestream() Start",
                                              })),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request(
                                          "stopLivestream",
                                          {}
                                        )
                                      );
                                    case 5:
                                      e.next = 12;
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(2)),
                                        null === (a = this._videosdkLogs) ||
                                          void 0 === a ||
                                          a.pushLogs({
                                            logText:
                                              "Error stopLivestream() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        null === (i = this._openTelemetry) ||
                                          void 0 === i ||
                                          i.completeSpan({
                                            span: n,
                                            status: 2,
                                            message:
                                              "Error stopLivestream() failed",
                                          }),
                                        this._emitError({
                                          code: 3020,
                                          message: e.t0.message,
                                        });
                                    case 12:
                                      null === (r = this._openTelemetry) ||
                                        void 0 === r ||
                                        r.completeSpan({
                                          span: n,
                                          status: 1,
                                          message: "stopLivestream() End",
                                        });
                                    case 13:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 7]]
                            );
                          })
                        )),
                        function () {
                          return Gt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "startHls",
                      value:
                        ((zt = (0, a.Z)(
                          d().mark(function e(t) {
                            var r, n, a, i, s;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (t = t || {}),
                                        Je.debug("startHls()"),
                                        (a =
                                          null === (r = this._openTelemetry) ||
                                          void 0 === r
                                            ? void 0
                                            : r.trace({
                                                spanName: "startHls() Start",
                                                attributes: {
                                                  config: t
                                                    ? JSON.stringify(t)
                                                    : "config Not Specify",
                                                },
                                              })),
                                        (e.prev = 3),
                                        (e.next = 6),
                                        this._protoo.request("startHls", {
                                          config: t,
                                        })
                                      );
                                    case 6:
                                      e.next = 13;
                                      break;
                                    case 8:
                                      (e.prev = 8),
                                        (e.t0 = e.catch(3)),
                                        null === (i = this._videosdkLogs) ||
                                          void 0 === i ||
                                          i.pushLogs({
                                            logText: "Error startHls() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        null === (s = this._openTelemetry) ||
                                          void 0 === s ||
                                          s.completeSpan({
                                            span: a,
                                            status: 2,
                                            message: "Error startHls() failed",
                                          }),
                                        Je.error(
                                          "startHls() | failed:%o",
                                          e.t0
                                        );
                                    case 13:
                                      null === (n = this._openTelemetry) ||
                                        void 0 === n ||
                                        n.completeSpan({
                                          span: a,
                                          status: 1,
                                          message: "startHlsSpan() End",
                                        });
                                    case 14:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[3, 8]]
                            );
                          })
                        )),
                        function (e) {
                          return zt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "stopHls",
                      value:
                        ((qt = (0, a.Z)(
                          d().mark(function e() {
                            var t, r, n, a, i;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        Je.debug("stopHls()"),
                                        (n =
                                          null === (t = this._openTelemetry) ||
                                          void 0 === t
                                            ? void 0
                                            : t.trace({
                                                spanName: "stopHls() Start",
                                              })),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request("stopHls", {})
                                      );
                                    case 5:
                                      e.next = 11;
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(2)),
                                        null === (a = this._videosdkLogs) ||
                                          void 0 === a ||
                                          a.pushLogs({
                                            logText: "Error stopHls() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        null === (i = this._openTelemetry) ||
                                          void 0 === i ||
                                          i.completeSpan({
                                            span: n,
                                            status: 2,
                                            message: "Error stopHls() failed",
                                          });
                                    case 11:
                                      null === (r = this._openTelemetry) ||
                                        void 0 === r ||
                                        r.completeSpan({
                                          span: n,
                                          status: 1,
                                          message: "stopHls() End",
                                        });
                                    case 12:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 7]]
                            );
                          })
                        )),
                        function () {
                          return qt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "startWhiteboard",
                      value:
                        ((Zt = (0, a.Z)(
                          d().mark(function e() {
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        Je.debug("startWhiteboard()"),
                                        (e.prev = 1),
                                        (e.next = 4),
                                        this._protoo.request(
                                          "startWhiteboard",
                                          {}
                                        )
                                      );
                                    case 4:
                                      e.next = 10;
                                      break;
                                    case 6:
                                      (e.prev = 6),
                                        (e.t0 = e.catch(1)),
                                        Je.error(
                                          "startWhiteboard() | failed:%o",
                                          e.t0
                                        ),
                                        this._emitError({
                                          code: 3021,
                                          message: e.t0.message,
                                        });
                                    case 10:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[1, 6]]
                            );
                          })
                        )),
                        function () {
                          return Zt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "stopWhiteboard",
                      value:
                        ((Ht = (0, a.Z)(
                          d().mark(function e() {
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        Je.debug("stopWhiteboard()"),
                                        (e.prev = 1),
                                        (e.next = 4),
                                        this._protoo.request(
                                          "stopWhiteboard",
                                          {}
                                        )
                                      );
                                    case 4:
                                      e.next = 10;
                                      break;
                                    case 6:
                                      (e.prev = 6),
                                        (e.t0 = e.catch(1)),
                                        Je.error(
                                          "stopWhiteboard() | failed:%o",
                                          e.t0
                                        ),
                                        this._emitError({
                                          code: 3022,
                                          message: e.t0.message,
                                        });
                                    case 10:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[1, 6]]
                            );
                          })
                        )),
                        function () {
                          return Ht.apply(this, arguments);
                        }),
                    },
                    {
                      key: "pinStateChange",
                      value:
                        ((Vt = (0, a.Z)(
                          d().mark(function e(t) {
                            var r, n, a, i;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (n = t.peerId),
                                        (a = t.state),
                                        null === (r = this._openTelemetry) ||
                                          void 0 === r ||
                                          r.traceAutoComplete({
                                            spanName:
                                              "Pin state Change for ".concat(n),
                                            attributes: {
                                              state: a
                                                ? JSON.stringify(a)
                                                : null,
                                            },
                                            status: 1,
                                          }),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request(
                                          "pinStateChanged",
                                          { peerId: n, state: a }
                                        )
                                      );
                                    case 5:
                                      e.next = 11;
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(2)),
                                        null === (i = this._videosdkLogs) ||
                                          void 0 === i ||
                                          i.pushLogs({
                                            logText:
                                              "Error pinStateChange() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        Je.error("pinStateChange() | failed");
                                    case 11:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 7]]
                            );
                          })
                        )),
                        function (e) {
                          return Vt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "startVideo",
                      value:
                        ((Wt = (0, a.Z)(
                          d().mark(function e(t) {
                            var r, n, a;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (n = t.link),
                                        Je.debug("startVideo()"),
                                        null === (r = this._videosdkLogs) ||
                                          void 0 === r ||
                                          r.pushLogs({
                                            logText: "startVideo() Calling",
                                            logType: "INFO",
                                          }),
                                        (e.prev = 3),
                                        (e.next = 6),
                                        this._protoo.request("startVideo", {
                                          link: n,
                                        })
                                      );
                                    case 6:
                                      e.next = 13;
                                      break;
                                    case 8:
                                      (e.prev = 8),
                                        (e.t0 = e.catch(3)),
                                        null === (a = this._videosdkLogs) ||
                                          void 0 === a ||
                                          a.pushLogs({
                                            logText:
                                              "Error startVideo() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        Je.error(
                                          "startVideo() | failed:%o",
                                          e.t0
                                        ),
                                        this._emitError({
                                          code: 3023,
                                          message: e.t0.message,
                                        });
                                    case 13:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[3, 8]]
                            );
                          })
                        )),
                        function (e) {
                          return Wt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "stopVideo",
                      value:
                        ((Ut = (0, a.Z)(
                          d().mark(function e() {
                            var t, r;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        Je.debug("stopVideo()"),
                                        null === (t = this._videosdkLogs) ||
                                          void 0 === t ||
                                          t.pushLogs({
                                            logText: "stopVideo() Calling",
                                            logType: "INFO",
                                          }),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request("stopVideo", {})
                                      );
                                    case 5:
                                      e.next = 12;
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(2)),
                                        null === (r = this._videosdkLogs) ||
                                          void 0 === r ||
                                          r.pushLogs({
                                            logText: "Error stopVideo() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        Je.error(
                                          "stopVideo() | failed:%o",
                                          e.t0
                                        ),
                                        this._emitError({
                                          code: 3024,
                                          message: e.t0.message,
                                        });
                                    case 12:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 7]]
                            );
                          })
                        )),
                        function () {
                          return Ut.apply(this, arguments);
                        }),
                    },
                    {
                      key: "pauseVideo",
                      value:
                        ((Ft = (0, a.Z)(
                          d().mark(function e(t) {
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        Je.debug("pauseVideo()"),
                                        (e.prev = 1),
                                        (e.next = 4),
                                        this._protoo.request("pauseVideo", {
                                          currentTime: t,
                                        })
                                      );
                                    case 4:
                                      e.next = 10;
                                      break;
                                    case 6:
                                      (e.prev = 6),
                                        (e.t0 = e.catch(1)),
                                        Je.error(
                                          "pauseVideo() | failed:%o",
                                          e.t0
                                        ),
                                        this._emitError({
                                          code: 3025,
                                          message: e.t0.message,
                                        });
                                    case 10:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[1, 6]]
                            );
                          })
                        )),
                        function (e) {
                          return Ft.apply(this, arguments);
                        }),
                    },
                    {
                      key: "resumeVideo",
                      value:
                        ((Bt = (0, a.Z)(
                          d().mark(function e() {
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        Je.debug("resumeVideo()"),
                                        (e.prev = 1),
                                        (e.next = 4),
                                        this._protoo.request("resumeVideo", {})
                                      );
                                    case 4:
                                      e.next = 10;
                                      break;
                                    case 6:
                                      (e.prev = 6),
                                        (e.t0 = e.catch(1)),
                                        Je.error(
                                          "resumeVideo() | failed:%o",
                                          e.t0
                                        ),
                                        this._emitError({
                                          code: 3026,
                                          message: e.t0.message,
                                        });
                                    case 10:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[1, 6]]
                            );
                          })
                        )),
                        function () {
                          return Bt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "seekVideo",
                      value:
                        ((Nt = (0, a.Z)(
                          d().mark(function e(t) {
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        Je.debug("seekVideo()"),
                                        (e.prev = 1),
                                        (e.next = 4),
                                        this._protoo.request("seekVideo", {
                                          currentTime: t,
                                        })
                                      );
                                    case 4:
                                      e.next = 10;
                                      break;
                                    case 6:
                                      (e.prev = 6),
                                        (e.t0 = e.catch(1)),
                                        Je.error(
                                          "seekVideo() | failed:%o",
                                          e.t0
                                        ),
                                        this._emitError({
                                          code: 3031,
                                          message: e.t0.message,
                                        });
                                    case 10:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[1, 6]]
                            );
                          })
                        )),
                        function (e) {
                          return Nt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "enablePeerMic",
                      value:
                        ((jt = (0, a.Z)(
                          d().mark(function e(t) {
                            var r, n;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        null === (r = this._openTelemetry) ||
                                          void 0 === r ||
                                          r.traceAutoComplete({
                                            spanName: "Enabling peer ".concat(
                                              t,
                                              " Mic"
                                            ),
                                            status: 1,
                                          }),
                                        Je.debug("enablePeerMic()"),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request("enablePeerMic", {
                                          peerId: t,
                                        })
                                      );
                                    case 5:
                                      e.next = 11;
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(2)),
                                        null === (n = this._videosdkLogs) ||
                                          void 0 === n ||
                                          n.pushLogs({
                                            logText:
                                              "Error enablePeerMic() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        Je.error(
                                          "enablePeerMic() | failed:%o",
                                          e.t0
                                        );
                                    case 11:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 7]]
                            );
                          })
                        )),
                        function (e) {
                          return jt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "disablePeerMic",
                      value:
                        ((At = (0, a.Z)(
                          d().mark(function e(t) {
                            var r, n;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        null === (r = this._openTelemetry) ||
                                          void 0 === r ||
                                          r.traceAutoComplete({
                                            spanName: "Disabling peer ".concat(
                                              t,
                                              " Mic"
                                            ),
                                            status: 1,
                                          }),
                                        Je.debug("disablePeerMic()"),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request("disablePeerMic", {
                                          peerId: t,
                                        })
                                      );
                                    case 5:
                                      e.next = 11;
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(2)),
                                        null === (n = this._videosdkLogs) ||
                                          void 0 === n ||
                                          n.pushLogs({
                                            logText:
                                              "Error disablePeerMic() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        Je.error(
                                          "disablePeerMic() | failed:%o",
                                          e.t0
                                        );
                                    case 11:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 7]]
                            );
                          })
                        )),
                        function (e) {
                          return At.apply(this, arguments);
                        }),
                    },
                    {
                      key: "consumeWebcamStreams",
                      value:
                        ((Lt = (0, a.Z)(
                          d().mark(function e(t) {
                            var r, n;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        Je.debug("consumeWebcamStreams()"),
                                        null === (r = this._videosdkLogs) ||
                                          void 0 === r ||
                                          r.pushLogs({
                                            logText:
                                              "consumeWebcamStreams() Calling",
                                            logType: "INFO",
                                            attributes: { peerId: t },
                                          }),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request(
                                          "consumeVideoStreams",
                                          { peerId: t }
                                        )
                                      );
                                    case 5:
                                      e.next = 11;
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(2)),
                                        null === (n = this._videosdkLogs) ||
                                          void 0 === n ||
                                          n.pushLogs({
                                            logText:
                                              "Error consumeWebcamStreams() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        Je.error(
                                          "consumeWebcamStreams() | failed:%o",
                                          e.t0
                                        );
                                    case 11:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 7]]
                            );
                          })
                        )),
                        function (e) {
                          return Lt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "consumeMicStreams",
                      value:
                        ((Mt = (0, a.Z)(
                          d().mark(function e(t) {
                            var r, n;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        Je.debug("consumeMicStreams()"),
                                        null === (r = this._videosdkLogs) ||
                                          void 0 === r ||
                                          r.pushLogs({
                                            logText:
                                              "consumeMicStreams() Calling",
                                            logType: "INFO",
                                            attributes: { peerId: t },
                                          }),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request(
                                          "consumeAudioStreams",
                                          { peerId: t }
                                        )
                                      );
                                    case 5:
                                      e.next = 11;
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(2)),
                                        null === (n = this._videosdkLogs) ||
                                          void 0 === n ||
                                          n.pushLogs({
                                            logText:
                                              "Error consumeMicStreams() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        Je.error(
                                          "consumeMicStreams() | failed:%o",
                                          e.t0
                                        );
                                    case 11:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 7]]
                            );
                          })
                        )),
                        function (e) {
                          return Mt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "stopConsumingMicStreams",
                      value:
                        ((It = (0, a.Z)(
                          d().mark(function e(t) {
                            var r, n;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        Je.debug("stopConsumingAudioStreams()"),
                                        null === (r = this._videosdkLogs) ||
                                          void 0 === r ||
                                          r.pushLogs({
                                            logText:
                                              "Error stopConsumingAudioStreams() Calling",
                                            logType: "INFO",
                                            attributes: { peerId: t },
                                          }),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request(
                                          "stopConsumingAudioStreams",
                                          { peerId: t }
                                        )
                                      );
                                    case 5:
                                      e.next = 11;
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(2)),
                                        null === (n = this._videosdkLogs) ||
                                          void 0 === n ||
                                          n.pushLogs({
                                            logText:
                                              "Error stopConsumingMicStreams() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        Je.error(
                                          "stopConsumingMicStreams() | failed:%o",
                                          e.t0
                                        );
                                    case 11:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 7]]
                            );
                          })
                        )),
                        function (e) {
                          return It.apply(this, arguments);
                        }),
                    },
                    {
                      key: "stopConsumingWebcamStreams",
                      value:
                        ((Dt = (0, a.Z)(
                          d().mark(function e(t) {
                            var r, n;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        Je.debug(
                                          "stopConsumingWebcamStreams()"
                                        ),
                                        null === (r = this._videosdkLogs) ||
                                          void 0 === r ||
                                          r.pushLogs({
                                            logText:
                                              "stopConsumingWebcamStreams() Calling",
                                            logType: "INFO",
                                            attributes: { peerId: t },
                                          }),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request(
                                          "stopConsumingVideoStreams",
                                          { peerId: t }
                                        )
                                      );
                                    case 5:
                                      e.next = 11;
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(2)),
                                        null === (n = this._videosdkLogs) ||
                                          void 0 === n ||
                                          n.pushLogs({
                                            logText:
                                              "Error stopConsumingWebcamStreams() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        Je.error(
                                          "stopConsumingWebcamStreams() | failed:%o",
                                          e.t0
                                        );
                                    case 11:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 7]]
                            );
                          })
                        )),
                        function (e) {
                          return Dt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "changeMode",
                      value:
                        ((Ot = (0, a.Z)(
                          d().mark(function e(t) {
                            var r,
                              n,
                              a,
                              i,
                              s,
                              o,
                              c,
                              l,
                              p,
                              h,
                              m,
                              f,
                              v,
                              _,
                              g,
                              y,
                              b,
                              w,
                              S,
                              k,
                              R,
                              E,
                              T,
                              C,
                              x,
                              O,
                              D,
                              L = this;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        ((n =
                                          null === (r = this._openTelemetry) ||
                                          void 0 === r
                                            ? void 0
                                            : r.trace({
                                                spanName:
                                                  "changeMode() Calling with mode : ".concat(
                                                    t
                                                  ),
                                              })),
                                        (a = this._mode),
                                        (e.prev = 2),
                                        a !== t)
                                      ) {
                                        e.next = 7;
                                        break;
                                      }
                                      throw (
                                        (null === (i = this._openTelemetry) ||
                                          void 0 === i ||
                                          i.completeSpan({
                                            span: n,
                                            status: 2,
                                            message: "changeMode() Ending",
                                          }),
                                        null === (s = this._videosdkLogs) ||
                                          void 0 === s ||
                                          s.pushLogs({
                                            logText:
                                              "You are already in ".concat(
                                                t,
                                                " mode"
                                              ),
                                            logType: "INFO",
                                          }),
                                        new Error(
                                          "You are already in ".concat(
                                            t,
                                            " mode"
                                          )
                                        ))
                                      );
                                    case 7:
                                      if (
                                        ((this._mode = t),
                                        t !== Pe.S.CONFERENCE)
                                      ) {
                                        e.next = 38;
                                        break;
                                      }
                                      return (
                                        (this._consume = !0),
                                        (this._produce = !0),
                                        (this._mediasoupDevice = new u.Device({
                                          handlerName: this._handlerName,
                                        })),
                                        (e.next = 14),
                                        this._protoo.request(
                                          "getRouterRtpCapabilities"
                                        )
                                      );
                                    case 14:
                                      return (
                                        (l = e.sent),
                                        (e.next = 17),
                                        this._mediasoupDevice.load({
                                          routerRtpCapabilities: l,
                                        })
                                      );
                                    case 17:
                                      if (!this._produce) {
                                        e.next = 22;
                                        break;
                                      }
                                      return (
                                        (e.next = 20),
                                        this._protoo.request(
                                          "createWebRtcTransport",
                                          {
                                            preferredProtocol:
                                              this._preferredProtocol,
                                            producing: !0,
                                            consuming: !1,
                                            sctpCapabilities: this
                                              ._useDataChannel
                                              ? this._mediasoupDevice
                                                  .sctpCapabilities
                                              : void 0,
                                          }
                                        )
                                      );
                                    case 20:
                                      (p = e.sent),
                                        this.createProducerTransport(p, n);
                                    case 22:
                                      if (!this._consume) {
                                        e.next = 29;
                                        break;
                                      }
                                      return (
                                        (e.next = 25),
                                        this._protoo.request(
                                          "createWebRtcTransport",
                                          {
                                            preferredProtocol:
                                              this._preferredProtocol,
                                            producing: !1,
                                            consuming: !0,
                                            sctpCapabilities: this
                                              ._useDataChannel
                                              ? this._mediasoupDevice
                                                  .sctpCapabilities
                                              : void 0,
                                          }
                                        )
                                      );
                                    case 25:
                                      (h = e.sent),
                                        (m = h.id),
                                        (f = h.iceParameters),
                                        (v = h.iceCandidates),
                                        (_ = h.dtlsParameters),
                                        (g = h.sctpParameters),
                                        (this._recvTransport =
                                          this._mediasoupDevice.createRecvTransport(
                                            {
                                              id: m,
                                              iceParameters: f,
                                              iceCandidates: v,
                                              dtlsParameters: _,
                                              sctpParameters: g,
                                              iceServers: this._iceServers,
                                            }
                                          )),
                                        this._recvTransport.on(
                                          "connect",
                                          function (e, t, r) {
                                            var n = e.dtlsParameters;
                                            L._protoo
                                              .request(
                                                "connectWebRtcTransport",
                                                {
                                                  transportId:
                                                    L._recvTransport.id,
                                                  dtlsParameters: n,
                                                }
                                              )
                                              .then(t)
                                              .catch(r);
                                          }
                                        );
                                    case 29:
                                      return (
                                        null === (o = this._openTelemetry) ||
                                          void 0 === o ||
                                          o.traceAutoComplete({
                                            spanName:
                                              "Sending changeMode request to server",
                                            span: n,
                                            status: 1,
                                          }),
                                        (e.next = 32),
                                        this._protoo.request("changeMode", {
                                          mode: t,
                                        })
                                      );
                                    case 32:
                                      this._produce &&
                                        (He.dispatch(
                                          M({
                                            canSendMic:
                                              this._mediasoupDevice.canProduce(
                                                "audio"
                                              ),
                                            canSendWebcam:
                                              this._mediasoupDevice.canProduce(
                                                "video"
                                              ),
                                          })
                                        ),
                                        this._micEnabled &&
                                          this.enableMic(
                                            this.customMicrophoneAudioTrack
                                          ),
                                        (y = P()),
                                        this._webcamEnabled &&
                                          (!y ||
                                            y.webcamEnabled ||
                                            this._externalVideo) &&
                                          this.enableWebcam(
                                            this.customCameraVideoTrack,
                                            n
                                          ),
                                        this.enableChatDataProducer()),
                                        window.SHOW_INFO &&
                                          ((b = He.getState()),
                                          (w = b.me),
                                          He.dispatch(I(w.id))),
                                        null === (c = this._openTelemetry) ||
                                          void 0 === c ||
                                          c.traceAutoComplete({
                                            spanName:
                                              "Emitting PEER_MODE_CHANGED for Peer : ".concat(
                                                this._peerId,
                                                " "
                                              ),
                                            span: n,
                                            status: 1,
                                          }),
                                        this._eventEmitter.emit(
                                          "PEER_MODE_CHANGED",
                                          {
                                            peerId: this._peerId,
                                            mode: "CONFERENCE",
                                          }
                                        ),
                                        (e.next = 52);
                                      break;
                                    case 38:
                                      if (t !== Pe.S.VIEWER) {
                                        e.next = 52;
                                        break;
                                      }
                                      return (
                                        null === (S = this._openTelemetry) ||
                                          void 0 === S ||
                                          S.traceAutoComplete({
                                            spanName:
                                              "Sending changeMode request to server",
                                            span: n,
                                            status: 1,
                                          }),
                                        (e.next = 42),
                                        this._protoo.request("changeMode", {
                                          mode: t,
                                        })
                                      );
                                    case 42:
                                      (this._consume = !1),
                                        (this._produce = !1),
                                        this._dataConsumers.clear(),
                                        (x =
                                          null === (k = this._openTelemetry) ||
                                          void 0 === k
                                            ? void 0
                                            : k.trace({
                                                spanName: "Closing Trasnport",
                                                span: n,
                                              })),
                                        null === (R = this._sendTransport) ||
                                          void 0 === R ||
                                          R.close(),
                                        (this._sendTransport = null),
                                        null === (E = this._recvTransport) ||
                                          void 0 === E ||
                                          E.close(),
                                        (this._recvTransport = null),
                                        null === (T = this._openTelemetry) ||
                                          void 0 === T ||
                                          T.completeSpan({
                                            span: x,
                                            status: 1,
                                            message: "Closed Trasnport",
                                          }),
                                        null === (C = this._openTelemetry) ||
                                          void 0 === C ||
                                          C.completeSpan({
                                            span: x,
                                            status: 1,
                                            message: "changeMode() Ending",
                                          });
                                    case 52:
                                      e.next = 58;
                                      break;
                                    case 54:
                                      (e.prev = 54),
                                        (e.t0 = e.catch(2)),
                                        null === (O = this._videosdkLogs) ||
                                          void 0 === O ||
                                          O.pushLogs({
                                            logText: "Error changeMode(".concat(
                                              t,
                                              ") | failed"
                                            ),
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        null === (D = this._openTelemetry) ||
                                          void 0 === D ||
                                          D.completeSpan({
                                            span: n,
                                            status: 2,
                                            message: "changeMode(".concat(
                                              t,
                                              ") | failed"
                                            ),
                                          });
                                    case 58:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 54]]
                            );
                          })
                        )),
                        function (e) {
                          return Ot.apply(this, arguments);
                        }),
                    },
                    {
                      key: "enablePeerWebcam",
                      value:
                        ((xt = (0, a.Z)(
                          d().mark(function e(t) {
                            var r, n;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        null === (r = this._openTelemetry) ||
                                          void 0 === r ||
                                          r.traceAutoComplete({
                                            spanName: "Enabling peer ".concat(
                                              t,
                                              " Webcam"
                                            ),
                                            status: 1,
                                          }),
                                        Je.debug("enablePeerWebcam()"),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request(
                                          "enablePeerWebcam",
                                          { peerId: t }
                                        )
                                      );
                                    case 5:
                                      e.next = 11;
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(2)),
                                        null === (n = this._videosdkLogs) ||
                                          void 0 === n ||
                                          n.pushLogs({
                                            logText:
                                              "Error enablePeerWebcam | failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        Je.error(
                                          "enablePeerWebcam() | failed:%o",
                                          e.t0
                                        );
                                    case 11:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 7]]
                            );
                          })
                        )),
                        function (e) {
                          return xt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "disablePeerWebcam",
                      value:
                        ((Ct = (0, a.Z)(
                          d().mark(function e(t) {
                            var r, n;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        null === (r = this._openTelemetry) ||
                                          void 0 === r ||
                                          r.traceAutoComplete({
                                            spanName: "Disabling peer ".concat(
                                              t,
                                              " Webcam"
                                            ),
                                            status: 1,
                                          }),
                                        Je.debug("disablePeerWebcam()"),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request(
                                          "disablePeerWebcam",
                                          { peerId: t }
                                        )
                                      );
                                    case 5:
                                      e.next = 10;
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(2)),
                                        null === (n = this._videosdkLogs) ||
                                          void 0 === n ||
                                          n.pushLogs({
                                            logText:
                                              "Error disablePeerWebcam | failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          });
                                    case 10:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 7]]
                            );
                          })
                        )),
                        function (e) {
                          return Ct.apply(this, arguments);
                        }),
                    },
                    {
                      key: "enableMic",
                      value:
                        ((Pt = (0, a.Z)(
                          d().mark(function e() {
                            var t,
                              r,
                              n,
                              a,
                              i,
                              s,
                              o,
                              c,
                              l,
                              u,
                              p,
                              h,
                              m,
                              f,
                              v,
                              _,
                              g,
                              y,
                              b,
                              w,
                              S,
                              k,
                              R,
                              E,
                              T,
                              P,
                              C,
                              x,
                              O,
                              D,
                              I,
                              M,
                              L,
                              A,
                              j,
                              N,
                              B,
                              F,
                              V = this,
                              H = arguments;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        ((r =
                                          H.length > 0 && void 0 !== H[0]
                                            ? H[0]
                                            : void 0),
                                        (n =
                                          H.length > 1 && void 0 !== H[1]
                                            ? H[1]
                                            : void 0),
                                        (a =
                                          null === (t = this._openTelemetry) ||
                                          void 0 === t
                                            ? void 0
                                            : t.trace({
                                                spanName:
                                                  "enableMic() Calling ".concat(
                                                    r
                                                      ? "With Custom Audio Track"
                                                      : "Without Custom Audio Track "
                                                  ),
                                                attributes: {
                                                  customAudioConfig: r
                                                    ? JSON.stringify(r)
                                                    : "Not Specify Custom Track",
                                                },
                                                span: n || null,
                                              })),
                                        Je.debug("enableMic()"),
                                        (this._micEnabled = !0),
                                        !this._micProducer)
                                      ) {
                                        e.next = 20;
                                        break;
                                      }
                                      return (
                                        (c =
                                          null === (i = this._openTelemetry) ||
                                          void 0 === i
                                            ? void 0
                                            : i.trace({
                                                spanName: "Mic Producer found",
                                                span: a,
                                              })),
                                        r &&
                                          (null === (l = this._openTelemetry) ||
                                            void 0 === l ||
                                            l.traceAutoComplete({
                                              spanName:
                                                "Stopping customAudioTrack",
                                              span: a,
                                              status: 1,
                                            }),
                                          r.getTracks().forEach(function (e) {
                                            e.stop();
                                          })),
                                        null === (s = this._openTelemetry) ||
                                          void 0 === s ||
                                          s.completeSpan({
                                            span: c,
                                            status: 1,
                                            message: "Resuming Mic Producer",
                                          }),
                                        this._micProducer.resume(),
                                        (u = this._micProducer),
                                        (e.next = 13),
                                        this._sendTransport.produce({
                                          track: this._micProducer.track,
                                          encodings:
                                            this._micProducer._appData
                                              .encodings,
                                          codecOptions:
                                            this._micProducer._appData
                                              .codecOptions,
                                        })
                                      );
                                    case 13:
                                      return (
                                        (this._micProducer = e.sent),
                                        (p = U({
                                          id: this._micProducer.id,
                                          paused: this._micProducer.paused,
                                          track: this._micProducer.track,
                                          rtpParameters:
                                            this._micProducer.rtpParameters,
                                          codec:
                                            this._micProducer.rtpParameters.codecs[0].mimeType.split(
                                              "/"
                                            )[1],
                                          encodings: u._appData.encodings,
                                          codecOptions: u._appData.codecOptions,
                                          instance: this._micProducer,
                                        })),
                                        this._micProducer.track.getConstraints()
                                          .deviceId &&
                                          (this._mic.device = this._mics.get(
                                            this._micProducer.track.getConstraints()
                                              .deviceId
                                          )),
                                        He.dispatch(p),
                                        this._eventEmitter.emit(
                                          p.type,
                                          p.payload
                                        ),
                                        null === (o = this._openTelemetry) ||
                                          void 0 === o ||
                                          o.completeSpan({
                                            span: a,
                                            status: 1,
                                            message: "Enable Mic Successful",
                                          }),
                                        e.abrupt("return")
                                      );
                                    case 20:
                                      if (
                                        this._mediasoupDevice.canProduce(
                                          "audio"
                                        )
                                      ) {
                                        e.next = 24;
                                        break;
                                      }
                                      return (
                                        Je.error(
                                          "enableMic() | cannot produce audio"
                                        ),
                                        null === (h = this._openTelemetry) ||
                                          void 0 === h ||
                                          h.completeSpan({
                                            span: a,
                                            status: 2,
                                            message:
                                              'enableMic() | cannot produce audio"',
                                          }),
                                        e.abrupt("return")
                                      );
                                    case 24:
                                      if (
                                        ((e.prev = 24), this._externalVideo)
                                      ) {
                                        e.next = 52;
                                        break;
                                      }
                                      return (
                                        Je.debug(
                                          "enableMic() | calling getUserMedia()"
                                        ),
                                        (e.next = 29),
                                        this._updateMics(a)
                                      );
                                    case 29:
                                      if (this._mic.device) {
                                        e.next = 33;
                                        break;
                                      }
                                      throw (
                                        (null === (w = this._openTelemetry) ||
                                          void 0 === w ||
                                          w.traceAutoComplete({
                                            spanName: "Mic Device Not Found",
                                            span: a,
                                            status: 2,
                                          }),
                                        null === (S = this._videosdkLogs) ||
                                          void 0 === S ||
                                          S.pushLogs({
                                            logText:
                                              "Error Mic Device Not Found",
                                            logType: "ERROR",
                                          }),
                                        new Error("no mic devices"))
                                      );
                                    case 33:
                                      try {
                                        r &&
                                          "ended" ==
                                            (m = r.getAudioTracks()[0])
                                              .readyState &&
                                          ((m = null),
                                          null === (k = this._openTelemetry) ||
                                            void 0 === k ||
                                            k.traceAutoComplete({
                                              spanName:
                                                "Dispose Audio Custom Track, it is in ended state",
                                              span: a,
                                              status: 2,
                                            }));
                                      } catch (e) {
                                        null === (R = this._videosdkLogs) ||
                                          void 0 === R ||
                                          R.pushLogs({
                                            logText:
                                              "Error Invalid Custom Audio Track Passed. Reverting to default Error",
                                            logType: "ERROR",
                                            attributes: { error: e.message },
                                          }),
                                          console.log(
                                            "Invalid Custom Audio Track Passed. Reverting to default Error: ".concat(
                                              e
                                            )
                                          );
                                      }
                                      if (m) {
                                        e.next = 50;
                                        break;
                                      }
                                      return (
                                        (P =
                                          null === (E = this._openTelemetry) ||
                                          void 0 === E
                                            ? void 0
                                            : E.trace({
                                                spanName: "Creating Track",
                                                span: a,
                                              })),
                                        (e.prev = 36),
                                        (e.next = 39),
                                        navigator.mediaDevices.getUserMedia({
                                          audio: {
                                            deviceId: {
                                              ideal: this._mic.device.deviceId,
                                            },
                                            channelCount: 1,
                                            noiseSuppression: !0,
                                            echoCancellation: !0,
                                            googEchoCancellation: !0,
                                            googEchoCancellation2: !0,
                                            googAutoGainControl: !0,
                                            googAutoGainControl2: !0,
                                            googNoiseSuppression: !0,
                                            googNoiseSuppression2: !0,
                                            googHighpassFilter: !0,
                                          },
                                        })
                                      );
                                    case 39:
                                      (C = e.sent), (e.next = 48);
                                      break;
                                    case 42:
                                      return (
                                        (e.prev = 42),
                                        (e.t0 = e.catch(36)),
                                        null === (x = this._videosdkLogs) ||
                                          void 0 === x ||
                                          x.pushLogs({
                                            logText:
                                              "Error in getUserMedia for audio",
                                            logType: "ERROR",
                                            attributes: {
                                              error: JSON.stringify(e.t0),
                                            },
                                          }),
                                        null === (O = this._openTelemetry) ||
                                          void 0 === O ||
                                          O.completeSpan({
                                            span: a,
                                            status: 2,
                                            message:
                                              "Error in getUserMedia for audio",
                                          }),
                                        "Permission denied" === e.t0.message ||
                                        "NotAllowedError" === e.t0.name
                                          ? this._emitError(
                                              Re.H
                                                .ERROR_GET_AUDIO_MEDIA_PERMISSION_DENIED
                                            )
                                          : this._emitError(
                                              Re.H.ERROR_GET_AUDIO_MEDIA
                                            ),
                                        e.abrupt("return")
                                      );
                                    case 48:
                                      (m = C.getAudioTracks()[0]),
                                        null === (T = this._openTelemetry) ||
                                          void 0 === T ||
                                          T.completeSpan({
                                            message: "Audio Track Generated",
                                            span: P,
                                            status: 1,
                                          });
                                    case 50:
                                      e.next = 56;
                                      break;
                                    case 52:
                                      return (
                                        (e.next = 54),
                                        this._getExternalVideoStream()
                                      );
                                    case 54:
                                      (D = e.sent),
                                        (m = D.getAudioTracks()[0].clone());
                                    case 56:
                                      return (
                                        (I =
                                          null === (f = this._openTelemetry) ||
                                          void 0 === f
                                            ? void 0
                                            : f.trace({
                                                spanName:
                                                  "Generating Producer Configuration",
                                                span: a,
                                              })),
                                        (M = { opusStereo: 1, opusDtx: 1 }),
                                        r &&
                                          ((L = r.encoderConfig
                                            ? de.v.audioProfiles[
                                                r.encoderConfig
                                              ]
                                            : de.v.audioProfiles
                                                .speech_standard),
                                          (M = {
                                            opusStereo: L.stereo ? 1 : 0,
                                            opusFec: L.fec ? 1 : 0,
                                            opusDtx: L.dtx ? 1 : 0,
                                            opusMaxPlaybackRate:
                                              L.maxPlaybackRate,
                                            opusPtime: L.packetTime,
                                          })),
                                        (j = {
                                          encodings: (A = [
                                            { networkPriority: "high" },
                                          ]),
                                          codecOptions: M,
                                        }),
                                        null === (v = this._openTelemetry) ||
                                          void 0 === v ||
                                          v.traceAutoComplete({
                                            spanName: "Generated AppData",
                                            span: I,
                                            attributes: {
                                              appData: JSON.stringify(j),
                                            },
                                            status: 1,
                                          }),
                                        null === (_ = this._openTelemetry) ||
                                          void 0 === _ ||
                                          _.completeSpan({
                                            span: I,
                                            status: 1,
                                            message:
                                              "Producer Configuration Generated",
                                          }),
                                        (I =
                                          null === (g = this._openTelemetry) ||
                                          void 0 === g
                                            ? void 0
                                            : g.trace({
                                                spanName:
                                                  "Creating Mic Producer",
                                                span: a,
                                              })),
                                        (e.next = 67),
                                        this._sendTransport.produce({
                                          track: m,
                                          encodings: A,
                                          codecOptions: M,
                                          appData: j,
                                        })
                                      );
                                    case 67:
                                      (this._micProducer = e.sent),
                                        m.getConstraints().deviceId &&
                                          (this._mic.device = this._mics.get(
                                            m.getConstraints().deviceId
                                          )),
                                        (N = U({
                                          id: this._micProducer.id,
                                          paused: this._micProducer.paused,
                                          track: this._micProducer.track,
                                          rtpParameters:
                                            this._micProducer.rtpParameters,
                                          codec:
                                            this._micProducer.rtpParameters.codecs[0].mimeType.split(
                                              "/"
                                            )[1],
                                          encodings: A,
                                          codecOptions: M,
                                          instance: this._micProducer,
                                        })),
                                        He.dispatch(N),
                                        this._eventEmitter.emit(
                                          N.type,
                                          N.payload
                                        ),
                                        this._micProducer.on(
                                          "transportclose",
                                          function () {
                                            var e,
                                              t = W(V._micProducer.id);
                                            He.dispatch(t),
                                              V._eventEmitter.emit(
                                                t.type,
                                                t.payload
                                              ),
                                              null === (e = V._micProducer) ||
                                                void 0 === e ||
                                                e.close(),
                                              (V._micProducer = null);
                                          }
                                        ),
                                        this._micProducer.on(
                                          "trackended",
                                          function () {
                                            var e;
                                            null === (e = V._openTelemetry) ||
                                              void 0 === e ||
                                              e.traceAutoComplete({
                                                spanName:
                                                  "this._micProducer trackended or Microphone disconnected!",
                                                span: I,
                                                status: 2,
                                              }),
                                              He.dispatch(
                                                se({
                                                  type: "error",
                                                  text: "Microphone disconnected!",
                                                })
                                              ),
                                              V.disableMic(!0, a).catch(
                                                function () {}
                                              );
                                          }
                                        ),
                                        null === (y = this._openTelemetry) ||
                                          void 0 === y ||
                                          y.completeSpan({
                                            span: I,
                                            status: 1,
                                            message: "Mic Producer Created",
                                          }),
                                        null === (b = this._openTelemetry) ||
                                          void 0 === b ||
                                          b.completeSpan({
                                            span: a,
                                            status: 1,
                                            message: "Enable Mic Successful",
                                          }),
                                        (e.next = 87);
                                      break;
                                    case 78:
                                      return (
                                        (e.prev = 78),
                                        (e.t1 = e.catch(24)),
                                        null === (B = this._openTelemetry) ||
                                          void 0 === B ||
                                          B.completeSpan({
                                            span: a,
                                            status: 2,
                                            message:
                                              "Error enabling microphone: ".concat(
                                                e.t1
                                              ),
                                          }),
                                        null === (F = this._videosdkLogs) ||
                                          void 0 === F ||
                                          F.pushLogs({
                                            logText:
                                              "Error enabling microphone",
                                            logType: "ERROR",
                                            attributes: { error: e.t1.message },
                                          }),
                                        Je.error(
                                          "enableMic() | failed:%o",
                                          e.t1
                                        ),
                                        He.dispatch(
                                          se({
                                            type: "error",
                                            text: "Error enabling microphone: ".concat(
                                              e.t1
                                            ),
                                          })
                                        ),
                                        (e.next = 86),
                                        this._protoo.request("produceError", {
                                          mediaType: "audio",
                                          message: e.t1.message,
                                        })
                                      );
                                    case 86:
                                      m && m.stop();
                                    case 87:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [
                                [24, 78],
                                [36, 42],
                              ]
                            );
                          })
                        )),
                        function () {
                          return Pt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "disableMic",
                      value:
                        ((Tt = (0, a.Z)(
                          d().mark(function e() {
                            var t,
                              r,
                              n,
                              a,
                              i,
                              s,
                              o,
                              c,
                              l,
                              u,
                              p,
                              h,
                              m,
                              f,
                              v,
                              _,
                              g,
                              y,
                              b,
                              w,
                              S = arguments;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        ((n =
                                          S.length > 0 &&
                                          void 0 !== S[0] &&
                                          S[0]),
                                        (a =
                                          S.length > 1 && void 0 !== S[1]
                                            ? S[1]
                                            : void 0),
                                        Je.debug("disableMic()"),
                                        (i =
                                          null === (t = this._openTelemetry) ||
                                          void 0 === t
                                            ? void 0
                                            : t.trace({
                                                spanName:
                                                  "disableMic() Calling",
                                                status: 1,
                                                span: a || null,
                                              })),
                                        this._micProducer)
                                      ) {
                                        e.next = 7;
                                        break;
                                      }
                                      return (
                                        null === (s = this._openTelemetry) ||
                                          void 0 === s ||
                                          s.completeSpan({
                                            span: i,
                                            status: 2,
                                            message: "Mic Producer Not found",
                                          }),
                                        e.abrupt("return")
                                      );
                                    case 7:
                                      if (
                                        ((o =
                                          null === (r = this._openTelemetry) ||
                                          void 0 === r
                                            ? void 0
                                            : r.trace({
                                                spanName:
                                                  "Closing Mic Producer",
                                                span: i,
                                                status: 1,
                                              })),
                                        (this._micEnabled = !1),
                                        !this._micProducer || n)
                                      ) {
                                        e.next = 29;
                                        break;
                                      }
                                      return (
                                        (p =
                                          null === (c = this._openTelemetry) ||
                                          void 0 === c
                                            ? void 0
                                            : c.trace({
                                                spanName:
                                                  "Pausing Mic Producer",
                                                span: o,
                                                status: 1,
                                              })),
                                        this._micProducer.pause(),
                                        (h = W(this._micProducer.id)),
                                        null === (l = this._openTelemetry) ||
                                          void 0 === l ||
                                          l.completeSpan({
                                            span: p,
                                            status: 1,
                                            message: "Pause Mic Successfully",
                                          }),
                                        He.dispatch(h),
                                        this._eventEmitter.emit(
                                          h.type,
                                          h.payload
                                        ),
                                        (e.prev = 16),
                                        (e.next = 19),
                                        this._protoo.request("closeProducer", {
                                          producerId: this._micProducer.id,
                                        })
                                      );
                                    case 19:
                                      null === (m = this._openTelemetry) ||
                                        void 0 === m ||
                                        m.completeSpan({
                                          span: o,
                                          status: 1,
                                          message:
                                            "Requested Server to Close Producer",
                                        }),
                                        (e.next = 27);
                                      break;
                                    case 22:
                                      (e.prev = 22),
                                        (e.t0 = e.catch(16)),
                                        He.dispatch(
                                          se({
                                            type: "error",
                                            text: "Error closing server-side mic Producer: ".concat(
                                              e.t0
                                            ),
                                          })
                                        ),
                                        null === (f = this._openTelemetry) ||
                                          void 0 === f ||
                                          f.completeSpan({
                                            span: i,
                                            status: 2,
                                            message:
                                              "Error closing server-side mic Producer closeProducer :".concat(
                                                n
                                              ),
                                          }),
                                        null === (v = this._videosdkLogs) ||
                                          void 0 === v ||
                                          v.pushLogs({
                                            logText:
                                              "Error closing server-side mic Producer closeProducer :".concat(
                                                n
                                              ),
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          });
                                    case 27:
                                      return (
                                        null === (u = this._openTelemetry) ||
                                          void 0 === u ||
                                          u.completeSpan({
                                            span: i,
                                            status: 1,
                                            message:
                                              "Mic Disabled Successfully",
                                          }),
                                        e.abrupt("return")
                                      );
                                    case 29:
                                      return (
                                        this._micProducer.close(),
                                        (_ = W(this._micProducer.id)),
                                        He.dispatch(_),
                                        this._eventEmitter.emit(
                                          _.type,
                                          _.payload
                                        ),
                                        (e.prev = 33),
                                        (e.next = 36),
                                        this._protoo.request("closeProducer", {
                                          producerId: this._micProducer.id,
                                        })
                                      );
                                    case 36:
                                      null === (g = this._openTelemetry) ||
                                        void 0 === g ||
                                        g.completeSpan({
                                          span: o,
                                          status: 1,
                                          message:
                                            "Requested Server to Close Producer",
                                        }),
                                        null === (y = this._openTelemetry) ||
                                          void 0 === y ||
                                          y.completeSpan({
                                            span: i,
                                            status: 1,
                                            message:
                                              "Mic Disabled Successfully",
                                          }),
                                        (e.next = 45);
                                      break;
                                    case 40:
                                      (e.prev = 40),
                                        (e.t1 = e.catch(33)),
                                        He.dispatch(
                                          se({
                                            type: "error",
                                            text: "Error closing server-side mic Producer: ".concat(
                                              e.t1
                                            ),
                                          })
                                        ),
                                        null === (b = this._openTelemetry) ||
                                          void 0 === b ||
                                          b.completeSpan({
                                            span: i,
                                            status: 2,
                                            message:
                                              "Error closing server-side mic Producer closeProducer :".concat(
                                                n
                                              ),
                                          }),
                                        null === (w = this._videosdkLogs) ||
                                          void 0 === w ||
                                          w.pushLogs({
                                            logText:
                                              "Error closing server-side mic Producer closeProducer :".concat(
                                                n
                                              ),
                                            logType: "ERROR",
                                            attributes: { error: e.t1.message },
                                          });
                                    case 45:
                                      this._micProducer = null;
                                    case 46:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [
                                [16, 22],
                                [33, 40],
                              ]
                            );
                          })
                        )),
                        function () {
                          return Tt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "muteMic",
                      value:
                        ((Et = (0, a.Z)(
                          d().mark(function e() {
                            var t;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        Je.debug("muteMic()"),
                                        (this._micEnabled = !1),
                                        this._micProducer.pause(),
                                        (e.prev = 3),
                                        (e.next = 6),
                                        this._protoo.request("pauseProducer", {
                                          producerId: this._micProducer.id,
                                        })
                                      );
                                    case 6:
                                      He.dispatch({
                                        type: "SET_PRODUCER_PAUSED",
                                        payload: {
                                          producerId: this._micProducer.id,
                                        },
                                      }),
                                        (e.next = 14);
                                      break;
                                    case 9:
                                      (e.prev = 9),
                                        (e.t0 = e.catch(3)),
                                        Je.error(
                                          "muteMic() | failed: %o",
                                          e.t0
                                        ),
                                        null === (t = this._videosdkLogs) ||
                                          void 0 === t ||
                                          t.pushLogs({
                                            logText:
                                              "Error pausing server-side mic Producer",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        He.dispatch(
                                          se({
                                            type: "error",
                                            text: "Error pausing server-side mic Producer: ".concat(
                                              e.t0
                                            ),
                                          })
                                        );
                                    case 14:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[3, 9]]
                            );
                          })
                        )),
                        function () {
                          return Et.apply(this, arguments);
                        }),
                    },
                    {
                      key: "unmuteMic",
                      value:
                        ((Rt = (0, a.Z)(
                          d().mark(function e() {
                            var t;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        Je.debug("unmuteMic()"),
                                        (this._micEnabled = !0),
                                        this._micProducer.resume(),
                                        (e.prev = 3),
                                        (e.next = 6),
                                        this._protoo.request("resumeProducer", {
                                          producerId: this._micProducer.id,
                                        })
                                      );
                                    case 6:
                                      He.dispatch({
                                        type: "SET_PRODUCER_RESUMED",
                                        payload: {
                                          producerId: this._micProducer.id,
                                        },
                                      }),
                                        (e.next = 14);
                                      break;
                                    case 9:
                                      (e.prev = 9),
                                        (e.t0 = e.catch(3)),
                                        Je.error(
                                          "unmuteMic() | failed: %o",
                                          e.t0
                                        ),
                                        null === (t = this._videosdkLogs) ||
                                          void 0 === t ||
                                          t.pushLogs({
                                            logText:
                                              "Error resuming server-side mic Producer",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        He.dispatch(
                                          se({
                                            type: "error",
                                            text: "Error resuming server-side mic Producer: ".concat(
                                              e.t0
                                            ),
                                          })
                                        );
                                    case 14:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[3, 9]]
                            );
                          })
                        )),
                        function () {
                          return Rt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "enableWebcam",
                      value:
                        ((kt = (0, a.Z)(
                          d().mark(function e() {
                            var t,
                              r,
                              n,
                              a,
                              i,
                              s,
                              o,
                              c,
                              l,
                              u,
                              p,
                              h,
                              m,
                              f,
                              v,
                              _,
                              g,
                              y,
                              b,
                              w,
                              S,
                              k,
                              R,
                              E,
                              T,
                              P,
                              C,
                              x,
                              O,
                              D,
                              I,
                              M,
                              L,
                              A,
                              j,
                              N,
                              B,
                              F,
                              V,
                              H,
                              Z,
                              z = this,
                              G = arguments;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        ((r =
                                          G.length > 0 && void 0 !== G[0]
                                            ? G[0]
                                            : void 0),
                                        (n =
                                          G.length > 1 && void 0 !== G[1]
                                            ? G[1]
                                            : void 0),
                                        (a =
                                          null === (t = this._openTelemetry) ||
                                          void 0 === t
                                            ? void 0
                                            : t.trace({
                                                spanName:
                                                  "enableWebcam() Calling ".concat(
                                                    r
                                                      ? "With Custom Video Track"
                                                      : "Without Custom Video Track "
                                                  ),
                                                attributes: {
                                                  customVideoConfig: r
                                                    ? JSON.stringify(r)
                                                    : "Not Specify Custom Track",
                                                },
                                                span: n || null,
                                              })),
                                        Je.debug("enableWebcam()"),
                                        (this._webcamEnabled = !0),
                                        !this._webcamProducer)
                                      ) {
                                        e.next = 8;
                                        break;
                                      }
                                      return (
                                        null === (i = this._openTelemetry) ||
                                          void 0 === i ||
                                          i.completeSpan({
                                            span: a,
                                            status: 2,
                                            message: "Webcam Producer found",
                                          }),
                                        e.abrupt("return")
                                      );
                                    case 8:
                                      if (
                                        this._mediasoupDevice.canProduce(
                                          "video"
                                        )
                                      ) {
                                        e.next = 12;
                                        break;
                                      }
                                      return (
                                        null === (s = this._openTelemetry) ||
                                          void 0 === s ||
                                          s.completeSpan({
                                            span: a,
                                            status: 2,
                                            message:
                                              "enableWebcam() | cannot produce video",
                                          }),
                                        Je.error(
                                          "enableWebcam() | cannot produce video"
                                        ),
                                        e.abrupt("return")
                                      );
                                    case 12:
                                      if (
                                        (He.dispatch(q(!0)),
                                        (l = this._webcam.resolution),
                                        (e.prev = 14),
                                        this._externalVideo)
                                      ) {
                                        e.next = 53;
                                        break;
                                      }
                                      return (
                                        (e.next = 18), this._updateWebcams(a)
                                      );
                                    case 18:
                                      if ((c = this._webcam.device)) {
                                        e.next = 23;
                                        break;
                                      }
                                      throw (
                                        (null === (_ = this._openTelemetry) ||
                                          void 0 === _ ||
                                          _.traceAutoComplete({
                                            spanName: "Webcam Device Not Found",
                                            span: a,
                                            status: 2,
                                          }),
                                        null === (g = this._videosdkLogs) ||
                                          void 0 === g ||
                                          g.pushLogs({
                                            logText:
                                              "Error Webcam Device Not Found",
                                            logType: "ERROR",
                                          }),
                                        new Error("no webcam devices"))
                                      );
                                    case 23:
                                      Je.debug(
                                        "enableWebcam() | calling getUserMedia()"
                                      );
                                      try {
                                        r &&
                                          "ended" ==
                                            (o = r.getVideoTracks()[0])
                                              .readyState &&
                                          ((o = null),
                                          null === (y = this._openTelemetry) ||
                                            void 0 === y ||
                                            y.traceAutoComplete({
                                              spanName:
                                                "Dispose Video Custom Track, it is in ended state",
                                              span: a,
                                              status: 2,
                                            }));
                                      } catch (e) {
                                        null === (b = this._videosdkLogs) ||
                                          void 0 === b ||
                                          b.pushLogs({
                                            logText:
                                              "Error Invalid Custom Track Passed. Reverting to default Error",
                                            logType: "ERROR",
                                            attributes: { error: e.message },
                                          }),
                                          console.log(
                                            "Invalid Custom Track Passed. Reverting to default Error: ".concat(
                                              e
                                            )
                                          );
                                      }
                                      if (o) {
                                        e.next = 51;
                                        break;
                                      }
                                      if (
                                        ((S =
                                          null === (w = this._openTelemetry) ||
                                          void 0 === w
                                            ? void 0
                                            : w.trace({
                                                spanName: "Creating Track",
                                                span: a,
                                              })),
                                        (k = null),
                                        (e.prev = 28),
                                        "hd" != this._webcam.resolution)
                                      ) {
                                        e.next = 36;
                                        break;
                                      }
                                      return (
                                        (e.next = 32),
                                        Ee.VideoSDK.createCameraVideoTrack({
                                          cameraId: c.deviceId,
                                          encoderConfig: "h720p_w1280p",
                                          multiStream: this._useSimulcast,
                                          facingMode: c.facing,
                                        })
                                      );
                                    case 32:
                                      (r = e.sent),
                                        (k = JSON.stringify({
                                          encoderConfig: "h720p_w1280p",
                                          multiStream: this._useSimulcast,
                                        })),
                                        (e.next = 40);
                                      break;
                                    case 36:
                                      return (
                                        (e.next = 38),
                                        Ee.VideoSDK.createCameraVideoTrack({
                                          cameraId: c.deviceId,
                                          encoderConfig: "h540p_w960p",
                                          multiStream: this._useSimulcast,
                                          facingMode: c.facing,
                                        })
                                      );
                                    case 38:
                                      (r = e.sent),
                                        (k = JSON.stringify({
                                          encoderConfig: "h540p_w960p",
                                          multiStream: this._useSimulcast,
                                        }));
                                    case 40:
                                      (o = r.getVideoTracks()[0]),
                                        null === (R = this._openTelemetry) ||
                                          void 0 === R ||
                                          R.completeSpan({
                                            message: "Video Track Generated",
                                            span: S,
                                            attributes: {
                                              customVideoTrackConfig: k,
                                            },
                                            status: 1,
                                          }),
                                        (e.next = 51);
                                      break;
                                    case 44:
                                      return (
                                        (e.prev = 44),
                                        (e.t0 = e.catch(28)),
                                        null === (E = this._videosdkLogs) ||
                                          void 0 === E ||
                                          E.pushLogs({
                                            logText:
                                              "Error Creating VideoTrack",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        null === (T = this._openTelemetry) ||
                                          void 0 === T ||
                                          T.completeSpan({
                                            message:
                                              "Error Creating VideoTrack",
                                            span: a,
                                            status: 2,
                                          }),
                                        console.log(
                                          "Error Creating VideoTrack: ",
                                          e.t0
                                        ),
                                        "Permission denied" === e.t0.message ||
                                        "NotAllowedError" === e.t0.name
                                          ? this._emitError(
                                              Re.H
                                                .ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED
                                            )
                                          : this._emitError(
                                              Re.H.ERROR_GET_VIDEO_MEDIA
                                            ),
                                        e.abrupt("return")
                                      );
                                    case 51:
                                      e.next = 58;
                                      break;
                                    case 53:
                                      return (
                                        (c = { label: "external video" }),
                                        (e.next = 56),
                                        this._getExternalVideoStream()
                                      );
                                    case 56:
                                      (P = e.sent),
                                        (o = P.getVideoTracks()[0].clone());
                                    case 58:
                                      if (
                                        ((C =
                                          null === (u = this._openTelemetry) ||
                                          void 0 === u
                                            ? void 0
                                            : u.trace({
                                                spanName:
                                                  "Generating Producer Configuration",
                                                span: a,
                                              })),
                                        (D = { videoGoogleStartBitrate: 1e3 }),
                                        !this._forceH264)
                                      ) {
                                        e.next = 67;
                                        break;
                                      }
                                      if (
                                        (O =
                                          this._mediasoupDevice.rtpCapabilities.codecs.find(
                                            function (e) {
                                              return (
                                                "video/h264" ===
                                                e.mimeType.toLowerCase()
                                              );
                                            }
                                          ))
                                      ) {
                                        e.next = 65;
                                        break;
                                      }
                                      throw (
                                        (null === (I = this._videosdkLogs) ||
                                          void 0 === I ||
                                          I.pushLogs({
                                            logText:
                                              "Error desired H264 codec+configuration is not supported",
                                            logType: "ERROR",
                                          }),
                                        new Error(
                                          "desired H264 codec+configuration is not supported"
                                        ))
                                      );
                                    case 65:
                                      e.next = 72;
                                      break;
                                    case 67:
                                      if (!this._forceVP9) {
                                        e.next = 72;
                                        break;
                                      }
                                      if (
                                        (O =
                                          this._mediasoupDevice.rtpCapabilities.codecs.find(
                                            function (e) {
                                              return (
                                                "video/vp9" ===
                                                e.mimeType.toLowerCase()
                                              );
                                            }
                                          ))
                                      ) {
                                        e.next = 72;
                                        break;
                                      }
                                      throw (
                                        (null === (M = this._videosdkLogs) ||
                                          void 0 === M ||
                                          M.pushLogs({
                                            logText:
                                              "Error desired VP9 codec+configuration is not supported",
                                            logType: "ERROR",
                                          }),
                                        new Error(
                                          "desired VP9 codec+configuration is not supported"
                                        ))
                                      );
                                    case 72:
                                      o
                                        ? ((L = o.getConstraints()),
                                          (x = be(!1, L.width, L.height, {
                                            simulcast: r.multiStream,
                                          })))
                                        : this._useSimulcast &&
                                          ((A =
                                            this._mediasoupDevice.rtpCapabilities.codecs.find(
                                              function (e) {
                                                return "video" === e.kind;
                                              }
                                            )),
                                          (x =
                                            (this._forceVP9 && O) ||
                                            "video/vp9" ===
                                              A.mimeType.toLowerCase()
                                              ? Ge
                                              : ze[this._webcam.resolution])),
                                        (j = {});
                                      try {
                                        j = {
                                          encodings: x,
                                          width: r
                                            ? null === (N = o) || void 0 === N
                                              ? void 0
                                              : N.getConstraints().width
                                            : qe[l].width.ideal,
                                          height: r
                                            ? null === (B = o) || void 0 === B
                                              ? void 0
                                              : B.getConstraints().height
                                            : qe[l].height.ideal,
                                        };
                                      } catch (e) {
                                        null === (F = this._videosdkLogs) ||
                                          void 0 === F ||
                                          F.pushLogs({
                                            logText:
                                              "Error Enable Webcam AppData",
                                            logType: "ERROR",
                                            attributes: { error: e.message },
                                          }),
                                          console.log(e);
                                      }
                                      return (
                                        null === (p = this._openTelemetry) ||
                                          void 0 === p ||
                                          p.traceAutoComplete({
                                            spanName:
                                              "Track Generated with height "
                                                .concat(j.height, " and width ")
                                                .concat(
                                                  j.width,
                                                  " with multiStream "
                                                )
                                                .concat(this._useSimulcast),
                                            attributes: {
                                              appData: JSON.stringify(j),
                                            },
                                            span: a,
                                            status: 1,
                                          }),
                                        null === (h = this._openTelemetry) ||
                                          void 0 === h ||
                                          h.completeSpan({
                                            span: C,
                                            status: 1,
                                            message:
                                              "Producer Configuration Generated",
                                          }),
                                        (C =
                                          null === (m = this._openTelemetry) ||
                                          void 0 === m
                                            ? void 0
                                            : m.trace({
                                                spanName:
                                                  "Creating Webcam Producer",
                                                span: a,
                                              })),
                                        (e.next = 80),
                                        this._sendTransport.produce({
                                          track: o,
                                          encodings: x,
                                          codecOptions: D,
                                          codec: O,
                                          appData: j,
                                        })
                                      );
                                    case 80:
                                      (this._webcamProducer = e.sent),
                                        o.getConstraints().deviceId &&
                                          (this._webcam.device =
                                            this._webcams.get(
                                              o.getConstraints().deviceId
                                            )),
                                        (V = U({
                                          id: this._webcamProducer.id,
                                          deviceLabel: c.label,
                                          type: this._getWebcamType(c),
                                          paused: this._webcamProducer.paused,
                                          track: this._webcamProducer.track,
                                          rtpParameters:
                                            this._webcamProducer.rtpParameters,
                                          codec:
                                            this._webcamProducer.rtpParameters.codecs[0].mimeType.split(
                                              "/"
                                            )[1],
                                          instance: this._webcamProducer,
                                        })),
                                        He.dispatch(V),
                                        this._eventEmitter.emit(
                                          V.type,
                                          V.payload
                                        ),
                                        this._webcamProducer.on(
                                          "transportclose",
                                          function () {
                                            var e,
                                              t = W(z._webcamProducer.id);
                                            He.dispatch(t),
                                              z._eventEmitter.emit(
                                                t.type,
                                                t.payload
                                              ),
                                              null ===
                                                (e = z._webcamProducer) ||
                                                void 0 === e ||
                                                e.close(),
                                              (z._webcamProducer = null);
                                          }
                                        ),
                                        this._webcamProducer.on(
                                          "trackended",
                                          function () {
                                            var e;
                                            null === (e = z._openTelemetry) ||
                                              void 0 === e ||
                                              e.traceAutoComplete({
                                                spanName:
                                                  "this._webcamProducer trackended or Webcam disconnected!",
                                                span: a,
                                                status: 2,
                                              }),
                                              He.dispatch(
                                                se({
                                                  type: "error",
                                                  text: "Webcam disconnected!",
                                                })
                                              ),
                                              z
                                                .disableWebcam(a)
                                                .catch(function () {});
                                          }
                                        ),
                                        null === (f = this._openTelemetry) ||
                                          void 0 === f ||
                                          f.completeSpan({
                                            span: C,
                                            status: 1,
                                            message: "Webcam Producer Created",
                                          }),
                                        null === (v = this._openTelemetry) ||
                                          void 0 === v ||
                                          v.completeSpan({
                                            span: a,
                                            status: 1,
                                            message: "Enable Webcam Successful",
                                          }),
                                        (e.next = 100);
                                      break;
                                    case 91:
                                      return (
                                        (e.prev = 91),
                                        (e.t1 = e.catch(14)),
                                        console.log(
                                          "enableWebcam() | failed:%o",
                                          e.t1
                                        ),
                                        null === (H = this._videosdkLogs) ||
                                          void 0 === H ||
                                          H.pushLogs({
                                            logText: "Error enabling webcam",
                                            logType: "ERROR",
                                            attributes: { error: e.t1.message },
                                          }),
                                        null === (Z = this._openTelemetry) ||
                                          void 0 === Z ||
                                          Z.completeSpan({
                                            span: a,
                                            status: 2,
                                            message: "Error enabling webcam",
                                          }),
                                        He.dispatch(
                                          se({
                                            type: "error",
                                            text: "Error enabling webcam: ".concat(
                                              e.t1
                                            ),
                                          })
                                        ),
                                        (e.next = 99),
                                        this._protoo.request("produceError", {
                                          mediaType: "video",
                                          message: e.t1.message,
                                        })
                                      );
                                    case 99:
                                      o && o.stop();
                                    case 100:
                                      He.dispatch(q(!1));
                                    case 101:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [
                                [14, 91],
                                [28, 44],
                              ]
                            );
                          })
                        )),
                        function () {
                          return kt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "disableWebcam",
                      value:
                        ((St = (0, a.Z)(
                          d().mark(function e() {
                            var t,
                              r,
                              n,
                              a,
                              i,
                              s,
                              o,
                              c,
                              l,
                              u,
                              p,
                              h = arguments;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        ((a =
                                          h.length > 0 && void 0 !== h[0]
                                            ? h[0]
                                            : void 0),
                                        (i =
                                          null === (t = this._openTelemetry) ||
                                          void 0 === t
                                            ? void 0
                                            : t.trace({
                                                spanName:
                                                  "disableWebcam() Calling",
                                                status: 1,
                                                span: a || null,
                                              })),
                                        Je.debug("disableWebcam()"),
                                        (this._webcamEnabled = !1),
                                        this._webcamProducer)
                                      ) {
                                        e.next = 7;
                                        break;
                                      }
                                      return (
                                        null === (s = this._openTelemetry) ||
                                          void 0 === s ||
                                          s.completeSpan({
                                            span: i,
                                            status: 2,
                                            message:
                                              "Webcam Producer Not found",
                                          }),
                                        e.abrupt("return")
                                      );
                                    case 7:
                                      return (
                                        (o =
                                          null === (r = this._openTelemetry) ||
                                          void 0 === r
                                            ? void 0
                                            : r.trace({
                                                spanName:
                                                  "Closing Webcam Producer",
                                                span: i,
                                                status: 1,
                                              })),
                                        this._webcamProducer.close(),
                                        (c = W(this._webcamProducer.id)),
                                        He.dispatch(c),
                                        this._eventEmitter.emit(
                                          c.type,
                                          c.payload
                                        ),
                                        (e.prev = 12),
                                        (e.next = 15),
                                        this._protoo.request("closeProducer", {
                                          producerId: this._webcamProducer.id,
                                        })
                                      );
                                    case 15:
                                      null === (l = this._openTelemetry) ||
                                        void 0 === l ||
                                        l.completeSpan({
                                          span: o,
                                          status: 1,
                                          message:
                                            "Requested Server to Close Producer",
                                        }),
                                        (e.next = 23);
                                      break;
                                    case 18:
                                      (e.prev = 18),
                                        (e.t0 = e.catch(12)),
                                        null === (u = this._videosdkLogs) ||
                                          void 0 === u ||
                                          u.pushLogs({
                                            logText:
                                              "Error closing server-side webcam Producer",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        null === (p = this._openTelemetry) ||
                                          void 0 === p ||
                                          p.completeSpan({
                                            span: i,
                                            status: 2,
                                            message:
                                              "Error closing server-side webcam Producer: ".concat(
                                                e.t0
                                              ),
                                          }),
                                        He.dispatch(
                                          se({
                                            type: "error",
                                            text: "Error closing server-side webcam Producer: ".concat(
                                              e.t0
                                            ),
                                          })
                                        );
                                    case 23:
                                      (this._webcamProducer = null),
                                        null === (n = this._openTelemetry) ||
                                          void 0 === n ||
                                          n.completeSpan({
                                            span: i,
                                            status: 1,
                                            message:
                                              "Webcam Disabled Successfully",
                                          });
                                    case 25:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[12, 18]]
                            );
                          })
                        )),
                        function () {
                          return St.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getMics",
                      value:
                        ((wt = (0, a.Z)(
                          d().mark(function e() {
                            var t, r;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (t = []),
                                        (e.prev = 1),
                                        (e.next = 4),
                                        this._updateMics()
                                      );
                                    case 4:
                                      this._mics.forEach(function (e, r) {
                                        t.push({ deviceId: r, label: e.label });
                                      }),
                                        (e.next = 11);
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(1)),
                                        Je.error("getMics() | Error", e.t0),
                                        null === (r = this._videosdkLogs) ||
                                          void 0 === r ||
                                          r.pushLogs({
                                            logText: "Error getMics() | Error",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          });
                                    case 11:
                                      return e.abrupt("return", t);
                                    case 12:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[1, 7]]
                            );
                          })
                        )),
                        function () {
                          return wt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "changeMic",
                      value:
                        ((bt = (0, a.Z)(
                          d().mark(function e(t) {
                            var r, a, i, s, o, c, l, u, p, h, m, f, v, _;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        ((a =
                                          null === (r = this._openTelemetry) ||
                                          void 0 === r
                                            ? void 0
                                            : r.trace({
                                                spanName: "changeMic() Calling",
                                              })),
                                        (e.prev = 1),
                                        "object" != (0, n.Z)(t))
                                      ) {
                                        e.next = 9;
                                        break;
                                      }
                                      return (
                                        (e.next = 5), this.disableMic(!0, a)
                                      );
                                    case 5:
                                      return (e.next = 7), this.enableMic(t, a);
                                    case 7:
                                      e.next = 27;
                                      break;
                                    case 9:
                                      return (
                                        (c = t),
                                        (e.next = 12),
                                        this._updateMics()
                                      );
                                    case 12:
                                      if (
                                        ((l = Array.from(this._mics.keys())),
                                        (u = l.length),
                                        (p = this._mic.device
                                          ? this._mic.device.deviceId
                                          : void 0),
                                        null != c && null != c
                                          ? (h = l.indexOf(c))
                                          : (h = l.indexOf(p)) < u - 1
                                          ? h++
                                          : (h = 0),
                                        (this._mic.device = this._mics.get(
                                          l[h]
                                        )),
                                        (m =
                                          null === (i = this._openTelemetry) ||
                                          void 0 === i
                                            ? void 0
                                            : i.trace({
                                                spanName:
                                                  "Getting Selected Mic",
                                                span: a,
                                                attributes: {
                                                  selectedWebcam: this._mic
                                                    .device
                                                    ? JSON.stringify(
                                                        this._mic.device
                                                      )
                                                    : "No Mic devices",
                                                },
                                              })),
                                        this._mic.device)
                                      ) {
                                        e.next = 21;
                                        break;
                                      }
                                      throw (
                                        (null === (f = this._videosdkLogs) ||
                                          void 0 === f ||
                                          f.pushLogs({
                                            logText:
                                              "Error changeMic : No mic Found",
                                            logType: "ERROR",
                                          }),
                                        new Error("No mic Found"))
                                      );
                                    case 21:
                                      return (
                                        (e.next = 23), this.disableMic(!0, a)
                                      );
                                    case 23:
                                      return (
                                        (e.next = 25), this.enableMic(void 0, a)
                                      );
                                    case 25:
                                      null === (s = this._openTelemetry) ||
                                        void 0 === s ||
                                        s.completeSpan({
                                          span: m,
                                          status: 1,
                                          message: "Done",
                                        }),
                                        null === (o = this._openTelemetry) ||
                                          void 0 === o ||
                                          o.completeSpan({
                                            span: a,
                                            status: 1,
                                            message: "changeMic() Ending",
                                          });
                                    case 27:
                                      e.next = 33;
                                      break;
                                    case 29:
                                      (e.prev = 29),
                                        (e.t0 = e.catch(1)),
                                        null === (v = this._openTelemetry) ||
                                          void 0 === v ||
                                          v.completeSpan({
                                            span: a,
                                            status: 2,
                                            message:
                                              "changeMic() | Error ".concat(
                                                e.t0
                                              ),
                                          }),
                                        null === (_ = this._videosdkLogs) ||
                                          void 0 === _ ||
                                          _.pushLogs({
                                            logText:
                                              "Error changeMic() | Error",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          });
                                    case 33:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[1, 29]]
                            );
                          })
                        )),
                        function (e) {
                          return bt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getWebcams",
                      value:
                        ((yt = (0, a.Z)(
                          d().mark(function e() {
                            var t, r;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (t = []),
                                        (e.prev = 1),
                                        (e.next = 4),
                                        this._updateWebcams()
                                      );
                                    case 4:
                                      this._webcams.forEach(function (e, r) {
                                        t.push({
                                          deviceId: r,
                                          label: e.label,
                                          facingMode: e.facing || "environment",
                                        });
                                      }),
                                        (e.next = 11);
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(1)),
                                        Je.error(
                                          "getWebcams() | failed %o",
                                          e.t0
                                        ),
                                        null === (r = this._videosdkLogs) ||
                                          void 0 === r ||
                                          r.pushLogs({
                                            logText:
                                              "Error getWebcams() | failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          });
                                    case 11:
                                      return e.abrupt("return", t);
                                    case 12:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[1, 7]]
                            );
                          })
                        )),
                        function () {
                          return yt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "replaceWebcamStream",
                      value:
                        ((gt = (0, a.Z)(
                          d().mark(function e(t) {
                            var r;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (!this._webcamProducer) {
                                        e.next = 7;
                                        break;
                                      }
                                      return (
                                        (r = t.getVideoTracks()[0]),
                                        (e.next = 4),
                                        this._webcamProducer.replaceTrack({
                                          track: r,
                                        })
                                      );
                                    case 4:
                                      this._eventEmitter.emit(
                                        "UPDATE_PRODUCER",
                                        { producer: this._webcamProducer }
                                      ),
                                        (e.next = 11);
                                      break;
                                    case 7:
                                      return (e.next = 9), this.disableWebcam();
                                    case 9:
                                      return (
                                        (e.next = 11), this.enableWebcam(t)
                                      );
                                    case 11:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return gt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "changeWebcam",
                      value:
                        ((_t = (0, a.Z)(
                          d().mark(function e(t) {
                            var r, a, i, s, o, c, l, u, p, h, m, f, v, _;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        ((a =
                                          null === (r = this._openTelemetry) ||
                                          void 0 === r
                                            ? void 0
                                            : r.trace({
                                                spanName:
                                                  "changeWebcam() Calling",
                                              })),
                                        He.dispatch(q(!0)),
                                        "object" !== (0, n.Z)(t))
                                      ) {
                                        e.next = 17;
                                        break;
                                      }
                                      return (
                                        (e.prev = 3),
                                        (e.next = 6),
                                        this.disableWebcam(a)
                                      );
                                    case 6:
                                      return (
                                        (e.next = 8), this.enableWebcam(t, a)
                                      );
                                    case 8:
                                      e.next = 15;
                                      break;
                                    case 10:
                                      (e.prev = 10),
                                        (e.t0 = e.catch(3)),
                                        Je.error(
                                          "changeWebcam() | failed: %o",
                                          e.t0
                                        ),
                                        null === (i = this._videosdkLogs) ||
                                          void 0 === i ||
                                          i.pushLogs({
                                            logText:
                                              "Error Could not change webcam",
                                            logType: "ERROR",
                                            attributes: {
                                              object: JSON.stringify(t),
                                              error: e.t0.message,
                                            },
                                          }),
                                        He.dispatch(
                                          se({
                                            type: "error",
                                            text: "Could not change webcam: ".concat(
                                              e.t0
                                            ),
                                          })
                                        );
                                    case 15:
                                      e.next = 46;
                                      break;
                                    case 17:
                                      return (
                                        (e.prev = 17),
                                        (e.next = 20),
                                        this._updateWebcams(a)
                                      );
                                    case 20:
                                      if (
                                        ((l = Array.from(this._webcams.keys())),
                                        (u = l.length),
                                        (p = this._webcam.device
                                          ? this._webcam.device.deviceId
                                          : void 0),
                                        null != t && null != t
                                          ? (h = l.indexOf(t))
                                          : (h = l.indexOf(p)) < u - 1
                                          ? h++
                                          : (h = 0),
                                        (this._webcam.device =
                                          this._webcams.get(l[h])),
                                        Je.debug(
                                          "changeWebcam() | new selected webcam [device:%o]",
                                          this._webcam.device
                                        ),
                                        (this._webcam.resolution =
                                          this._webcam.resolution || "hd"),
                                        (m =
                                          null === (s = this._openTelemetry) ||
                                          void 0 === s
                                            ? void 0
                                            : s.trace({
                                                spanName:
                                                  "Getting Selected Webcam",
                                                span: a,
                                                attributes: {
                                                  selectedWebcam: this._webcam
                                                    .device
                                                    ? JSON.stringify(
                                                        this._webcam.device
                                                      )
                                                    : "No webcam devices",
                                                },
                                              })),
                                        this._webcam.device)
                                      ) {
                                        e.next = 31;
                                        break;
                                      }
                                      throw (
                                        (null === (f = this._videosdkLogs) ||
                                          void 0 === f ||
                                          f.pushLogs({
                                            logText:
                                              "Error changeWebcam : No webcam Found",
                                            logType: "ERROR",
                                          }),
                                        new Error("no webcam devices"))
                                      );
                                    case 31:
                                      return (
                                        (e.next = 33), this.disableWebcam(a)
                                      );
                                    case 33:
                                      return (
                                        (e.next = 35),
                                        this.enableWebcam(void 0, a)
                                      );
                                    case 35:
                                      return (
                                        null === (o = this._openTelemetry) ||
                                          void 0 === o ||
                                          o.completeSpan({
                                            span: m,
                                            status: 1,
                                            message: "Done",
                                          }),
                                        null === (c = this._openTelemetry) ||
                                          void 0 === c ||
                                          c.completeSpan({
                                            span: a,
                                            status: 1,
                                            message: "changeWebcam() Ending",
                                          }),
                                        e.abrupt("return")
                                      );
                                    case 40:
                                      (e.prev = 40),
                                        (e.t1 = e.catch(17)),
                                        Je.error(
                                          "changeWebcam() | failed: %o",
                                          e.t1
                                        ),
                                        null === (v = this._videosdkLogs) ||
                                          void 0 === v ||
                                          v.pushLogs({
                                            logText:
                                              "Error Could not change webcam",
                                            logType: "ERROR",
                                            attributes: {
                                              object: JSON.stringify(t),
                                              error: e.t1.message,
                                            },
                                          }),
                                        null === (_ = this._openTelemetry) ||
                                          void 0 === _ ||
                                          _.completeSpan({
                                            span: a,
                                            status: 2,
                                            message:
                                              "Could not change webcam ".concat(
                                                e.t1
                                              ),
                                          }),
                                        He.dispatch(
                                          se({
                                            type: "error",
                                            text: "Could not change webcam: ".concat(
                                              e.t1
                                            ),
                                          })
                                        );
                                    case 46:
                                      He.dispatch(q(!1));
                                    case 47:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [
                                [3, 10],
                                [17, 40],
                              ]
                            );
                          })
                        )),
                        function (e) {
                          return _t.apply(this, arguments);
                        }),
                    },
                    {
                      key: "changeWebcamResolution",
                      value:
                        ((vt = (0, a.Z)(
                          d().mark(function e() {
                            var t, r, n, a;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      Je.debug("changeWebcamResolution()"),
                                        He.dispatch(q(!0)),
                                        (e.prev = 2),
                                        (e.t0 = this._webcam.resolution),
                                        (e.next =
                                          "qvga" === e.t0
                                            ? 6
                                            : "vga" === e.t0
                                            ? 8
                                            : "hd" === e.t0
                                            ? 10
                                            : 12);
                                      break;
                                    case 6:
                                      return (
                                        (this._webcam.resolution = "vga"),
                                        e.abrupt("break", 13)
                                      );
                                    case 8:
                                      return (
                                        (this._webcam.resolution = "hd"),
                                        e.abrupt("break", 13)
                                      );
                                    case 10:
                                      return (
                                        (this._webcam.resolution = "qvga"),
                                        e.abrupt("break", 13)
                                      );
                                    case 12:
                                      this._webcam.resolution = "hd";
                                    case 13:
                                      return (
                                        Je.debug(
                                          "changeWebcamResolution() | calling getUserMedia()"
                                        ),
                                        (e.prev = 14),
                                        (e.next = 17),
                                        navigator.mediaDevices.getUserMedia({
                                          video: Ve(
                                            {
                                              deviceId: {
                                                exact:
                                                  this._webcam.device.deviceId,
                                              },
                                            },
                                            qe[this._webcam.resolution]
                                          ),
                                        })
                                      );
                                    case 17:
                                      (t = e.sent), (e.next = 25);
                                      break;
                                    case 20:
                                      return (
                                        (e.prev = 20),
                                        (e.t1 = e.catch(14)),
                                        null === (r = this._videosdkLogs) ||
                                          void 0 === r ||
                                          r.pushLogs({
                                            logText:
                                              "Error in getUserMedia for changeWebcamResolution",
                                            logType: "ERROR",
                                            attributes: {
                                              error: JSON.stringify(e.t1),
                                            },
                                          }),
                                        "Permission denied" === e.t1.message ||
                                        "NotAllowedError" === e.t1.name
                                          ? this._emitError(
                                              Re.H
                                                .ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED
                                            )
                                          : this._emitError(
                                              Re.H.ERROR_GET_VIDEO_MEDIA
                                            ),
                                        e.abrupt("return")
                                      );
                                    case 25:
                                      return (
                                        (n = t.getVideoTracks()[0]),
                                        (e.next = 28),
                                        this._webcamProducer.replaceTrack({
                                          track: n,
                                        })
                                      );
                                    case 28:
                                      He.dispatch(
                                        V(this._webcamProducer.id, n)
                                      ),
                                        (e.next = 36);
                                      break;
                                    case 31:
                                      (e.prev = 31),
                                        (e.t2 = e.catch(2)),
                                        Je.error(
                                          "changeWebcamResolution() | failed: %o",
                                          e.t2
                                        ),
                                        null === (a = this._videosdkLogs) ||
                                          void 0 === a ||
                                          a.pushLogs({
                                            logText:
                                              "Error Could not change webcam resolution",
                                            logType: "ERROR",
                                            attributes: { error: e.t2.message },
                                          }),
                                        He.dispatch(
                                          se({
                                            type: "error",
                                            text: "Could not change webcam resolution: ".concat(
                                              e.t2
                                            ),
                                          })
                                        );
                                    case 36:
                                      He.dispatch(q(!1));
                                    case 37:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [
                                [2, 31],
                                [14, 20],
                              ]
                            );
                          })
                        )),
                        function () {
                          return vt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "enableShare",
                      value:
                        ((ft = (0, a.Z)(
                          d().mark(function e() {
                            var t,
                              r,
                              n,
                              a,
                              i,
                              s,
                              o,
                              c,
                              l,
                              u,
                              p,
                              h,
                              m,
                              f,
                              v,
                              _,
                              g,
                              y,
                              b,
                              w,
                              S,
                              k,
                              R,
                              E,
                              T,
                              P,
                              C,
                              x,
                              O,
                              D,
                              I,
                              M,
                              L,
                              A,
                              j = this,
                              N = arguments;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        ((r =
                                          N.length > 0 && void 0 !== N[0]
                                            ? N[0]
                                            : void 0),
                                        (n =
                                          null === (t = this._openTelemetry) ||
                                          void 0 === t
                                            ? void 0
                                            : t.trace({
                                                spanName:
                                                  "enableShare() Calling ".concat(
                                                    r
                                                      ? "With Custom Video Track"
                                                      : "Without Custom Video Track "
                                                  ),
                                                attributes: {
                                                  customShareConfig: r
                                                    ? JSON.stringify(r)
                                                    : "Not Specify Custom Track",
                                                },
                                              })),
                                        Je.debug("enableShare()"),
                                        !this._shareProducer)
                                      ) {
                                        e.next = 6;
                                        break;
                                      }
                                      return (
                                        null === (a = this._openTelemetry) ||
                                          void 0 === a ||
                                          a.completeSpan({
                                            span: n,
                                            status: 2,
                                            message:
                                              "Screen Share Producer found",
                                          }),
                                        e.abrupt("return")
                                      );
                                    case 6:
                                      if (
                                        this._mediasoupDevice.canProduce(
                                          "video"
                                        )
                                      ) {
                                        e.next = 10;
                                        break;
                                      }
                                      return (
                                        null === (i = this._openTelemetry) ||
                                          void 0 === i ||
                                          i.completeSpan({
                                            span: n,
                                            status: 2,
                                            message:
                                              "enableShare() | cannot produce video",
                                          }),
                                        Je.error(
                                          "enableShare() | cannot produce video"
                                        ),
                                        e.abrupt("return")
                                      );
                                    case 10:
                                      if (
                                        (He.dispatch(z(!0)),
                                        (e.prev = 11),
                                        Je.debug(
                                          "enableShare() | calling getUserMedia()"
                                        ),
                                        (f =
                                          null === (c = this._openTelemetry) ||
                                          void 0 === c
                                            ? void 0
                                            : c.trace({
                                                spanName: "Creating Track",
                                                span: n,
                                              })),
                                        !r || !r.active)
                                      ) {
                                        e.next = 19;
                                        break;
                                      }
                                      (s = r.getVideoTracks()[0]),
                                        (o = r.getAudioTracks()[0]),
                                        (e.next = 38);
                                      break;
                                    case 19:
                                      return (
                                        (e.prev = 19),
                                        (e.next = 22),
                                        navigator.mediaDevices.getDisplayMedia({
                                          audio: !0,
                                          video: {
                                            width: { max: 1920 },
                                            height: { max: 1080 },
                                            frameRate: { max: 10 },
                                          },
                                        })
                                      );
                                    case 22:
                                      (_ = e.sent), (e.next = 31);
                                      break;
                                    case 25:
                                      return (
                                        (e.prev = 25),
                                        (e.t0 = e.catch(19)),
                                        null === (g = this._videosdkLogs) ||
                                          void 0 === g ||
                                          g.pushLogs({
                                            logText:
                                              "Error in getDisplayMedia for screen share",
                                            logType: "ERROR",
                                            attributes: {
                                              error: JSON.stringify(e.t0),
                                            },
                                          }),
                                        null === (y = this._openTelemetry) ||
                                          void 0 === y ||
                                          y.completeSpan({
                                            span: n,
                                            status: 2,
                                            message:
                                              "Error in getDisplayMedia for screen share ".concat(
                                                e.t0
                                              ),
                                          }),
                                        "Permission denied" === e.t0.message ||
                                        "NotAllowedError" === e.t0.name
                                          ? this._emitError(
                                              Re.H
                                                .ERROR_GET_DISPLAY_MEDIA_PERMISSION_DENIED
                                            )
                                          : this._emitError(
                                              Re.H.ERROR_GET_DISPLAY_MEDIA
                                            ),
                                        e.abrupt("return")
                                      );
                                    case 31:
                                      if (_) {
                                        e.next = 35;
                                        break;
                                      }
                                      return (
                                        He.dispatch(z(!0)),
                                        null === (b = this._openTelemetry) ||
                                          void 0 === b ||
                                          b.completeSpan({
                                            span: n,
                                            status: 2,
                                            message: "Stream not found",
                                          }),
                                        e.abrupt("return")
                                      );
                                    case 35:
                                      (s = _.getVideoTracks()[0]),
                                        (o = _.getAudioTracks()[0]),
                                        null === (v = this._openTelemetry) ||
                                          void 0 === v ||
                                          v.completeSpan({
                                            message:
                                              "Track Generated with height "
                                                .concat(
                                                  s.getSettings().height,
                                                  " and width "
                                                )
                                                .concat(s.getSettings().width),
                                            span: f,
                                            status: 1,
                                          });
                                    case 38:
                                      if (
                                        ((w =
                                          null === (l = this._openTelemetry) ||
                                          void 0 === l
                                            ? void 0
                                            : l.trace({
                                                spanName:
                                                  "Generating Producer Configuration",
                                                span: n,
                                              })),
                                        (R = { videoGoogleStartBitrate: 1e3 }),
                                        !this._forceH264)
                                      ) {
                                        e.next = 47;
                                        break;
                                      }
                                      if (
                                        (k =
                                          this._mediasoupDevice.rtpCapabilities.codecs.find(
                                            function (e) {
                                              return (
                                                "video/h264" ===
                                                e.mimeType.toLowerCase()
                                              );
                                            }
                                          ))
                                      ) {
                                        e.next = 45;
                                        break;
                                      }
                                      throw (
                                        (null === (E = this._videosdkLogs) ||
                                          void 0 === E ||
                                          E.pushLogs({
                                            logText:
                                              "Error EnableShare : desired H264 codec+configuration is not supported",
                                            logType: "ERROR",
                                          }),
                                        new Error(
                                          "desired H264 codec+configuration is not supported"
                                        ))
                                      );
                                    case 45:
                                      e.next = 52;
                                      break;
                                    case 47:
                                      if (!this._forceVP9) {
                                        e.next = 52;
                                        break;
                                      }
                                      if (
                                        (k =
                                          this._mediasoupDevice.rtpCapabilities.codecs.find(
                                            function (e) {
                                              return (
                                                "video/vp9" ===
                                                e.mimeType.toLowerCase()
                                              );
                                            }
                                          ))
                                      ) {
                                        e.next = 52;
                                        break;
                                      }
                                      throw (
                                        (null === (T = this._videosdkLogs) ||
                                          void 0 === T ||
                                          T.pushLogs({
                                            logText:
                                              "Error EnableShare :desired VP9 codec+configuration is not supported",
                                            logType: "ERROR",
                                          }),
                                        new Error(
                                          "desired VP9 codec+configuration is not supported"
                                        ))
                                      );
                                    case 52:
                                      return (
                                        this._useSharingSimulcast &&
                                          ((P =
                                            this._mediasoupDevice.rtpCapabilities.codecs.find(
                                              function (e) {
                                                return "video" === e.kind;
                                              }
                                            )),
                                          (S =
                                            (this._forceVP9 && k) ||
                                            "video/vp9" ===
                                              P.mimeType.toLowerCase()
                                              ? $e
                                              : Ke.map(function (e) {
                                                  return Ve(
                                                    Ve({}, e),
                                                    {},
                                                    { dtx: !0 }
                                                  );
                                                }))),
                                        null === (u = this._openTelemetry) ||
                                          void 0 === u ||
                                          u.completeSpan({
                                            span: w,
                                            status: 1,
                                            message:
                                              "Producer Configuration Generated",
                                          }),
                                        (w =
                                          null === (p = this._openTelemetry) ||
                                          void 0 === p
                                            ? void 0
                                            : p.trace({
                                                spanName:
                                                  "Creating Share Producer",
                                                span: n,
                                              })),
                                        (e.next = 57),
                                        this._sendTransport.produce({
                                          track: s,
                                          encodings: S,
                                          codecOptions: R,
                                          codec: k,
                                          appData: { share: !0 },
                                        })
                                      );
                                    case 57:
                                      if (
                                        ((this._shareProducer = e.sent),
                                        (C = U({
                                          id: this._shareProducer.id,
                                          type: "share",
                                          paused: this._shareProducer.paused,
                                          track: this._shareProducer.track,
                                          rtpParameters:
                                            this._shareProducer.rtpParameters,
                                          codec:
                                            this._shareProducer.rtpParameters.codecs[0].mimeType.split(
                                              "/"
                                            )[1],
                                          appData: { share: !0 },
                                          instance: this._shareProducer,
                                        })),
                                        He.dispatch(C),
                                        this._eventEmitter.emit(
                                          C.type,
                                          C.payload
                                        ),
                                        this._shareProducer.on(
                                          "transportclose",
                                          function () {
                                            var e,
                                              t = W(j._shareProducer.id);
                                            He.dispatch(t),
                                              j._eventEmitter.emit(
                                                t.type,
                                                t.payload
                                              ),
                                              null === (e = j._shareProducer) ||
                                                void 0 === e ||
                                                e.close(),
                                              (j._shareProducer = null);
                                          }
                                        ),
                                        this._shareProducer.on(
                                          "trackended",
                                          function () {
                                            var e;
                                            null === (e = j._openTelemetry) ||
                                              void 0 === e ||
                                              e.traceAutoComplete({
                                                spanName:
                                                  "this._shareProducer trackended or Share disconnected!",
                                                span: n,
                                                status: 2,
                                              }),
                                              He.dispatch(
                                                se({
                                                  type: "error",
                                                  text: "Share disconnected!",
                                                })
                                              ),
                                              j
                                                .disableShare()
                                                .catch(function () {});
                                          }
                                        ),
                                        null === (h = this._openTelemetry) ||
                                          void 0 === h ||
                                          h.completeSpan({
                                            span: w,
                                            status: 1,
                                            message: "Share Producer Created",
                                          }),
                                        !o)
                                      ) {
                                        e.next = 84;
                                        break;
                                      }
                                      return (
                                        (e.prev = 65),
                                        (D = { opusStereo: 1, opusDtx: 1 }),
                                        (w =
                                          null === (x = this._openTelemetry) ||
                                          void 0 === x
                                            ? void 0
                                            : x.trace({
                                                spanName:
                                                  "Creating Share Audio Producer",
                                                span: n,
                                              })),
                                        (e.next = 70),
                                        this._sendTransport.produce({
                                          track: o,
                                          codecOptions: D,
                                          appData: { share: !0 },
                                        })
                                      );
                                    case 70:
                                      (this._shareAudioProducer = e.sent),
                                        (I = U({
                                          id: this._shareAudioProducer.id,
                                          type: "share",
                                          paused:
                                            this._shareAudioProducer.paused,
                                          track: this._shareAudioProducer.track,
                                          rtpParameters:
                                            this._shareAudioProducer
                                              .rtpParameters,
                                          codec:
                                            this._shareAudioProducer.rtpParameters.codecs[0].mimeType.split(
                                              "/"
                                            )[1],
                                          appData: { share: !0 },
                                          instance: this._shareAudioProducer,
                                        })),
                                        He.dispatch(I),
                                        this._eventEmitter.emit(
                                          I.type,
                                          I.payload
                                        ),
                                        this._shareAudioProducer.on(
                                          "transportclose",
                                          function () {
                                            var e,
                                              t = W(j._shareAudioProducer.id);
                                            He.dispatch(t),
                                              j._eventEmitter.emit(
                                                t.type,
                                                t.payload
                                              ),
                                              null ===
                                                (e = j._shareAudioProducer) ||
                                                void 0 === e ||
                                                e.close(),
                                              (j._shareAudioProducer = null);
                                          }
                                        ),
                                        this._shareAudioProducer.on(
                                          "trackended",
                                          function () {
                                            var e;
                                            null === (e = j._openTelemetry) ||
                                              void 0 === e ||
                                              e.traceAutoComplete({
                                                spanName:
                                                  "this._shareAudioProducer trackended",
                                                span: n,
                                                status: 2,
                                              }),
                                              He.dispatch(
                                                se({
                                                  type: "error",
                                                  text: "Share disconnected!",
                                                })
                                              );
                                          }
                                        ),
                                        null === (O = this._openTelemetry) ||
                                          void 0 === O ||
                                          O.completeSpan({
                                            span: w,
                                            status: 1,
                                            message:
                                              "Share Audio Producer Created",
                                          }),
                                        (e.next = 84);
                                      break;
                                    case 79:
                                      return (
                                        (e.prev = 79),
                                        (e.t1 = e.catch(65)),
                                        (e.next = 83),
                                        this._protoo.request("produceError", {
                                          mediaType: "shareAudio",
                                          message: e.t1.message,
                                        })
                                      );
                                    case 83:
                                      null === (M = this._videosdkLogs) ||
                                        void 0 === M ||
                                        M.pushLogs({
                                          logText:
                                            "Error in shareAudio produceError",
                                          logType: "ERROR",
                                          attributes: { error: e.t1.message },
                                        });
                                    case 84:
                                      null === (m = this._openTelemetry) ||
                                        void 0 === m ||
                                        m.completeSpan({
                                          span: n,
                                          status: 1,
                                          message: "Enable Share Successful",
                                        }),
                                        (e.next = 98);
                                      break;
                                    case 87:
                                      return (
                                        (e.prev = 87),
                                        (e.t2 = e.catch(11)),
                                        Je.error(
                                          "enableShare() | failed:%o",
                                          e.t2
                                        ),
                                        null === (L = this._openTelemetry) ||
                                          void 0 === L ||
                                          L.completeSpan({
                                            span: n,
                                            status: 2,
                                            attributes: { error: e.t2.message },
                                            message:
                                              "Error in enableShare video produceError",
                                          }),
                                        console.log(
                                          "screen share catch",
                                          e.t2.message
                                        ),
                                        null === (A = this._videosdkLogs) ||
                                          void 0 === A ||
                                          A.pushLogs({
                                            logText:
                                              "Error in enableShare video produceError",
                                            logType: "ERROR",
                                            attributes: { error: e.t2.message },
                                          }),
                                        "NotAllowedError" !== e.t2.name &&
                                          He.dispatch(
                                            se({
                                              type: "error",
                                              text: "Error sharing: ".concat(
                                                e.t2
                                              ),
                                            })
                                          ),
                                        (e.next = 96),
                                        this._protoo.request("produceError", {
                                          mediaType: "share",
                                          message: e.t2.message,
                                        })
                                      );
                                    case 96:
                                      s && s.stop(), o && o.stop();
                                    case 98:
                                      He.dispatch(z(!1));
                                    case 99:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [
                                [11, 87],
                                [19, 25],
                                [65, 79],
                              ]
                            );
                          })
                        )),
                        function () {
                          return ft.apply(this, arguments);
                        }),
                    },
                    {
                      key: "disableShare",
                      value:
                        ((mt = (0, a.Z)(
                          d().mark(function e() {
                            var t, r, n, a, i, s, o, c, l, u, p, h, m;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (Je.debug("disableShare()"),
                                        (a =
                                          null === (t = this._openTelemetry) ||
                                          void 0 === t
                                            ? void 0
                                            : t.trace({
                                                spanName:
                                                  "disableShare() Calling",
                                                status: 1,
                                              })),
                                        this._shareProducer)
                                      ) {
                                        e.next = 5;
                                        break;
                                      }
                                      return (
                                        null === (i = this._openTelemetry) ||
                                          void 0 === i ||
                                          i.completeSpan({
                                            span: a,
                                            status: 2,
                                            message: "Share Producer Not found",
                                          }),
                                        e.abrupt("return")
                                      );
                                    case 5:
                                      return (
                                        (s =
                                          null === (r = this._openTelemetry) ||
                                          void 0 === r
                                            ? void 0
                                            : r.trace({
                                                spanName:
                                                  "Closing Share Producer",
                                                span: a,
                                                status: 1,
                                              })),
                                        this._shareProducer.close(),
                                        (o = W(this._shareProducer.id)),
                                        He.dispatch(o),
                                        this._eventEmitter.emit(
                                          o.type,
                                          o.payload
                                        ),
                                        this._shareAudioProducer &&
                                          ((u =
                                            null ===
                                              (c = this._openTelemetry) ||
                                            void 0 === c
                                              ? void 0
                                              : c.trace({
                                                  spanName:
                                                    "Closing Share Audio Producer",
                                                  span: a,
                                                  status: 1,
                                                })),
                                          this._shareAudioProducer.close(),
                                          (o = W(this._shareAudioProducer.id)),
                                          He.dispatch(o),
                                          this._eventEmitter.emit(
                                            o.type,
                                            o.payload
                                          ),
                                          null === (l = this._openTelemetry) ||
                                            void 0 === l ||
                                            l.completeSpan({
                                              span: u,
                                              status: 1,
                                              message:
                                                "Closed Share Audio Producer",
                                            })),
                                        (e.prev = 11),
                                        (e.next = 14),
                                        this._protoo.request("closeProducer", {
                                          producerId: this._shareProducer.id,
                                        })
                                      );
                                    case 14:
                                      if (!this._shareAudioProducer) {
                                        e.next = 17;
                                        break;
                                      }
                                      return (
                                        (e.next = 17),
                                        this._protoo.request("closeProducer", {
                                          producerId:
                                            this._shareAudioProducer.id,
                                        })
                                      );
                                    case 17:
                                      null === (p = this._openTelemetry) ||
                                        void 0 === p ||
                                        p.completeSpan({
                                          span: s,
                                          status: 1,
                                          message:
                                            "Requested Server to Close Producer",
                                        }),
                                        (e.next = 25);
                                      break;
                                    case 20:
                                      (e.prev = 20),
                                        (e.t0 = e.catch(11)),
                                        He.dispatch(
                                          se({
                                            type: "error",
                                            text: "Error closing server-side share Producer: ".concat(
                                              e.t0
                                            ),
                                          })
                                        ),
                                        null === (h = this._openTelemetry) ||
                                          void 0 === h ||
                                          h.completeSpan({
                                            span: a,
                                            status: 2,
                                            message:
                                              "Error closing server-side share Producer ".concat(
                                                e.t0
                                              ),
                                          }),
                                        null === (m = this._videosdkLogs) ||
                                          void 0 === m ||
                                          m.pushLogs({
                                            logText:
                                              "Error closing server-side share Producer",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          });
                                    case 25:
                                      (this._shareProducer = null),
                                        (this._shareAudioProducer = null),
                                        null === (n = this._openTelemetry) ||
                                          void 0 === n ||
                                          n.completeSpan({
                                            span: a,
                                            status: 1,
                                            message:
                                              "Screen Share Disabled Successfully",
                                          });
                                    case 28:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[11, 20]]
                            );
                          })
                        )),
                        function () {
                          return mt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "enableAudioOnly",
                      value:
                        ((ht = (0, a.Z)(
                          d().mark(function e() {
                            var t, r, n;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      Je.debug("enableAudioOnly()"),
                                        He.dispatch(N(!0)),
                                        this.disableWebcam(),
                                        (t = Fe(this._consumers.values())),
                                        (e.prev = 4),
                                        t.s();
                                    case 6:
                                      if ((r = t.n()).done) {
                                        e.next = 13;
                                        break;
                                      }
                                      if ("video" === (n = r.value).kind) {
                                        e.next = 10;
                                        break;
                                      }
                                      return e.abrupt("continue", 11);
                                    case 10:
                                      this._pauseConsumer(n);
                                    case 11:
                                      e.next = 6;
                                      break;
                                    case 13:
                                      e.next = 18;
                                      break;
                                    case 15:
                                      (e.prev = 15),
                                        (e.t0 = e.catch(4)),
                                        t.e(e.t0);
                                    case 18:
                                      return (e.prev = 18), t.f(), e.finish(18);
                                    case 21:
                                      He.dispatch(j(!0)), He.dispatch(N(!1));
                                    case 23:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[4, 15, 18, 21]]
                            );
                          })
                        )),
                        function () {
                          return ht.apply(this, arguments);
                        }),
                    },
                    {
                      key: "disableAudioOnly",
                      value:
                        ((pt = (0, a.Z)(
                          d().mark(function e() {
                            var t, r, n;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      Je.debug("disableAudioOnly()"),
                                        He.dispatch(N(!0)),
                                        !this._webcamProducer &&
                                          this._produce &&
                                          (P() || {}).webcamEnabled &&
                                          this.enableWebcam(),
                                        (t = Fe(this._consumers.values())),
                                        (e.prev = 4),
                                        t.s();
                                    case 6:
                                      if ((r = t.n()).done) {
                                        e.next = 13;
                                        break;
                                      }
                                      if ("video" === (n = r.value).kind) {
                                        e.next = 10;
                                        break;
                                      }
                                      return e.abrupt("continue", 11);
                                    case 10:
                                      this._resumeConsumer(n);
                                    case 11:
                                      e.next = 6;
                                      break;
                                    case 13:
                                      e.next = 18;
                                      break;
                                    case 15:
                                      (e.prev = 15),
                                        (e.t0 = e.catch(4)),
                                        t.e(e.t0);
                                    case 18:
                                      return (e.prev = 18), t.f(), e.finish(18);
                                    case 21:
                                      He.dispatch(j(!1)), He.dispatch(N(!1));
                                    case 23:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[4, 15, 18, 21]]
                            );
                          })
                        )),
                        function () {
                          return pt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "muteAudio",
                      value:
                        ((ut = (0, a.Z)(
                          d().mark(function e() {
                            return d().wrap(function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    Je.debug("muteAudio()"), He.dispatch(B(!0));
                                  case 2:
                                  case "end":
                                    return e.stop();
                                }
                            }, e);
                          })
                        )),
                        function () {
                          return ut.apply(this, arguments);
                        }),
                    },
                    {
                      key: "unmuteAudio",
                      value:
                        ((lt = (0, a.Z)(
                          d().mark(function e() {
                            return d().wrap(function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    Je.debug("unmuteAudio()"),
                                      He.dispatch(B(!1));
                                  case 2:
                                  case "end":
                                    return e.stop();
                                }
                            }, e);
                          })
                        )),
                        function () {
                          return lt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "handleRemoteRestartIce",
                      value:
                        ((dt = (0, a.Z)(
                          d().mark(function e(t) {
                            var r, n, a, i, s, o, c, l;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (a = t.iceParameters),
                                        (i = t.transportId),
                                        (s = t.internalSpan),
                                        i ===
                                          (null === (r = this._sendTransport) ||
                                          void 0 === r
                                            ? void 0
                                            : r.id) &&
                                          this._sendTransport.restartIce({
                                            iceParameters: a,
                                          }),
                                        i ===
                                          (null === (n = this._recvTransport) ||
                                          void 0 === n
                                            ? void 0
                                            : n.id) &&
                                          this._recvTransport.restartIce({
                                            iceParameters: a,
                                          }),
                                        (e.prev = 3),
                                        (e.next = 6),
                                        this._protoo.request("iceRestarted", {
                                          transportId: i,
                                        })
                                      );
                                    case 6:
                                      null === (o = this._openTelemetry) ||
                                        void 0 === o ||
                                        o.completeSpan({
                                          span: s,
                                          status: 1,
                                          message: "iceRestarted",
                                        }),
                                        (e.next = 14);
                                      break;
                                    case 9:
                                      (e.prev = 9),
                                        (e.t0 = e.catch(3)),
                                        null === (c = this._openTelemetry) ||
                                          void 0 === c ||
                                          c.completeSpan({
                                            span: s,
                                            status: 2,
                                            message:
                                              "handleRemoteRestartIce() ICE restart failed ".concat(
                                                e.t0
                                              ),
                                          }),
                                        null === (l = this._videosdkLogs) ||
                                          void 0 === l ||
                                          l.pushLogs({
                                            logText:
                                              "Error handleRemoteRestartIce() ICE restart failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        He.dispatch(
                                          se({
                                            type: "error",
                                            text: "ICE restart failed: ".concat(
                                              e.t0
                                            ),
                                          })
                                        );
                                    case 14:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[3, 9]]
                            );
                          })
                        )),
                        function (e) {
                          return dt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "restartIce",
                      value:
                        ((ct = (0, a.Z)(
                          d().mark(function e() {
                            var t, r, n;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (Je.debug("restartIce()"),
                                        He.dispatch(F(!0)),
                                        (e.prev = 2),
                                        !this._sendTransport)
                                      ) {
                                        e.next = 9;
                                        break;
                                      }
                                      return (
                                        (e.next = 6),
                                        this._protoo.request("restartIce", {
                                          transportId: this._sendTransport.id,
                                        })
                                      );
                                    case 6:
                                      return (
                                        (t = e.sent),
                                        (e.next = 9),
                                        this._sendTransport.restartIce({
                                          iceParameters: t,
                                        })
                                      );
                                    case 9:
                                      if (!this._recvTransport) {
                                        e.next = 15;
                                        break;
                                      }
                                      return (
                                        (e.next = 12),
                                        this._protoo.request("restartIce", {
                                          transportId: this._recvTransport.id,
                                        })
                                      );
                                    case 12:
                                      return (
                                        (r = e.sent),
                                        (e.next = 15),
                                        this._recvTransport.restartIce({
                                          iceParameters: r,
                                        })
                                      );
                                    case 15:
                                      He.dispatch(
                                        se({ text: "ICE restarted" })
                                      ),
                                        (e.next = 23);
                                      break;
                                    case 18:
                                      (e.prev = 18),
                                        (e.t0 = e.catch(2)),
                                        Je.error(
                                          "restartIce() | failed:%o",
                                          e.t0
                                        ),
                                        He.dispatch(
                                          se({
                                            type: "error",
                                            text: "ICE restart failed: ".concat(
                                              e.t0
                                            ),
                                          })
                                        ),
                                        null === (n = this._videosdkLogs) ||
                                          void 0 === n ||
                                          n.pushLogs({
                                            logText:
                                              "Error restartIce() ICE restart failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          });
                                    case 23:
                                      He.dispatch(F(!1));
                                    case 24:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 18]]
                            );
                          })
                        )),
                        function () {
                          return ct.apply(this, arguments);
                        }),
                    },
                    {
                      key: "setMaxSendingSpatialLayer",
                      value:
                        ((ot = (0, a.Z)(
                          d().mark(function e(t) {
                            var r;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (Je.debug(
                                          "setMaxSendingSpatialLayer() [spatialLayer:%s]",
                                          t
                                        ),
                                        (e.prev = 1),
                                        !this._webcamProducer)
                                      ) {
                                        e.next = 7;
                                        break;
                                      }
                                      return (
                                        (e.next = 5),
                                        this._webcamProducer.setMaxSpatialLayer(
                                          t
                                        )
                                      );
                                    case 5:
                                      e.next = 10;
                                      break;
                                    case 7:
                                      if (!this._shareProducer) {
                                        e.next = 10;
                                        break;
                                      }
                                      return (
                                        (e.next = 10),
                                        this._shareProducer.setMaxSpatialLayer(
                                          t
                                        )
                                      );
                                    case 10:
                                      e.next = 17;
                                      break;
                                    case 12:
                                      (e.prev = 12),
                                        (e.t0 = e.catch(1)),
                                        Je.error(
                                          "setMaxSendingSpatialLayer() | failed:%o",
                                          e.t0
                                        ),
                                        null === (r = this._videosdkLogs) ||
                                          void 0 === r ||
                                          r.pushLogs({
                                            logText:
                                              "Error setting max sending video spatial layer",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        He.dispatch(
                                          se({
                                            type: "error",
                                            text: "Error setting max sending video spatial layer: ".concat(
                                              e.t0
                                            ),
                                          })
                                        );
                                    case 17:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[1, 12]]
                            );
                          })
                        )),
                        function (e) {
                          return ot.apply(this, arguments);
                        }),
                    },
                    {
                      key: "setWebcamQuality",
                      value:
                        ((st = (0, a.Z)(
                          d().mark(function e(t) {
                            var r, n;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (this._webcamProducer) {
                                        e.next = 2;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 2:
                                      if (
                                        ((r = this._webcam.resolution),
                                        (n = Ze[r][t].s),
                                        this._webcamProducer.maxSpatialLayer !=
                                          n)
                                      ) {
                                        e.next = 6;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 6:
                                      return (
                                        (e.next = 8),
                                        this._webcamProducer.setMaxSpatialLayer(
                                          n
                                        )
                                      );
                                    case 8:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return st.apply(this, arguments);
                        }),
                    },
                    {
                      key: "setConsumerQuality",
                      value:
                        ((it = (0, a.Z)(
                          d().mark(function e(t, r) {
                            var n, a, i, s, o, c, l;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (s = this._webcam.resolution),
                                        (o =
                                          null === (n = this._openTelemetry) ||
                                          void 0 === n
                                            ? void 0
                                            : n.trace({
                                                spanName: 'Setting "'.concat(
                                                  r,
                                                  '" Quality'
                                                ),
                                              })),
                                        (c = Ze[s][r].s),
                                        (l = Ze[s][r].t),
                                        null === (a = this._openTelemetry) ||
                                          void 0 === a ||
                                          a.traceAutoComplete({
                                            spanName:
                                              "Getting spatial & temporal layers",
                                            span: o,
                                            attributes: {
                                              spatialLayers: JSON.parse(c),
                                              temporalLayers: JSON.parse(l),
                                            },
                                            status: 1,
                                          }),
                                        (e.next = 7),
                                        this.setConsumerPreferredLayers(t, c, l)
                                      );
                                    case 7:
                                      null === (i = this._openTelemetry) ||
                                        void 0 === i ||
                                        i.completeSpan({
                                          message: "Done",
                                          span: o,
                                          status: 1,
                                        });
                                    case 8:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e, t) {
                          return it.apply(this, arguments);
                        }),
                    },
                    {
                      key: "setViewPort",
                      value:
                        ((at = (0, a.Z)(
                          d().mark(function e(t, r, n) {
                            var a, i, s, o;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (this._consumers.get(t.id)) {
                                        e.next = 2;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 2:
                                      if (
                                        ((a = ke(
                                          this._consumers.get(t.id),
                                          r,
                                          n
                                        )),
                                        (i = a.consumerId),
                                        (s = a.newPreferredSpatialLayer),
                                        (o = a.newPreferredTemporalLayer),
                                        !i)
                                      ) {
                                        e.next = 6;
                                        break;
                                      }
                                      return (
                                        (e.next = 6),
                                        this.setConsumerPreferredLayers(i, s, o)
                                      );
                                    case 6:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e, t, r) {
                          return at.apply(this, arguments);
                        }),
                    },
                    {
                      key: "setConsumerPreferredLayers",
                      value:
                        ((nt = (0, a.Z)(
                          d().mark(function e(t, r, n) {
                            var a, i;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        Je.debug(
                                          "setConsumerPreferredLayers() [consumerId:%s, spatialLayer:%s, temporalLayer:%s]",
                                          t,
                                          r,
                                          n
                                        ),
                                        (e.prev = 1),
                                        (a = this._consumers.get(t))
                                          .spatialLayers > 1 &&
                                          ((a.preferredSpatialLayer = r),
                                          (a.preferredTemporalLayer = n)),
                                        (e.next = 6),
                                        this._protoo.request(
                                          "setConsumerPreferredLayers",
                                          {
                                            consumerId: t,
                                            spatialLayer: r,
                                            temporalLayer: n,
                                          }
                                        )
                                      );
                                    case 6:
                                      He.dispatch(te(t, r, n)), (e.next = 14);
                                      break;
                                    case 9:
                                      (e.prev = 9),
                                        (e.t0 = e.catch(1)),
                                        Je.error(
                                          "setConsumerPreferredLayers() | failed:%o",
                                          e.t0
                                        ),
                                        null === (i = this._videosdkLogs) ||
                                          void 0 === i ||
                                          i.pushLogs({
                                            logText:
                                              "Error setting Consumer preferred layers:",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        He.dispatch(
                                          se({
                                            type: "error",
                                            text: "Error setting Consumer preferred layers: ".concat(
                                              e.t0
                                            ),
                                          })
                                        );
                                    case 14:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[1, 9]]
                            );
                          })
                        )),
                        function (e, t, r) {
                          return nt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "setConsumerPriority",
                      value:
                        ((rt = (0, a.Z)(
                          d().mark(function e(t, r) {
                            var n;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        Je.debug(
                                          "setConsumerPriority() [consumerId:%s, priority:%d]",
                                          t,
                                          r
                                        ),
                                        (e.prev = 1),
                                        (e.next = 4),
                                        this._protoo.request(
                                          "setConsumerPriority",
                                          { consumerId: t, priority: r }
                                        )
                                      );
                                    case 4:
                                      He.dispatch(re(t, r)), (e.next = 12);
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(1)),
                                        Je.error(
                                          "setConsumerPriority() | failed:%o",
                                          e.t0
                                        ),
                                        null === (n = this._videosdkLogs) ||
                                          void 0 === n ||
                                          n.pushLogs({
                                            logText:
                                              "Error setting Consumer priority",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        He.dispatch(
                                          se({
                                            type: "error",
                                            text: "Error setting Consumer priority: ".concat(
                                              e.t0
                                            ),
                                          })
                                        );
                                    case 12:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[1, 7]]
                            );
                          })
                        )),
                        function (e, t) {
                          return rt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "requestConsumerKeyFrame",
                      value:
                        ((tt = (0, a.Z)(
                          d().mark(function e(t) {
                            var r;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        Je.debug(
                                          "requestConsumerKeyFrame() [consumerId:%s]",
                                          t
                                        ),
                                        (e.prev = 1),
                                        (e.next = 4),
                                        this._protoo.request(
                                          "requestConsumerKeyFrame",
                                          { consumerId: t }
                                        )
                                      );
                                    case 4:
                                      He.dispatch(
                                        se({
                                          text: "Keyframe requested for video consumer",
                                        })
                                      ),
                                        (e.next = 12);
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(1)),
                                        Je.error(
                                          "requestConsumerKeyFrame() | failed:%o",
                                          e.t0
                                        ),
                                        null === (r = this._videosdkLogs) ||
                                          void 0 === r ||
                                          r.pushLogs({
                                            logText:
                                              "Error requesting key frame for Consumer",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        He.dispatch(
                                          se({
                                            type: "error",
                                            text: "Error requesting key frame for Consumer: ".concat(
                                              e.t0
                                            ),
                                          })
                                        );
                                    case 12:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[1, 7]]
                            );
                          })
                        )),
                        function (e) {
                          return tt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "enableChatDataProducer",
                      value:
                        ((et = (0, a.Z)(
                          d().mark(function e() {
                            var t,
                              r = this;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (Je.debug("enableChatDataProducer()"),
                                        this._useDataChannel)
                                      ) {
                                        e.next = 3;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 3:
                                      return (
                                        (e.prev = 3),
                                        (e.next = 6),
                                        this._sendTransport.produceData({
                                          ordered: !1,
                                          maxRetransmits: 1,
                                          label: "chat",
                                          priority: "medium",
                                          appData: {
                                            info: "my-chat-DataProducer",
                                          },
                                        })
                                      );
                                    case 6:
                                      (this._chatDataProducer = e.sent),
                                        He.dispatch(
                                          Z({
                                            id: this._chatDataProducer.id,
                                            sctpStreamParameters:
                                              this._chatDataProducer
                                                .sctpStreamParameters,
                                            label: this._chatDataProducer.label,
                                            protocol:
                                              this._chatDataProducer.protocol,
                                          })
                                        ),
                                        this._chatDataProducer.on(
                                          "transportclose",
                                          function () {
                                            r._chatDataProducer = null;
                                          }
                                        ),
                                        this._chatDataProducer.on(
                                          "open",
                                          function () {
                                            Je.debug(
                                              'chat DataProducer "open" event'
                                            );
                                          }
                                        ),
                                        this._chatDataProducer.on(
                                          "close",
                                          function () {
                                            Je.error(
                                              'chat DataProducer "close" event'
                                            ),
                                              (r._chatDataProducer = null),
                                              He.dispatch(
                                                se({
                                                  type: "error",
                                                  text: "Chat DataProducer closed",
                                                })
                                              );
                                          }
                                        ),
                                        this._chatDataProducer.on(
                                          "error",
                                          function (e) {
                                            Je.error(
                                              'chat DataProducer "error" event:%o',
                                              e
                                            ),
                                              He.dispatch(
                                                se({
                                                  type: "error",
                                                  text: "Chat DataProducer error: ".concat(
                                                    e
                                                  ),
                                                })
                                              );
                                          }
                                        ),
                                        this._chatDataProducer.on(
                                          "bufferedamountlow",
                                          function () {
                                            Je.debug(
                                              'chat DataProducer "bufferedamountlow" event'
                                            );
                                          }
                                        ),
                                        (e.next = 21);
                                      break;
                                    case 15:
                                      throw (
                                        ((e.prev = 15),
                                        (e.t0 = e.catch(3)),
                                        Je.error(
                                          "enableChatDataProducer() | failed:%o",
                                          e.t0
                                        ),
                                        null === (t = this._videosdkLogs) ||
                                          void 0 === t ||
                                          t.pushLogs({
                                            logText:
                                              "Error enabling chat DataProducer",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        He.dispatch(
                                          se({
                                            type: "error",
                                            text: "Error enabling chat DataProducer: ".concat(
                                              e.t0
                                            ),
                                          })
                                        ),
                                        e.t0)
                                      );
                                    case 21:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[3, 15]]
                            );
                          })
                        )),
                        function () {
                          return et.apply(this, arguments);
                        }),
                    },
                    {
                      key: "enableBotDataProducer",
                      value:
                        ((Xe = (0, a.Z)(
                          d().mark(function e() {
                            var t,
                              r = this;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (Je.debug("enableBotDataProducer()"),
                                        this._useDataChannel)
                                      ) {
                                        e.next = 3;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 3:
                                      return (
                                        (e.prev = 3),
                                        (e.next = 6),
                                        this._sendTransport.produceData({
                                          ordered: !1,
                                          maxPacketLifeTime: 2e3,
                                          label: "bot",
                                          priority: "medium",
                                          appData: {
                                            info: "my-bot-DataProducer",
                                          },
                                        })
                                      );
                                    case 6:
                                      (this._botDataProducer = e.sent),
                                        He.dispatch(
                                          Z({
                                            id: this._botDataProducer.id,
                                            sctpStreamParameters:
                                              this._botDataProducer
                                                .sctpStreamParameters,
                                            label: this._botDataProducer.label,
                                            protocol:
                                              this._botDataProducer.protocol,
                                          })
                                        ),
                                        this._botDataProducer.on(
                                          "transportclose",
                                          function () {
                                            r._botDataProducer = null;
                                          }
                                        ),
                                        this._botDataProducer.on(
                                          "open",
                                          function () {
                                            Je.debug(
                                              'bot DataProducer "open" event'
                                            );
                                          }
                                        ),
                                        this._botDataProducer.on(
                                          "close",
                                          function () {
                                            Je.error(
                                              'bot DataProducer "close" event'
                                            ),
                                              (r._botDataProducer = null),
                                              He.dispatch(
                                                se({
                                                  type: "error",
                                                  text: "Bot DataProducer closed",
                                                })
                                              );
                                          }
                                        ),
                                        this._botDataProducer.on(
                                          "error",
                                          function (e) {
                                            Je.error(
                                              'bot DataProducer "error" event:%o',
                                              e
                                            ),
                                              He.dispatch(
                                                se({
                                                  type: "error",
                                                  text: "Bot DataProducer error: ".concat(
                                                    e
                                                  ),
                                                })
                                              );
                                          }
                                        ),
                                        this._botDataProducer.on(
                                          "bufferedamountlow",
                                          function () {
                                            Je.debug(
                                              'bot DataProducer "bufferedamountlow" event'
                                            );
                                          }
                                        ),
                                        (e.next = 21);
                                      break;
                                    case 15:
                                      throw (
                                        ((e.prev = 15),
                                        (e.t0 = e.catch(3)),
                                        Je.error(
                                          "enableBotDataProducer() | failed:%o",
                                          e.t0
                                        ),
                                        null === (t = this._videosdkLogs) ||
                                          void 0 === t ||
                                          t.pushLogs({
                                            logText:
                                              "Error enabling bot DataProducer",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        He.dispatch(
                                          se({
                                            type: "error",
                                            text: "Error enabling bot DataProducer: ".concat(
                                              e.t0
                                            ),
                                          })
                                        ),
                                        e.t0)
                                      );
                                    case 21:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[3, 15]]
                            );
                          })
                        )),
                        function () {
                          return Xe.apply(this, arguments);
                        }),
                    },
                    {
                      key: "sendChatMessage",
                      value:
                        ((Ye = (0, a.Z)(
                          d().mark(function e(t) {
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (Je.debug(
                                          'sendChatMessage() [text:"%s]',
                                          t
                                        ),
                                        this._chatDataProducer)
                                      ) {
                                        e.next = 4;
                                        break;
                                      }
                                      return (
                                        He.dispatch(
                                          se({
                                            type: "error",
                                            text: "No chat DataProducer",
                                          })
                                        ),
                                        e.abrupt("return")
                                      );
                                    case 4:
                                      try {
                                        this._chatDataProducer.send(t);
                                      } catch (e) {
                                        Je.error(
                                          "chat DataProducer.send() failed:%o",
                                          e
                                        ),
                                          He.dispatch(
                                            se({
                                              type: "error",
                                              text: "chat DataProducer.send() failed: ".concat(
                                                e
                                              ),
                                            })
                                          );
                                      }
                                    case 5:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return Ye.apply(this, arguments);
                        }),
                    },
                    {
                      key: "sendBotMessage",
                      value:
                        ((Qe = (0, a.Z)(
                          d().mark(function e(t) {
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (Je.debug(
                                          'sendBotMessage() [text:"%s]',
                                          t
                                        ),
                                        this._botDataProducer)
                                      ) {
                                        e.next = 4;
                                        break;
                                      }
                                      return (
                                        He.dispatch(
                                          se({
                                            type: "error",
                                            text: "No bot DataProducer",
                                          })
                                        ),
                                        e.abrupt("return")
                                      );
                                    case 4:
                                      try {
                                        this._botDataProducer.send(t);
                                      } catch (e) {
                                        Je.error(
                                          "bot DataProducer.send() failed:%o",
                                          e
                                        ),
                                          He.dispatch(
                                            se({
                                              type: "error",
                                              text: "bot DataProducer.send() failed: ".concat(
                                                e
                                              ),
                                            })
                                          );
                                      }
                                    case 5:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return Qe.apply(this, arguments);
                        }),
                    },
                    {
                      key: "changeDisplayName",
                      value:
                        ((We = (0, a.Z)(
                          d().mark(function e(t) {
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        Je.debug(
                                          'changeDisplayName() [displayName:"%s"]',
                                          t
                                        ),
                                        T({ displayName: t }),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request(
                                          "changeDisplayName",
                                          { displayName: t }
                                        )
                                      );
                                    case 5:
                                      (this._displayName = t),
                                        He.dispatch(A(t)),
                                        He.dispatch(
                                          se({ text: "Display name changed" })
                                        ),
                                        (e.next = 15);
                                      break;
                                    case 10:
                                      (e.prev = 10),
                                        (e.t0 = e.catch(2)),
                                        Je.error(
                                          "changeDisplayName() | failed: %o",
                                          e.t0
                                        ),
                                        He.dispatch(
                                          se({
                                            type: "error",
                                            text: "Could not change display name: ".concat(
                                              e.t0
                                            ),
                                          })
                                        ),
                                        He.dispatch(A());
                                    case 15:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 10]]
                            );
                          })
                        )),
                        function (e) {
                          return We.apply(this, arguments);
                        }),
                    },
                    {
                      key: "openConnection",
                      value:
                        ((Ue = (0, a.Z)(
                          d().mark(function e(t) {
                            var r, n;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (r = t.roomId),
                                        (n = t.payload),
                                        (e.next = 3),
                                        this._protoo
                                          .request("openConnection", {
                                            roomId: r,
                                            payload: n,
                                          })
                                          .catch(function (e) {
                                            throw new Error(e);
                                          })
                                      );
                                    case 3:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return Ue.apply(this, arguments);
                        }),
                    },
                    {
                      key: "closeConnection",
                      value:
                        ((Ne = (0, a.Z)(
                          d().mark(function e(t) {
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (e.next = 2),
                                        this._protoo.request(
                                          "closeConnection",
                                          { roomId: t }
                                        )
                                      );
                                    case 2:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return Ne.apply(this, arguments);
                        }),
                    },
                    {
                      key: "switchTo",
                      value:
                        ((je = (0, a.Z)(
                          d().mark(function e(t) {
                            var r, n, a;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (r = t.roomId),
                                        (n = t.peerIds),
                                        (a = t.payload),
                                        (e.next = 3),
                                        this._protoo.request(
                                          "requestSwitchRoom",
                                          { roomId: r, peerIds: n, payload: a }
                                        )
                                      );
                                    case 3:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return je.apply(this, arguments);
                        }),
                    },
                    {
                      key: "switchPeerRoom",
                      value:
                        ((Le = (0, a.Z)(
                          d().mark(function e(t) {
                            var r, n, a, i;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (r = t.peerId),
                                        (n = t.roomId),
                                        (a = t.payload),
                                        (i = t.token),
                                        (e.next = 3),
                                        this._protoo.request("switchPeerRoom", {
                                          roomId: n,
                                          peerId: r,
                                          payload: a,
                                          token: i,
                                        })
                                      );
                                    case 3:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return Le.apply(this, arguments);
                        }),
                    },
                    {
                      key: "connectionSwitchPeerRoom",
                      value:
                        ((Me = (0, a.Z)(
                          d().mark(function e(t) {
                            var r, n, a, i, s;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (r = t.roomId),
                                        (n = t.connectionRoomId),
                                        (a = t.peerId),
                                        (i = t.payload),
                                        (s = t.token),
                                        (e.next = 3),
                                        this._protoo.request(
                                          "connectionSwitchPeerRoom",
                                          {
                                            roomId: r,
                                            connectionRoomId: n,
                                            peerId: a,
                                            payload: i,
                                            token: s,
                                          }
                                        )
                                      );
                                    case 3:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return Me.apply(this, arguments);
                        }),
                    },
                    {
                      key: "connectionSendChatMessage",
                      value:
                        ((Ie = (0, a.Z)(
                          d().mark(function e(t) {
                            var r, n;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (r = t.roomId),
                                        (n = t.message),
                                        (e.next = 3),
                                        this._protoo.request(
                                          "connectionSendChatMessage",
                                          { roomId: r, message: n }
                                        )
                                      );
                                    case 3:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return Ie.apply(this, arguments);
                        }),
                    },
                    {
                      key: "connectionEndMeeting",
                      value:
                        ((De = (0, a.Z)(
                          d().mark(function e(t) {
                            var r;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (r = t.roomId),
                                        (e.next = 3),
                                        this._protoo.request(
                                          "connectionCloseRoom",
                                          { roomId: r }
                                        )
                                      );
                                    case 3:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return De.apply(this, arguments);
                        }),
                    },
                    {
                      key: "pubsubPublish",
                      value:
                        ((Oe = (0, a.Z)(
                          d().mark(function e(t, r, n, a) {
                            var i, s, o, c, l, u;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        ((e.prev = 0), null != n && n.sendOnly)
                                      ) {
                                        if (((i = n.sendOnly), (s = []), i)) {
                                          o = Fe(i);
                                          try {
                                            for (o.s(); !(c = o.n()).done; )
                                              (l = c.value) &&
                                                s.push(l.toString());
                                          } catch (e) {
                                            o.e(e);
                                          } finally {
                                            o.f();
                                          }
                                        }
                                        n.sendOnly = s;
                                      }
                                      return (
                                        (e.next = 4),
                                        this._protoo.request("pubsubPublish", {
                                          topic: t,
                                          message: r,
                                          options: n,
                                          payload: a,
                                        })
                                      );
                                    case 4:
                                      e.next = 10;
                                      break;
                                    case 6:
                                      (e.prev = 6),
                                        (e.t0 = e.catch(0)),
                                        null === (u = this._videosdkLogs) ||
                                          void 0 === u ||
                                          u.pushLogs({
                                            logText:
                                              "Error pubsubPublish() | failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        Je.error(
                                          "pubsubPublish() | failed: %o",
                                          e.t0
                                        );
                                    case 10:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[0, 6]]
                            );
                          })
                        )),
                        function (e, t, r, n) {
                          return Oe.apply(this, arguments);
                        }),
                    },
                    {
                      key: "pubsubSubscribe",
                      value:
                        ((xe = (0, a.Z)(
                          d().mark(function e(t) {
                            var r, n;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (e.prev = 0),
                                        (e.next = 3),
                                        this._protoo.request(
                                          "pubsubSubscribe",
                                          { topic: t }
                                        )
                                      );
                                    case 3:
                                      return (
                                        (r = e.sent), e.abrupt("return", r)
                                      );
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(0)),
                                        null === (n = this._videosdkLogs) ||
                                          void 0 === n ||
                                          n.pushLogs({
                                            logText:
                                              "Error pubsubSubscribe() | failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        Je.error(
                                          "pubsubSubscribe() | failed: %o",
                                          e.t0
                                        );
                                    case 11:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[0, 7]]
                            );
                          })
                        )),
                        function (e) {
                          return xe.apply(this, arguments);
                        }),
                    },
                    {
                      key: "pubsubUnsubscribe",
                      value:
                        ((Se = (0, a.Z)(
                          d().mark(function e(t) {
                            var r;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (e.prev = 0),
                                        (e.next = 3),
                                        this._protoo.request(
                                          "pubsubUnsubscribe",
                                          { topic: t }
                                        )
                                      );
                                    case 3:
                                      e.next = 9;
                                      break;
                                    case 5:
                                      (e.prev = 5),
                                        (e.t0 = e.catch(0)),
                                        null === (r = this._videosdkLogs) ||
                                          void 0 === r ||
                                          r.pushLogs({
                                            logText:
                                              "Error pubsubUnsubscribe() | failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        Je.error(
                                          "pubsubUnsubscribe() | failed: %o",
                                          e.t0
                                        );
                                    case 9:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[0, 5]]
                            );
                          })
                        )),
                        function (e) {
                          return Se.apply(this, arguments);
                        }),
                    },
                    {
                      key: "closeRoom",
                      value:
                        ((we = (0, a.Z)(
                          d().mark(function e() {
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (e.next = 2),
                                        this._protoo.request("closeRoom", {})
                                      );
                                    case 2:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return we.apply(this, arguments);
                        }),
                    },
                    {
                      key: "removePeer",
                      value:
                        ((ye = (0, a.Z)(
                          d().mark(function e(t) {
                            var r;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (null === (r = this._openTelemetry) ||
                                          void 0 === r ||
                                          r.traceAutoComplete({
                                            spanName: "Removing peer ".concat(
                                              t
                                            ),
                                            status: 1,
                                          }),
                                        null != t)
                                      ) {
                                        e.next = 3;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 3:
                                      return (
                                        (e.next = 5),
                                        this._protoo.request("removePeer", {
                                          peerId: t,
                                        })
                                      );
                                    case 5:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return ye.apply(this, arguments);
                        }),
                    },
                    {
                      key: "startPingPong",
                      value:
                        ((ge = (0, a.Z)(
                          d().mark(function e() {
                            var t = this;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      null != this._pingWebsocketInterval &&
                                        clearInterval(
                                          this._pingWebsocketInterval
                                        ),
                                        (this._pingWebsocketInterval =
                                          setInterval(function () {
                                            t.pingWebSocket();
                                          }, 2e3));
                                    case 2:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return ge.apply(this, arguments);
                        }),
                    },
                    {
                      key: "pingWebSocket",
                      value:
                        ((_e = (0, a.Z)(
                          d().mark(function e() {
                            var t,
                              r = this;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (!this._closed) {
                                        e.next = 2;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 2:
                                      (t = !1),
                                        this._protoo
                                          .request("ping")
                                          .then(function (e) {
                                            e && (t = !0);
                                          })
                                          .catch(function (e) {}),
                                        setTimeout(function () {
                                          t
                                            ? (!r._isWebsocketAlive ||
                                              r._pingWebsocketFailedCounter > 1
                                                ? (r._eventEmitter.emit(
                                                    "MEETING_STATE_CHANGED",
                                                    { state: "CONNECTED" }
                                                  ),
                                                  (r._isWebsocketAlive = !0),
                                                  (r._pingWebsocketFailedCounter = 0),
                                                  r.restartIce())
                                                : ("failed" !=
                                                    r._transportState &&
                                                    "disconnected" !=
                                                      r._transportState) ||
                                                  (console.log(
                                                    "Calling Restart Ice based on transport state",
                                                    r._transportState
                                                  ),
                                                  r.restartIce()),
                                              (r._pingWebsocketFailedCounter = 0))
                                            : (r._isWebsocketAlive &&
                                                r._pingWebsocketFailedCounter >
                                                  1 &&
                                                (r._eventEmitter.emit(
                                                  "MEETING_STATE_CHANGED",
                                                  { state: "DISCONNECTED" }
                                                ),
                                                (r._isWebsocketAlive = !1),
                                                r.startInternetPingPong()),
                                              (r._pingWebsocketFailedCounter =
                                                r._pingWebsocketFailedCounter +
                                                1));
                                        }, 1e3);
                                    case 5:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return _e.apply(this, arguments);
                        }),
                    },
                    {
                      key: "startInternetPingPong",
                      value:
                        ((ve = (0, a.Z)(
                          d().mark(function e() {
                            var t = this;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      null != this._pingInternetInterval &&
                                        clearInterval(
                                          this._pingInternetInterval
                                        ),
                                        (this._pingInternetInterval =
                                          setInterval(function () {
                                            t.pingInternet();
                                          }, 2e3));
                                    case 2:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return ve.apply(this, arguments);
                        }),
                    },
                    {
                      key: "pingInternet",
                      value:
                        ((fe = (0, a.Z)(
                          d().mark(function e() {
                            var t,
                              r,
                              n,
                              a,
                              i,
                              s,
                              o = this;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (!this._closed) {
                                        e.next = 2;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 2:
                                      return (
                                        null === (t = this._videosdkLogs) ||
                                          void 0 === t ||
                                          t.pushLogs({
                                            logText: "pinging internet",
                                            logType: "INFO",
                                          }),
                                        (r = new AbortController()),
                                        (n = r.signal),
                                        (a = setTimeout(function () {
                                          r.abort();
                                        }, 1e3)),
                                        (e.next = 8),
                                        fetch(
                                          "https://".concat(
                                            this._signalingBaseUrl,
                                            "/ping"
                                          ),
                                          { method: "GET", signal: n }
                                        )
                                          .then(function (e) {
                                            return clearTimeout(a), e.text();
                                          })
                                          .catch(function (e) {
                                            var t;
                                            return (
                                              null === (t = o._videosdkLogs) ||
                                                void 0 === t ||
                                                t.pushLogs({
                                                  logText:
                                                    "Error pingInternet failed",
                                                  logType: "ERROR",
                                                  attributes: {
                                                    error: e.message,
                                                  },
                                                }),
                                              "failed"
                                            );
                                          })
                                      );
                                    case 8:
                                      if ("pong" != e.sent) {
                                        e.next = 19;
                                        break;
                                      }
                                      if (
                                        (null === (i = this._videosdkLogs) ||
                                          void 0 === i ||
                                          i.pushLogs({
                                            logText: "Pong",
                                            logType: "INFO",
                                          }),
                                        !(
                                          this._pingWebsocketFailedCounter >
                                            5 && this._pongInternetCounter > 3
                                        ) || this._isWebsocketAlive)
                                      ) {
                                        e.next = 17;
                                        break;
                                      }
                                      return (
                                        (this._pongInternetCounter = 0),
                                        this.close({ sendLeft: !1 }),
                                        null === (s = this._videosdkLogs) ||
                                          void 0 === s ||
                                          s.pushLogs({
                                            logText:
                                              "Re-join the meeting, after diconnect",
                                            logType: "INFO",
                                          }),
                                        (e.next = 17),
                                        this.join()
                                      );
                                    case 17:
                                      (this._pongInternetCounter =
                                        this._pongInternetCounter + 1),
                                        this._isWebsocketAlive &&
                                          ((this._pongInternetCounter = 0),
                                          null != this._pingInternetInterval &&
                                            (clearInterval(
                                              this._pingInternetInterval
                                            ),
                                            (this._pingInternetInterval =
                                              null)));
                                    case 19:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return fe.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getSendTransportRemoteStats",
                      value:
                        ((me = (0, a.Z)(
                          d().mark(function e() {
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (Je.debug(
                                          "getSendTransportRemoteStats()"
                                        ),
                                        this._sendTransport)
                                      ) {
                                        e.next = 3;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 3:
                                      return e.abrupt(
                                        "return",
                                        this._protoo.request(
                                          "getTransportStats",
                                          {
                                            transportId: this._sendTransport.id,
                                          }
                                        )
                                      );
                                    case 4:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return me.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getRecvTransportRemoteStats",
                      value:
                        ((he = (0, a.Z)(
                          d().mark(function e() {
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (Je.debug(
                                          "getRecvTransportRemoteStats()"
                                        ),
                                        this._recvTransport)
                                      ) {
                                        e.next = 3;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 3:
                                      return e.abrupt(
                                        "return",
                                        this._protoo.request(
                                          "getTransportStats",
                                          {
                                            transportId: this._recvTransport.id,
                                          }
                                        )
                                      );
                                    case 4:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return he.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getAudioRemoteStats",
                      value:
                        ((pe = (0, a.Z)(
                          d().mark(function e() {
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (Je.debug("getAudioRemoteStats()"),
                                        this._micProducer)
                                      ) {
                                        e.next = 3;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 3:
                                      return e.abrupt(
                                        "return",
                                        this._latestStats[this._micProducer.id]
                                      );
                                    case 4:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return pe.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getVideoRemoteStats",
                      value:
                        ((ue = (0, a.Z)(
                          d().mark(function e() {
                            var t;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (Je.debug("getVideoRemoteStats()"),
                                        (t = this._webcamProducer))
                                      ) {
                                        e.next = 4;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 4:
                                      return e.abrupt(
                                        "return",
                                        this._latestStats[t.id]
                                      );
                                    case 5:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return ue.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getShareRemoteStats",
                      value:
                        ((le = (0, a.Z)(
                          d().mark(function e() {
                            var t;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (Je.debug("getVideoRemoteStats()"),
                                        (t = this._shareProducer))
                                      ) {
                                        e.next = 4;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 4:
                                      return e.abrupt(
                                        "return",
                                        this._latestStats[t.id]
                                      );
                                    case 5:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return le.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getConsumerRemoteStats",
                      value:
                        ((ce = (0, a.Z)(
                          d().mark(function e(t) {
                            var r;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (Je.debug("getConsumerRemoteStats()"),
                                        (r = this._consumers.get(t)))
                                      ) {
                                        e.next = 4;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 4:
                                      return (
                                        this._latestStats[t] &&
                                          ((this._latestStats[
                                            t
                                          ][0].currentSpatialLayer =
                                            r.currentSpatialLayer),
                                          (this._latestStats[
                                            t
                                          ][0].currentTemporalLayer =
                                            r.currentTemporalLayer),
                                          (this._latestStats[
                                            t
                                          ][0].preferredSpatialLayer =
                                            r.preferredSpatialLayer),
                                          (this._latestStats[
                                            t
                                          ][0].preferredTemporalLayer =
                                            r.preferredTemporalLayer)),
                                        e.abrupt("return", this._latestStats[t])
                                      );
                                    case 6:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return ce.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getChatDataProducerRemoteStats",
                      value:
                        ((x = (0, a.Z)(
                          d().mark(function e() {
                            var t;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (Je.debug(
                                          "getChatDataProducerRemoteStats()"
                                        ),
                                        (t = this._chatDataProducer))
                                      ) {
                                        e.next = 4;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 4:
                                      return e.abrupt(
                                        "return",
                                        this._protoo.request(
                                          "getDataProducerStats",
                                          { dataProducerId: t.id }
                                        )
                                      );
                                    case 5:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return x.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getBotDataProducerRemoteStats",
                      value:
                        ((C = (0, a.Z)(
                          d().mark(function e() {
                            var t;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (Je.debug(
                                          "getBotDataProducerRemoteStats()"
                                        ),
                                        (t = this._botDataProducer))
                                      ) {
                                        e.next = 4;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 4:
                                      return e.abrupt(
                                        "return",
                                        this._protoo.request(
                                          "getDataProducerStats",
                                          { dataProducerId: t.id }
                                        )
                                      );
                                    case 5:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return C.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getDataConsumerRemoteStats",
                      value:
                        ((E = (0, a.Z)(
                          d().mark(function e(t) {
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (Je.debug(
                                          "getDataConsumerRemoteStats()"
                                        ),
                                        this._dataConsumers.get(t))
                                      ) {
                                        e.next = 4;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 4:
                                      return e.abrupt(
                                        "return",
                                        this._protoo.request(
                                          "getDataConsumerStats",
                                          { dataConsumerId: t }
                                        )
                                      );
                                    case 5:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return E.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getSendTransportLocalStats",
                      value:
                        ((R = (0, a.Z)(
                          d().mark(function e() {
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (Je.debug(
                                          "getSendTransportLocalStats()"
                                        ),
                                        this._sendTransport)
                                      ) {
                                        e.next = 3;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 3:
                                      return e.abrupt(
                                        "return",
                                        this._sendTransport.getStats()
                                      );
                                    case 4:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return R.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getRecvTransportLocalStats",
                      value:
                        ((k = (0, a.Z)(
                          d().mark(function e() {
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (Je.debug(
                                          "getRecvTransportLocalStats()"
                                        ),
                                        this._recvTransport)
                                      ) {
                                        e.next = 3;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 3:
                                      return e.abrupt(
                                        "return",
                                        this._recvTransport.getStats()
                                      );
                                    case 4:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return k.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getAudioLocalStats",
                      value:
                        ((S = (0, a.Z)(
                          d().mark(function e() {
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (Je.debug("getAudioLocalStats()"),
                                        this._micProducer)
                                      ) {
                                        e.next = 3;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 3:
                                      return e.abrupt(
                                        "return",
                                        this._micProducer.getStats()
                                      );
                                    case 4:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return S.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getVideoLocalStats",
                      value:
                        ((w = (0, a.Z)(
                          d().mark(function e() {
                            var t;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (Je.debug("getVideoLocalStats()"),
                                        (t =
                                          this._webcamProducer ||
                                          this._shareProducer))
                                      ) {
                                        e.next = 4;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 4:
                                      return e.abrupt("return", t.getStats());
                                    case 5:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return w.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getConsumerLocalStats",
                      value:
                        ((b = (0, a.Z)(
                          d().mark(function e(t) {
                            var r;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if ((r = this._consumers.get(t))) {
                                        e.next = 3;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 3:
                                      return e.abrupt("return", r.getStats());
                                    case 4:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return b.apply(this, arguments);
                        }),
                    },
                    {
                      key: "applyNetworkThrottle",
                      value:
                        ((g = (0, a.Z)(
                          d().mark(function e(t) {
                            var r, n, a, i;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (r = t.uplink),
                                        (n = t.downlink),
                                        (a = t.rtt),
                                        (i = t.secret),
                                        Je.debug(
                                          "applyNetworkThrottle() [uplink:%s, downlink:%s, rtt:%s]",
                                          r,
                                          n,
                                          a
                                        ),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request(
                                          "applyNetworkThrottle",
                                          {
                                            uplink: r,
                                            downlink: n,
                                            rtt: a,
                                            secret: i,
                                          }
                                        )
                                      );
                                    case 5:
                                      e.next = 11;
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(2)),
                                        Je.error(
                                          "applyNetworkThrottle() | failed:%o",
                                          e.t0
                                        ),
                                        He.dispatch(
                                          se({
                                            type: "error",
                                            text: "Error applying network throttle: ".concat(
                                              e.t0
                                            ),
                                          })
                                        );
                                    case 11:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 7]]
                            );
                          })
                        )),
                        function (e) {
                          return g.apply(this, arguments);
                        }),
                    },
                    {
                      key: "resetNetworkThrottle",
                      value:
                        ((_ = (0, a.Z)(
                          d().mark(function e(t) {
                            var r, n, a;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (r = t.silent),
                                        (n = void 0 !== r && r),
                                        (a = t.secret),
                                        Je.debug("resetNetworkThrottle()"),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request(
                                          "resetNetworkThrottle",
                                          { secret: a }
                                        )
                                      );
                                    case 5:
                                      e.next = 10;
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(2)),
                                        n ||
                                          (Je.error(
                                            "resetNetworkThrottle() | failed:%o",
                                            e.t0
                                          ),
                                          He.dispatch(
                                            se({
                                              type: "error",
                                              text: "Error resetting network throttle: ".concat(
                                                e.t0
                                              ),
                                            })
                                          ));
                                    case 10:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 7]]
                            );
                          })
                        )),
                        function (e) {
                          return _.apply(this, arguments);
                        }),
                    },
                    {
                      key: "createProducerTransport",
                      value:
                        ((v = (0, a.Z)(
                          d().mark(function e(t, r) {
                            var n,
                              i,
                              s,
                              o,
                              c,
                              l,
                              u,
                              p,
                              h,
                              m,
                              f = this;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      (s = t.id),
                                        (o = t.iceParameters),
                                        (c = t.iceCandidates),
                                        (l = t.dtlsParameters),
                                        (u = t.sctpParameters),
                                        (p =
                                          null === (n = this._openTelemetry) ||
                                          void 0 === n
                                            ? void 0
                                            : n.trace({
                                                spanName:
                                                  "Creating Send Transport",
                                                span: r || null,
                                              })),
                                        (this._sendTransport =
                                          this._mediasoupDevice.createSendTransport(
                                            {
                                              id: s,
                                              iceParameters: o,
                                              iceCandidates: c,
                                              dtlsParameters: l,
                                              sctpParameters: u,
                                              iceServers: this._iceServers,
                                            }
                                          )),
                                        this._sendTransport.on(
                                          "connect",
                                          function (e, t, r) {
                                            var n,
                                              a = e.dtlsParameters;
                                            null === (n = f._openTelemetry) ||
                                              void 0 === n ||
                                              n.traceAutoComplete({
                                                spanName:
                                                  "this._sendTransport `connect` Event : Transport is about to establish the ICE+DTLS connection",
                                                span: p,
                                                status: 1,
                                              }),
                                              f._protoo
                                                .request(
                                                  "connectWebRtcTransport",
                                                  {
                                                    transportId:
                                                      f._sendTransport.id,
                                                    dtlsParameters: a,
                                                  }
                                                )
                                                .then(t)
                                                .catch(r);
                                          }
                                        ),
                                        this._sendTransport.on(
                                          "produce",
                                          (function () {
                                            var e = (0, a.Z)(
                                              d().mark(function e(t, r, n) {
                                                var a, i, s, o, c, l, u;
                                                return d().wrap(
                                                  function (e) {
                                                    for (;;)
                                                      switch (
                                                        (e.prev = e.next)
                                                      ) {
                                                        case 0:
                                                          return (
                                                            (a = t.kind),
                                                            (i =
                                                              t.rtpParameters),
                                                            (s = t.appData),
                                                            (e.prev = 1),
                                                            null ===
                                                              (o =
                                                                f._openTelemetry) ||
                                                              void 0 === o ||
                                                              o.traceAutoComplete(
                                                                {
                                                                  spanName:
                                                                    "this._sendTransport `produce` Event : Transmit information about a new producer ",
                                                                  span: p,
                                                                  status: 1,
                                                                }
                                                              ),
                                                            (e.next = 5),
                                                            f._protoo.request(
                                                              "produce",
                                                              {
                                                                transportId:
                                                                  f
                                                                    ._sendTransport
                                                                    .id,
                                                                kind: a,
                                                                rtpParameters:
                                                                  i,
                                                                appData: s,
                                                              }
                                                            )
                                                          );
                                                        case 5:
                                                          (c = e.sent),
                                                            (l = c.id),
                                                            r({ id: l }),
                                                            (e.next = 14);
                                                          break;
                                                        case 10:
                                                          (e.prev = 10),
                                                            (e.t0 = e.catch(1)),
                                                            null ===
                                                              (u =
                                                                f._videosdkLogs) ||
                                                              void 0 === u ||
                                                              u.pushLogs({
                                                                logText:
                                                                  'Error this._sendTransport "produce" Event catch',
                                                                logType:
                                                                  "ERROR",
                                                                attributes: {
                                                                  error:
                                                                    e.t0
                                                                      .message,
                                                                },
                                                              }),
                                                            n(e.t0);
                                                        case 14:
                                                        case "end":
                                                          return e.stop();
                                                      }
                                                  },
                                                  e,
                                                  null,
                                                  [[1, 10]]
                                                );
                                              })
                                            );
                                            return function (t, r, n) {
                                              return e.apply(this, arguments);
                                            };
                                          })()
                                        ),
                                        this._sendTransport.on(
                                          "producedata",
                                          (function () {
                                            var e = (0, a.Z)(
                                              d().mark(function e(t, r, n) {
                                                var a, i, s, o, c, l, u;
                                                return d().wrap(
                                                  function (e) {
                                                    for (;;)
                                                      switch (
                                                        (e.prev = e.next)
                                                      ) {
                                                        case 0:
                                                          return (
                                                            (a =
                                                              t.sctpStreamParameters),
                                                            (i = t.label),
                                                            (s = t.protocol),
                                                            (o = t.appData),
                                                            Je.debug(
                                                              '"producedata" event: [sctpStreamParameters:%o, appData:%o]',
                                                              a,
                                                              o
                                                            ),
                                                            (e.prev = 2),
                                                            (e.next = 5),
                                                            f._protoo.request(
                                                              "produceData",
                                                              {
                                                                transportId:
                                                                  f
                                                                    ._sendTransport
                                                                    .id,
                                                                sctpStreamParameters:
                                                                  a,
                                                                label: i,
                                                                protocol: s,
                                                                appData: o,
                                                              }
                                                            )
                                                          );
                                                        case 5:
                                                          (c = e.sent),
                                                            (l = c.id),
                                                            r({ id: l }),
                                                            (e.next = 14);
                                                          break;
                                                        case 10:
                                                          (e.prev = 10),
                                                            (e.t0 = e.catch(2)),
                                                            null ===
                                                              (u =
                                                                f._videosdkLogs) ||
                                                              void 0 === u ||
                                                              u.pushLogs({
                                                                logText:
                                                                  "Error producedata event catch",
                                                                logType:
                                                                  "ERROR",
                                                                attributes: {
                                                                  error:
                                                                    e.t0
                                                                      .message,
                                                                },
                                                              }),
                                                            n(e.t0);
                                                        case 14:
                                                        case "end":
                                                          return e.stop();
                                                      }
                                                  },
                                                  e,
                                                  null,
                                                  [[2, 10]]
                                                );
                                              })
                                            );
                                            return function (t, r, n) {
                                              return e.apply(this, arguments);
                                            };
                                          })()
                                        ),
                                        this._sendTransport.on(
                                          "connectionstatechange",
                                          function (e) {
                                            var t;
                                            null === (t = f._openTelemetry) ||
                                              void 0 === t ||
                                              t.traceAutoComplete({
                                                spanName:
                                                  "_sendTransport Event connectionstatechange ".concat(
                                                    e
                                                  ),
                                                span: p,
                                                status: 1,
                                              }),
                                              "failed" === e && f.restartIce(),
                                              (f._transportState = e);
                                          }
                                        ),
                                        (h = 0),
                                        ((m = this._metrics.addNewProbe(
                                          this._sendTransport,
                                          "sendTransport"
                                        )).onStatsCollected = function (e) {
                                          try {
                                            var t, r, n, a;
                                            f._stats.producerStats ||
                                              (f._stats.producerStats = {}),
                                              f._stats.producerStats.audio ||
                                                (f._stats.producerStats.audio =
                                                  []),
                                              f._stats.producerStats
                                                .shareAudio ||
                                                (f._stats.producerStats.shareAudio =
                                                  []),
                                              f._micProducer &&
                                                (f._latestStats[
                                                  null ===
                                                    (t = f._micProducer) ||
                                                  void 0 === t
                                                    ? void 0
                                                    : t.id
                                                ] = []),
                                              f._shareAudioProducer &&
                                                (f._latestStats[
                                                  null ===
                                                    (r =
                                                      f._shareAudioProducer) ||
                                                  void 0 === r
                                                    ? void 0
                                                    : r.id
                                                ] = []),
                                              e.audio.forEach(function (e) {
                                                var t, r, n;
                                                if (
                                                  f._micProducer &&
                                                  e.trackId ==
                                                    (null ===
                                                      (t = f._micProducer) ||
                                                    void 0 === t
                                                      ? void 0
                                                      : t.track.id)
                                                )
                                                  f._latestStats[
                                                    null ===
                                                      (n = f._micProducer) ||
                                                    void 0 === n
                                                      ? void 0
                                                      : n.id
                                                  ].push(e),
                                                    h % 5 == 0 &&
                                                      f._stats.producerStats.audio.push(
                                                        e
                                                      );
                                                else if (
                                                  f._shareAudioProducer &&
                                                  e.trackId ==
                                                    (null ===
                                                      (r =
                                                        f._shareAudioProducer) ||
                                                    void 0 === r
                                                      ? void 0
                                                      : r.track.id)
                                                ) {
                                                  var a;
                                                  f._latestStats[
                                                    null ===
                                                      (a =
                                                        f._shareAudioProducer) ||
                                                    void 0 === a
                                                      ? void 0
                                                      : a.id
                                                  ].push(e),
                                                    h % 5 == 0 &&
                                                      f._stats.producerStats.shareAudio.push(
                                                        e
                                                      );
                                                }
                                              }),
                                              f._stats.producerStats.video ||
                                                (f._stats.producerStats.video =
                                                  []),
                                              f._stats.producerStats.share ||
                                                (f._stats.producerStats.share =
                                                  []),
                                              f._webcamProducer &&
                                                (f._latestStats[
                                                  null ===
                                                    (n = f._webcamProducer) ||
                                                  void 0 === n
                                                    ? void 0
                                                    : n.id
                                                ] = []),
                                              f._shareProducer &&
                                                (f._latestStats[
                                                  null ===
                                                    (a = f._shareProducer) ||
                                                  void 0 === a
                                                    ? void 0
                                                    : a.id
                                                ] = []),
                                              e.video.forEach(function (e) {
                                                var t, r, n;
                                                if (
                                                  f._webcamProducer &&
                                                  e.trackId ==
                                                    (null ===
                                                      (t = f._webcamProducer) ||
                                                    void 0 === t
                                                      ? void 0
                                                      : t.track.id)
                                                )
                                                  f._latestStats[
                                                    null ===
                                                      (n = f._webcamProducer) ||
                                                    void 0 === n
                                                      ? void 0
                                                      : n.id
                                                  ].push(e);
                                                else if (
                                                  f._shareProducer &&
                                                  e.trackId ==
                                                    (null ===
                                                      (r = f._shareProducer) ||
                                                    void 0 === r
                                                      ? void 0
                                                      : r.track.id)
                                                ) {
                                                  var a;
                                                  f._latestStats[
                                                    null ===
                                                      (a = f._shareProducer) ||
                                                    void 0 === a
                                                      ? void 0
                                                      : a.id
                                                  ].push(e);
                                                }
                                              }),
                                              h % 5 == 0 &&
                                                null != f._webcamProducer &&
                                                f._stats.producerStats.video.push(
                                                  {
                                                    timestamp: new Date(),
                                                    stats:
                                                      f._latestStats[
                                                        f._webcamProducer.id
                                                      ],
                                                  }
                                                ),
                                              h % 5 == 0 &&
                                                null != f._shareProducer &&
                                                f._stats.producerStats.share.push(
                                                  {
                                                    timestamp: new Date(),
                                                    stats:
                                                      f._latestStats[
                                                        f._shareProducer.id
                                                      ],
                                                  }
                                                ),
                                              h++;
                                          } catch (e) {
                                            var i;
                                            null === (i = f._videosdkLogs) ||
                                              void 0 === i ||
                                              i.pushLogs({
                                                logText:
                                                  "Error PRODUCER Stats ERROR",
                                                logType: "ERROR",
                                                attributes: {
                                                  error: e.message,
                                                },
                                              }),
                                              console.log("PRODUCER ERROR", e);
                                          }
                                        }),
                                        m.start(),
                                        this._sendTransport.observer.on(
                                          "close",
                                          function () {
                                            m.stop(),
                                              f._metrics.removeExistingProbe(m);
                                          }
                                        ),
                                        null === (i = this._openTelemetry) ||
                                          void 0 === i ||
                                          i.completeSpan({
                                            span: p,
                                            status: 1,
                                            message:
                                              "Send Transport Created Successfully",
                                          });
                                    case 13:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e, t) {
                          return v.apply(this, arguments);
                        }),
                    },
                    {
                      key: "createConsumerTransport",
                      value:
                        ((f = (0, a.Z)(
                          d().mark(function e(t, r) {
                            var n,
                              a,
                              i,
                              s,
                              o,
                              c,
                              l,
                              u,
                              p,
                              h,
                              m = this;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      (i = t.id),
                                        (s = t.iceParameters),
                                        (o = t.iceCandidates),
                                        (c = t.dtlsParameters),
                                        (l = t.sctpParameters),
                                        (u =
                                          null === (n = this._openTelemetry) ||
                                          void 0 === n
                                            ? void 0
                                            : n.trace({
                                                spanName:
                                                  "Creating Recieve Transport",
                                                span: r || null,
                                              })),
                                        (this._recvTransport =
                                          this._mediasoupDevice.createRecvTransport(
                                            {
                                              id: i,
                                              iceParameters: s,
                                              iceCandidates: o,
                                              dtlsParameters: c,
                                              sctpParameters: l,
                                              iceServers: this._iceServers,
                                            }
                                          )),
                                        this._recvTransport.on(
                                          "connect",
                                          function (e, t, r) {
                                            var n,
                                              a = e.dtlsParameters;
                                            null === (n = m._openTelemetry) ||
                                              void 0 === n ||
                                              n.traceAutoComplete({
                                                spanName:
                                                  "this._recvTransport `connect` Event : Recieve Transport is about to establish the ICE+DTLS connection",
                                                span: u,
                                                status: 1,
                                              }),
                                              m._protoo
                                                .request(
                                                  "connectWebRtcTransport",
                                                  {
                                                    transportId:
                                                      m._recvTransport.id,
                                                    dtlsParameters: a,
                                                  }
                                                )
                                                .then(t)
                                                .catch(r);
                                          }
                                        ),
                                        this._recvTransport.on(
                                          "connectionstatechange",
                                          function (e) {
                                            var t;
                                            null === (t = m._openTelemetry) ||
                                              void 0 === t ||
                                              t.traceAutoComplete({
                                                spanName:
                                                  "_recvTransport Event connectionstatechange ".concat(
                                                    e
                                                  ),
                                                span: u,
                                                status: 1,
                                              }),
                                              "failed" === e && m.restartIce(),
                                              (m._transportState = e);
                                          }
                                        ),
                                        (p = 0),
                                        ((h = this._metrics.addNewProbe(
                                          this._recvTransport,
                                          "transport"
                                        )).onStatsCollected = function (e) {
                                          try {
                                            e.audio.forEach(function (e) {
                                              var t = m._consumers.get(
                                                e.trackId
                                              );
                                              if (null != t) {
                                                var r =
                                                  1 == t.appData.share
                                                    ? "audio" == t.kind
                                                      ? "shareAudio"
                                                      : "share"
                                                    : t.kind;
                                                m._stats.consumerStats ||
                                                  (m._stats.consumerStats = {}),
                                                  m._stats.consumerStats[
                                                    t.appData.peerId
                                                  ] ||
                                                    (m._stats.consumerStats[
                                                      t.appData.peerId
                                                    ] = {}),
                                                  m._stats.consumerStats[
                                                    t.appData.peerId
                                                  ][r] ||
                                                    (m._stats.consumerStats[
                                                      t.appData.peerId
                                                    ][r] = []),
                                                  e.trackId == t.id &&
                                                    ((m._latestStats[t.id] =
                                                      []),
                                                    m._latestStats[t.id].push(
                                                      e
                                                    ),
                                                    p % 5 == 0 &&
                                                      m._stats.consumerStats[
                                                        t.appData.peerId
                                                      ][r].push(e));
                                              }
                                            }),
                                              e.video.forEach(function (e) {
                                                var t = m._consumers.get(
                                                  e.trackId
                                                );
                                                if (null != t) {
                                                  var r =
                                                    1 == t.appData.share
                                                      ? "audio" == t.kind
                                                        ? "shareAudio"
                                                        : "share"
                                                      : t.kind;
                                                  m._stats.consumerStats ||
                                                    (m._stats.consumerStats =
                                                      {}),
                                                    m._stats.consumerStats[
                                                      t.appData.peerId
                                                    ] ||
                                                      (m._stats.consumerStats[
                                                        t.appData.peerId
                                                      ] = {}),
                                                    m._stats.consumerStats[
                                                      t.appData.peerId
                                                    ][r] ||
                                                      (m._stats.consumerStats[
                                                        t.appData.peerId
                                                      ][r] = []),
                                                    e.trackId == t.id &&
                                                      ((m._latestStats[t.id] =
                                                        []),
                                                      m._latestStats[t.id].push(
                                                        e
                                                      ),
                                                      p % 5 == 0 &&
                                                        m._stats.consumerStats[
                                                          t.appData.peerId
                                                        ][r].push(e));
                                                }
                                              }),
                                              p++;
                                          } catch (e) {
                                            var t;
                                            null === (t = m._videosdkLogs) ||
                                              void 0 === t ||
                                              t.pushLogs({
                                                logText:
                                                  "Error CONSUMER Stats ERROR",
                                                logType: "ERROR",
                                                attributes: {
                                                  error: e.message,
                                                },
                                              }),
                                              console.log("CONSUMER CATCH", e);
                                          }
                                        }),
                                        h.start(),
                                        this._recvTransport.observer.on(
                                          "close",
                                          function () {
                                            h.stop(),
                                              m._metrics.removeExistingProbe(h);
                                          }
                                        ),
                                        null === (a = this._openTelemetry) ||
                                          void 0 === a ||
                                          a.completeSpan({
                                            span: u,
                                            status: 1,
                                            message:
                                              "Recieve Transport Created Successfully",
                                          });
                                    case 11:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e, t) {
                          return f.apply(this, arguments);
                        }),
                    },
                    {
                      key: "joinRoom",
                      value:
                        ((m = (0, a.Z)(
                          d().mark(function e() {
                            var t,
                              r,
                              n,
                              a,
                              i,
                              s,
                              o,
                              c,
                              l,
                              p,
                              h,
                              m,
                              f,
                              v,
                              _,
                              g,
                              y,
                              b,
                              w,
                              S,
                              k,
                              R,
                              E,
                              T,
                              C;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        Je.debug("joinRoom()"),
                                        (e.prev = 1),
                                        (o =
                                          null === (t = this._openTelemetry) ||
                                          void 0 === t
                                            ? void 0
                                            : t.trace({
                                                spanName:
                                                  "Loading Router Capabilities",
                                                span: this._joinSpan,
                                              })),
                                        (this._mediasoupDevice = new u.Device({
                                          handlerName: this._handlerName,
                                        })),
                                        (e.next = 6),
                                        this._protoo.request(
                                          "getRouterRtpCapabilities"
                                        )
                                      );
                                    case 6:
                                      return (
                                        (c = e.sent),
                                        (e.next = 9),
                                        this._mediasoupDevice.load({
                                          routerRtpCapabilities: c,
                                        })
                                      );
                                    case 9:
                                      if (
                                        (null === (r = this._openTelemetry) ||
                                          void 0 === r ||
                                          r.completeSpan({
                                            span: o,
                                            status: 1,
                                            attributes: {
                                              routerRtpCapabilities:
                                                JSON.stringify(c).toString(),
                                            },
                                            message:
                                              "Router Capabilities Loaded",
                                          }),
                                        !this._produce)
                                      ) {
                                        e.next = 15;
                                        break;
                                      }
                                      return (
                                        (e.next = 13),
                                        this._protoo.request(
                                          "createWebRtcTransport",
                                          {
                                            preferredProtocol:
                                              this._preferredProtocol,
                                            producing: !0,
                                            consuming: !1,
                                            sctpCapabilities: this
                                              ._useDataChannel
                                              ? this._mediasoupDevice
                                                  .sctpCapabilities
                                              : void 0,
                                          }
                                        )
                                      );
                                    case 13:
                                      (l = e.sent),
                                        this.createProducerTransport(
                                          l,
                                          this._joinSpan
                                        );
                                    case 15:
                                      if (!this._consume) {
                                        e.next = 20;
                                        break;
                                      }
                                      return (
                                        (e.next = 18),
                                        this._protoo.request(
                                          "createWebRtcTransport",
                                          {
                                            preferredProtocol:
                                              this._preferredProtocol,
                                            producing: !1,
                                            consuming: !0,
                                            sctpCapabilities: this
                                              ._useDataChannel
                                              ? this._mediasoupDevice
                                                  .sctpCapabilities
                                              : void 0,
                                          }
                                        )
                                      );
                                    case 18:
                                      (p = e.sent),
                                        this.createConsumerTransport(
                                          p,
                                          this._joinSpan
                                        );
                                    case 20:
                                      return (
                                        (e.next = 22),
                                        this._protoo.request("join", {
                                          displayName: this._displayName,
                                          device: this._device,
                                          secret: this._secret,
                                          rtpCapabilities:
                                            null ===
                                              (n = this._mediasoupDevice) ||
                                            void 0 === n
                                              ? void 0
                                              : n.rtpCapabilities,
                                          sctpCapabilities:
                                            null ===
                                              (a = this._mediasoupDevice) ||
                                            void 0 === a
                                              ? void 0
                                              : a.sctpCapabilities,
                                          deviceInfo: this._deviceInfo,
                                          autoConsume: this._autoConsume,
                                          metaData: this._metaData,
                                        })
                                      );
                                    case 22:
                                      (h = e.sent),
                                        (m = h.peers),
                                        (f = h.poll),
                                        (v = h.messages),
                                        He.dispatch(O("connected")),
                                        null === (i = this._openTelemetry) ||
                                          void 0 === i ||
                                          i.traceAutoComplete({
                                            spanName:
                                              "Emitted `MEETING_JOINED` Event",
                                            span: this._joinSpan,
                                            status: 1,
                                          }),
                                        this._eventEmitter.emit(
                                          "MEETING_JOINED",
                                          {
                                            peers: m,
                                            poll: f,
                                            messages: v,
                                            baseUrl: this._baseUrl,
                                          }
                                        ),
                                        He.dispatch({
                                          type: "REMOVE_ALL_NOTIFICATIONS",
                                        }),
                                        He.dispatch(
                                          se({
                                            text: "You are in the room!",
                                            timeout: 3e3,
                                          })
                                        ),
                                        (_ = Fe(m));
                                      try {
                                        for (_.s(); !(g = _.n()).done; )
                                          (y = g.value),
                                            (b = G(
                                              Ve(
                                                Ve({}, y),
                                                {},
                                                {
                                                  consumers: [],
                                                  dataConsumers: [],
                                                }
                                              )
                                            )),
                                            He.dispatch(b),
                                            this._eventEmitter.emit(
                                              b.type,
                                              b.payload
                                            );
                                      } catch (e) {
                                        _.e(e);
                                      } finally {
                                        _.f();
                                      }
                                      this._produce &&
                                        (He.dispatch(
                                          M({
                                            canSendMic:
                                              this._mediasoupDevice.canProduce(
                                                "audio"
                                              ),
                                            canSendWebcam:
                                              this._mediasoupDevice.canProduce(
                                                "video"
                                              ),
                                          })
                                        ),
                                        this._micEnabled
                                          ? this.enableMic(
                                              this.customMicrophoneAudioTrack,
                                              this._joinSpan
                                            )
                                          : this.customMicrophoneAudioTrack &&
                                            (null ===
                                              (w = this._openTelemetry) ||
                                              void 0 === w ||
                                              w.traceAutoComplete({
                                                spanName:
                                                  "Disposing Audio Track",
                                                span: this._joinSpan,
                                                status: 2,
                                              }),
                                            this.customMicrophoneAudioTrack
                                              .getTracks()
                                              .forEach(function (e) {
                                                e.stop();
                                              })),
                                        (S = P()),
                                        this._webcamEnabled &&
                                        (!S ||
                                          S.webcamEnabled ||
                                          this._externalVideo)
                                          ? this.enableWebcam(
                                              this.customCameraVideoTrack,
                                              this._joinSpan
                                            )
                                          : this.customCameraVideoTrack &&
                                            (null ===
                                              (k = this._openTelemetry) ||
                                              void 0 === k ||
                                              k.traceAutoComplete({
                                                spanName:
                                                  "Disposing Video Track",
                                                span: this._joinSpan,
                                                status: 2,
                                              }),
                                            this.customCameraVideoTrack
                                              .getTracks()
                                              .forEach(function (e) {
                                                e.stop();
                                              })),
                                        this.enableChatDataProducer()),
                                        window.SHOW_INFO &&
                                          ((R = He.getState()),
                                          (E = R.me),
                                          He.dispatch(I(E.id))),
                                        null === (s = this._openTelemetry) ||
                                          void 0 === s ||
                                          s.completeSpan({
                                            span: this._joinSpan,
                                            status: 1,
                                            message: "Room Joined",
                                          }),
                                        (e.next = 45);
                                      break;
                                    case 38:
                                      (e.prev = 38),
                                        (e.t0 = e.catch(1)),
                                        Je.error("joinRoom() failed:%o", e.t0),
                                        null === (T = this._videosdkLogs) ||
                                          void 0 === T ||
                                          T.pushLogs({
                                            logText:
                                              "Error Could not join the room",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        null === (C = this._openTelemetry) ||
                                          void 0 === C ||
                                          C.completeSpan({
                                            span: this._joinSpan,
                                            status: 2,
                                            message:
                                              "Could not join the room ".concat(
                                                e.t0
                                              ),
                                          }),
                                        He.dispatch(
                                          se({
                                            type: "error",
                                            text: "Could not join the room: ".concat(
                                              e.t0
                                            ),
                                          })
                                        ),
                                        this.close({ sendLeft: !0 });
                                    case 45:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[1, 38]]
                            );
                          })
                        )),
                        function () {
                          return m.apply(this, arguments);
                        }),
                    },
                    {
                      key: "_updateMics",
                      value:
                        ((h = (0, a.Z)(
                          d().mark(function e() {
                            var t,
                              r,
                              n,
                              a,
                              i,
                              s,
                              o,
                              c,
                              l,
                              u,
                              p,
                              h = arguments;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (n =
                                          h.length > 0 && void 0 !== h[0]
                                            ? h[0]
                                            : void 0),
                                        (this._mics = new Map()),
                                        Je.debug("_updateMics() |"),
                                        (e.next = 5),
                                        navigator.mediaDevices.enumerateDevices()
                                      );
                                    case 5:
                                      (a = e.sent),
                                        (i =
                                          null === (t = this._openTelemetry) ||
                                          void 0 === t
                                            ? void 0
                                            : t.trace({
                                                spanName:
                                                  "_updateMics() Calling for Getting System Mic list",
                                                attributes: {
                                                  systemDevice: a
                                                    ? JSON.stringify(a)
                                                    : "Device not found",
                                                },
                                                span: n || null,
                                              })),
                                        (s = Fe(a));
                                      try {
                                        for (s.s(); !(o = s.n()).done; )
                                          "audioinput" == (c = o.value).kind &&
                                            this._mics.set(c.deviceId, c);
                                      } catch (e) {
                                        s.e(e);
                                      } finally {
                                        s.f();
                                      }
                                      (l = Array.from(this._mics.values())),
                                        (u = l.length),
                                        (p = this._mic.device
                                          ? this._mic.device.deviceId
                                          : void 0),
                                        0 === u
                                          ? (this._mic.device = null)
                                          : this._mics.has(p) ||
                                            (this._mic.device = l[0]),
                                        null === (r = this._openTelemetry) ||
                                          void 0 === r ||
                                          r.completeSpan({
                                            span: i,
                                            status: 1,
                                            message: "Update Mic",
                                          });
                                    case 14:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return h.apply(this, arguments);
                        }),
                    },
                    {
                      key: "_updateWebcams",
                      value:
                        ((p = (0, a.Z)(
                          d().mark(function e() {
                            var t,
                              r,
                              n,
                              a,
                              i,
                              s,
                              o,
                              c,
                              l,
                              u,
                              p,
                              h = arguments;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (n =
                                          h.length > 0 && void 0 !== h[0]
                                            ? h[0]
                                            : void 0),
                                        Je.debug("_updateWebcams()"),
                                        (this._webcams = new Map()),
                                        Je.debug(
                                          "_updateWebcams() | calling enumerateDevices()"
                                        ),
                                        (e.next = 6),
                                        navigator.mediaDevices.enumerateDevices()
                                      );
                                    case 6:
                                      (a = e.sent),
                                        (i =
                                          null === (t = this._openTelemetry) ||
                                          void 0 === t
                                            ? void 0
                                            : t.trace({
                                                spanName:
                                                  "_updateWebcams() Calling for Getting System Webcam list",
                                                attributes: {
                                                  systemDevice: a
                                                    ? JSON.stringify(a)
                                                    : "Device not found",
                                                },
                                                span: n || null,
                                              })),
                                        (s = Fe(a)),
                                        (e.prev = 9),
                                        s.s();
                                    case 11:
                                      if ((o = s.n()).done) {
                                        e.next = 18;
                                        break;
                                      }
                                      if ("videoinput" === (c = o.value).kind) {
                                        e.next = 15;
                                        break;
                                      }
                                      return e.abrupt("continue", 16);
                                    case 15:
                                      this._webcams.set(c.deviceId, c);
                                    case 16:
                                      e.next = 11;
                                      break;
                                    case 18:
                                      e.next = 23;
                                      break;
                                    case 20:
                                      (e.prev = 20),
                                        (e.t0 = e.catch(9)),
                                        s.e(e.t0);
                                    case 23:
                                      return (e.prev = 23), s.f(), e.finish(23);
                                    case 26:
                                      (l = Array.from(this._webcams.values())),
                                        (u = l.length),
                                        (p = this._webcam.device
                                          ? this._webcam.device.deviceId
                                          : void 0) &&
                                          (this._defaultCameraIndex = p),
                                        Je.debug(
                                          "_updateWebcams() [webcams:%o]",
                                          l
                                        ),
                                        0 === u
                                          ? (this._webcam.device = null)
                                          : this._webcams.has(p) ||
                                            (this._webcam.device =
                                              l[this._defaultCameraIndex]),
                                        null === (r = this._openTelemetry) ||
                                          void 0 === r ||
                                          r.completeSpan({
                                            span: i,
                                            status: 1,
                                            message: "Update Webcam",
                                          }),
                                        He.dispatch(L(this._webcams.size > 1));
                                    case 34:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[9, 20, 23, 26]]
                            );
                          })
                        )),
                        function () {
                          return p.apply(this, arguments);
                        }),
                    },
                    {
                      key: "_getWebcamType",
                      value: function (e) {
                        return /(back|rear)/i.test(e.label)
                          ? (Je.debug(
                              "_getWebcamType() | it seems to be a back camera"
                            ),
                            "back")
                          : (Je.debug(
                              "_getWebcamType() | it seems to be a front camera"
                            ),
                            "front");
                      },
                    },
                    {
                      key: "_pauseConsumer",
                      value:
                        ((c = (0, a.Z)(
                          d().mark(function e(t) {
                            var r;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (!t.paused) {
                                        e.next = 2;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 2:
                                      return (
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request("pauseConsumer", {
                                          consumerId: t.id,
                                        })
                                      );
                                    case 5:
                                      t.pause(),
                                        He.dispatch(Y(t.id, "local")),
                                        (e.next = 14);
                                      break;
                                    case 9:
                                      (e.prev = 9),
                                        (e.t0 = e.catch(2)),
                                        Je.error(
                                          "_pauseConsumer() | failed:%o",
                                          e.t0
                                        ),
                                        null === (r = this._videosdkLogs) ||
                                          void 0 === r ||
                                          r.pushLogs({
                                            logText: "Error pausing Consumer",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        He.dispatch(
                                          se({
                                            type: "error",
                                            text: "Error pausing Consumer: ".concat(
                                              e.t0
                                            ),
                                          })
                                        );
                                    case 14:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 9]]
                            );
                          })
                        )),
                        function (e) {
                          return c.apply(this, arguments);
                        }),
                    },
                    {
                      key: "_resumeConsumer",
                      value:
                        ((r = (0, a.Z)(
                          d().mark(function e(t) {
                            var r;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (t.paused) {
                                        e.next = 2;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 2:
                                      return (
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request("resumeConsumer", {
                                          consumerId: t.id,
                                        })
                                      );
                                    case 5:
                                      t.resume(),
                                        He.dispatch(X(t.id, "local")),
                                        (e.next = 14);
                                      break;
                                    case 9:
                                      (e.prev = 9),
                                        (e.t0 = e.catch(2)),
                                        Je.error(
                                          "_resumeConsumer() | failed:%o",
                                          e.t0
                                        ),
                                        null === (r = this._videosdkLogs) ||
                                          void 0 === r ||
                                          r.pushLogs({
                                            logText: "Error resuming Consumer",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        He.dispatch(
                                          se({
                                            type: "error",
                                            text: "Error resuming Consumer: ".concat(
                                              e.t0
                                            ),
                                          })
                                        );
                                    case 14:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 9]]
                            );
                          })
                        )),
                        function (e) {
                          return r.apply(this, arguments);
                        }),
                    },
                    {
                      key: "_getExternalVideoStream",
                      value:
                        ((t = (0, a.Z)(
                          d().mark(function e() {
                            var t = this;
                            return d().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (!this._externalVideoStream) {
                                        e.next = 2;
                                        break;
                                      }
                                      return e.abrupt(
                                        "return",
                                        this._externalVideoStream
                                      );
                                    case 2:
                                      if (
                                        !(this._externalVideo.readyState < 3)
                                      ) {
                                        e.next = 5;
                                        break;
                                      }
                                      return (
                                        (e.next = 5),
                                        new Promise(function (e) {
                                          return t._externalVideo.addEventListener(
                                            "canplay",
                                            e
                                          );
                                        })
                                      );
                                    case 5:
                                      if (!this._externalVideo.captureStream) {
                                        e.next = 9;
                                        break;
                                      }
                                      (this._externalVideoStream =
                                        this._externalVideo.captureStream()),
                                        (e.next = 14);
                                      break;
                                    case 9:
                                      if (
                                        !this._externalVideo.mozCaptureStream
                                      ) {
                                        e.next = 13;
                                        break;
                                      }
                                      (this._externalVideoStream =
                                        this._externalVideo.mozCaptureStream()),
                                        (e.next = 14);
                                      break;
                                    case 13:
                                      throw new Error(
                                        "video.captureStream() not supported"
                                      );
                                    case 14:
                                      return e.abrupt(
                                        "return",
                                        this._externalVideoStream
                                      );
                                    case 15:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return t.apply(this, arguments);
                        }),
                    },
                    {
                      key: "_emitError",
                      value: function (e) {
                        this._eventEmitter.emit("ERROR", e);
                      },
                    },
                  ],
                  [
                    {
                      key: "init",
                      value: function (e) {
                        He = e.store;
                      },
                    },
                  ]
                ),
                e
              );
            })();
        },
        1206: function (e) {
          e.exports = (function (e) {
            var t = {};
            function r(n) {
              if (t[n]) return t[n].exports;
              var a = (t[n] = { i: n, l: !1, exports: {} });
              return (
                e[n].call(a.exports, a, a.exports, r), (a.l = !0), a.exports
              );
            }
            return (
              (r.m = e),
              (r.c = t),
              (r.d = function (e, t, n) {
                r.o(e, t) ||
                  Object.defineProperty(e, t, { enumerable: !0, get: n });
              }),
              (r.r = function (e) {
                "undefined" != typeof Symbol &&
                  Symbol.toStringTag &&
                  Object.defineProperty(e, Symbol.toStringTag, {
                    value: "Module",
                  }),
                  Object.defineProperty(e, "__esModule", { value: !0 });
              }),
              (r.t = function (e, t) {
                if ((1 & t && (e = r(e)), 8 & t)) return e;
                if (4 & t && "object" == typeof e && e && e.__esModule)
                  return e;
                var n = Object.create(null);
                if (
                  (r.r(n),
                  Object.defineProperty(n, "default", {
                    enumerable: !0,
                    value: e,
                  }),
                  2 & t && "string" != typeof e)
                )
                  for (var a in e)
                    r.d(
                      n,
                      a,
                      function (t) {
                        return e[t];
                      }.bind(null, a)
                    );
                return n;
              }),
              (r.n = function (e) {
                var t =
                  e && e.__esModule
                    ? function () {
                        return e.default;
                      }
                    : function () {
                        return e;
                      };
                return r.d(t, "a", t), t;
              }),
              (r.o = function (e, t) {
                return Object.prototype.hasOwnProperty.call(e, t);
              }),
              (r.p = ""),
              r((r.s = 90))
            );
          })({
            17: function (e, t, r) {
              "use strict";
              (t.__esModule = !0), (t.default = void 0);
              var n = r(18),
                a = (function () {
                  function e() {}
                  return (
                    (e.getFirstMatch = function (e, t) {
                      var r = t.match(e);
                      return (r && r.length > 0 && r[1]) || "";
                    }),
                    (e.getSecondMatch = function (e, t) {
                      var r = t.match(e);
                      return (r && r.length > 1 && r[2]) || "";
                    }),
                    (e.matchAndReturnConst = function (e, t, r) {
                      if (e.test(t)) return r;
                    }),
                    (e.getWindowsVersionName = function (e) {
                      switch (e) {
                        case "NT":
                          return "NT";
                        case "XP":
                        case "NT 5.1":
                          return "XP";
                        case "NT 5.0":
                          return "2000";
                        case "NT 5.2":
                          return "2003";
                        case "NT 6.0":
                          return "Vista";
                        case "NT 6.1":
                          return "7";
                        case "NT 6.2":
                          return "8";
                        case "NT 6.3":
                          return "8.1";
                        case "NT 10.0":
                          return "10";
                        default:
                          return;
                      }
                    }),
                    (e.getMacOSVersionName = function (e) {
                      var t = e
                        .split(".")
                        .splice(0, 2)
                        .map(function (e) {
                          return parseInt(e, 10) || 0;
                        });
                      if ((t.push(0), 10 === t[0]))
                        switch (t[1]) {
                          case 5:
                            return "Leopard";
                          case 6:
                            return "Snow Leopard";
                          case 7:
                            return "Lion";
                          case 8:
                            return "Mountain Lion";
                          case 9:
                            return "Mavericks";
                          case 10:
                            return "Yosemite";
                          case 11:
                            return "El Capitan";
                          case 12:
                            return "Sierra";
                          case 13:
                            return "High Sierra";
                          case 14:
                            return "Mojave";
                          case 15:
                            return "Catalina";
                          default:
                            return;
                        }
                    }),
                    (e.getAndroidVersionName = function (e) {
                      var t = e
                        .split(".")
                        .splice(0, 2)
                        .map(function (e) {
                          return parseInt(e, 10) || 0;
                        });
                      if ((t.push(0), !(1 === t[0] && t[1] < 5)))
                        return 1 === t[0] && t[1] < 6
                          ? "Cupcake"
                          : 1 === t[0] && t[1] >= 6
                          ? "Donut"
                          : 2 === t[0] && t[1] < 2
                          ? "Eclair"
                          : 2 === t[0] && 2 === t[1]
                          ? "Froyo"
                          : 2 === t[0] && t[1] > 2
                          ? "Gingerbread"
                          : 3 === t[0]
                          ? "Honeycomb"
                          : 4 === t[0] && t[1] < 1
                          ? "Ice Cream Sandwich"
                          : 4 === t[0] && t[1] < 4
                          ? "Jelly Bean"
                          : 4 === t[0] && t[1] >= 4
                          ? "KitKat"
                          : 5 === t[0]
                          ? "Lollipop"
                          : 6 === t[0]
                          ? "Marshmallow"
                          : 7 === t[0]
                          ? "Nougat"
                          : 8 === t[0]
                          ? "Oreo"
                          : 9 === t[0]
                          ? "Pie"
                          : void 0;
                    }),
                    (e.getVersionPrecision = function (e) {
                      return e.split(".").length;
                    }),
                    (e.compareVersions = function (t, r, n) {
                      void 0 === n && (n = !1);
                      var a = e.getVersionPrecision(t),
                        i = e.getVersionPrecision(r),
                        s = Math.max(a, i),
                        o = 0,
                        c = e.map([t, r], function (t) {
                          var r = s - e.getVersionPrecision(t),
                            n = t + new Array(r + 1).join(".0");
                          return e
                            .map(n.split("."), function (e) {
                              return new Array(20 - e.length).join("0") + e;
                            })
                            .reverse();
                        });
                      for (n && (o = s - Math.min(a, i)), s -= 1; s >= o; ) {
                        if (c[0][s] > c[1][s]) return 1;
                        if (c[0][s] === c[1][s]) {
                          if (s === o) return 0;
                          s -= 1;
                        } else if (c[0][s] < c[1][s]) return -1;
                      }
                    }),
                    (e.map = function (e, t) {
                      var r,
                        n = [];
                      if (Array.prototype.map)
                        return Array.prototype.map.call(e, t);
                      for (r = 0; r < e.length; r += 1) n.push(t(e[r]));
                      return n;
                    }),
                    (e.find = function (e, t) {
                      var r, n;
                      if (Array.prototype.find)
                        return Array.prototype.find.call(e, t);
                      for (r = 0, n = e.length; r < n; r += 1) {
                        var a = e[r];
                        if (t(a, r)) return a;
                      }
                    }),
                    (e.assign = function (e) {
                      for (
                        var t,
                          r,
                          n = e,
                          a = arguments.length,
                          i = new Array(a > 1 ? a - 1 : 0),
                          s = 1;
                        s < a;
                        s++
                      )
                        i[s - 1] = arguments[s];
                      if (Object.assign)
                        return Object.assign.apply(Object, [e].concat(i));
                      var o = function () {
                        var e = i[t];
                        "object" == typeof e &&
                          null !== e &&
                          Object.keys(e).forEach(function (t) {
                            n[t] = e[t];
                          });
                      };
                      for (t = 0, r = i.length; t < r; t += 1) o();
                      return e;
                    }),
                    (e.getBrowserAlias = function (e) {
                      return n.BROWSER_ALIASES_MAP[e];
                    }),
                    (e.getBrowserTypeByAlias = function (e) {
                      return n.BROWSER_MAP[e] || "";
                    }),
                    e
                  );
                })();
              (t.default = a), (e.exports = t.default);
            },
            18: function (e, t, r) {
              "use strict";
              (t.__esModule = !0),
                (t.ENGINE_MAP =
                  t.OS_MAP =
                  t.PLATFORMS_MAP =
                  t.BROWSER_MAP =
                  t.BROWSER_ALIASES_MAP =
                    void 0),
                (t.BROWSER_ALIASES_MAP = {
                  "Amazon Silk": "amazon_silk",
                  "Android Browser": "android",
                  Bada: "bada",
                  BlackBerry: "blackberry",
                  Chrome: "chrome",
                  Chromium: "chromium",
                  Electron: "electron",
                  Epiphany: "epiphany",
                  Firefox: "firefox",
                  Focus: "focus",
                  Generic: "generic",
                  "Google Search": "google_search",
                  Googlebot: "googlebot",
                  "Internet Explorer": "ie",
                  "K-Meleon": "k_meleon",
                  Maxthon: "maxthon",
                  "Microsoft Edge": "edge",
                  "MZ Browser": "mz",
                  "NAVER Whale Browser": "naver",
                  Opera: "opera",
                  "Opera Coast": "opera_coast",
                  PhantomJS: "phantomjs",
                  Puffin: "puffin",
                  QupZilla: "qupzilla",
                  QQ: "qq",
                  QQLite: "qqlite",
                  Safari: "safari",
                  Sailfish: "sailfish",
                  "Samsung Internet for Android": "samsung_internet",
                  SeaMonkey: "seamonkey",
                  Sleipnir: "sleipnir",
                  Swing: "swing",
                  Tizen: "tizen",
                  "UC Browser": "uc",
                  Vivaldi: "vivaldi",
                  "WebOS Browser": "webos",
                  WeChat: "wechat",
                  "Yandex Browser": "yandex",
                  Roku: "roku",
                }),
                (t.BROWSER_MAP = {
                  amazon_silk: "Amazon Silk",
                  android: "Android Browser",
                  bada: "Bada",
                  blackberry: "BlackBerry",
                  chrome: "Chrome",
                  chromium: "Chromium",
                  electron: "Electron",
                  epiphany: "Epiphany",
                  firefox: "Firefox",
                  focus: "Focus",
                  generic: "Generic",
                  googlebot: "Googlebot",
                  google_search: "Google Search",
                  ie: "Internet Explorer",
                  k_meleon: "K-Meleon",
                  maxthon: "Maxthon",
                  edge: "Microsoft Edge",
                  mz: "MZ Browser",
                  naver: "NAVER Whale Browser",
                  opera: "Opera",
                  opera_coast: "Opera Coast",
                  phantomjs: "PhantomJS",
                  puffin: "Puffin",
                  qupzilla: "QupZilla",
                  qq: "QQ Browser",
                  qqlite: "QQ Browser Lite",
                  safari: "Safari",
                  sailfish: "Sailfish",
                  samsung_internet: "Samsung Internet for Android",
                  seamonkey: "SeaMonkey",
                  sleipnir: "Sleipnir",
                  swing: "Swing",
                  tizen: "Tizen",
                  uc: "UC Browser",
                  vivaldi: "Vivaldi",
                  webos: "WebOS Browser",
                  wechat: "WeChat",
                  yandex: "Yandex Browser",
                }),
                (t.PLATFORMS_MAP = {
                  tablet: "tablet",
                  mobile: "mobile",
                  desktop: "desktop",
                  tv: "tv",
                }),
                (t.OS_MAP = {
                  WindowsPhone: "Windows Phone",
                  Windows: "Windows",
                  MacOS: "macOS",
                  iOS: "iOS",
                  Android: "Android",
                  WebOS: "WebOS",
                  BlackBerry: "BlackBerry",
                  Bada: "Bada",
                  Tizen: "Tizen",
                  Linux: "Linux",
                  ChromeOS: "Chrome OS",
                  PlayStation4: "PlayStation 4",
                  Roku: "Roku",
                }),
                (t.ENGINE_MAP = {
                  EdgeHTML: "EdgeHTML",
                  Blink: "Blink",
                  Trident: "Trident",
                  Presto: "Presto",
                  Gecko: "Gecko",
                  WebKit: "WebKit",
                });
            },
            90: function (e, t, r) {
              "use strict";
              (t.__esModule = !0), (t.default = void 0);
              var n,
                a = (n = r(91)) && n.__esModule ? n : { default: n },
                i = r(18);
              function s(e, t) {
                for (var r = 0; r < t.length; r++) {
                  var n = t[r];
                  (n.enumerable = n.enumerable || !1),
                    (n.configurable = !0),
                    "value" in n && (n.writable = !0),
                    Object.defineProperty(e, n.key, n);
                }
              }
              var o = (function () {
                function e() {}
                var t, r, n;
                return (
                  (e.getParser = function (e, t) {
                    if ((void 0 === t && (t = !1), "string" != typeof e))
                      throw new Error("UserAgent should be a string");
                    return new a.default(e, t);
                  }),
                  (e.parse = function (e) {
                    return new a.default(e).getResult();
                  }),
                  (t = e),
                  (n = [
                    {
                      key: "BROWSER_MAP",
                      get: function () {
                        return i.BROWSER_MAP;
                      },
                    },
                    {
                      key: "ENGINE_MAP",
                      get: function () {
                        return i.ENGINE_MAP;
                      },
                    },
                    {
                      key: "OS_MAP",
                      get: function () {
                        return i.OS_MAP;
                      },
                    },
                    {
                      key: "PLATFORMS_MAP",
                      get: function () {
                        return i.PLATFORMS_MAP;
                      },
                    },
                  ]),
                  (r = null) && s(t.prototype, r),
                  n && s(t, n),
                  e
                );
              })();
              (t.default = o), (e.exports = t.default);
            },
            91: function (e, t, r) {
              "use strict";
              (t.__esModule = !0), (t.default = void 0);
              var n = c(r(92)),
                a = c(r(93)),
                i = c(r(94)),
                s = c(r(95)),
                o = c(r(17));
              function c(e) {
                return e && e.__esModule ? e : { default: e };
              }
              var d = (function () {
                function e(e, t) {
                  if ((void 0 === t && (t = !1), null == e || "" === e))
                    throw new Error("UserAgent parameter can't be empty");
                  (this._ua = e),
                    (this.parsedResult = {}),
                    !0 !== t && this.parse();
                }
                var t = e.prototype;
                return (
                  (t.getUA = function () {
                    return this._ua;
                  }),
                  (t.test = function (e) {
                    return e.test(this._ua);
                  }),
                  (t.parseBrowser = function () {
                    var e = this;
                    this.parsedResult.browser = {};
                    var t = o.default.find(n.default, function (t) {
                      if ("function" == typeof t.test) return t.test(e);
                      if (t.test instanceof Array)
                        return t.test.some(function (t) {
                          return e.test(t);
                        });
                      throw new Error("Browser's test function is not valid");
                    });
                    return (
                      t &&
                        (this.parsedResult.browser = t.describe(this.getUA())),
                      this.parsedResult.browser
                    );
                  }),
                  (t.getBrowser = function () {
                    return this.parsedResult.browser
                      ? this.parsedResult.browser
                      : this.parseBrowser();
                  }),
                  (t.getBrowserName = function (e) {
                    return e
                      ? String(this.getBrowser().name).toLowerCase() || ""
                      : this.getBrowser().name || "";
                  }),
                  (t.getBrowserVersion = function () {
                    return this.getBrowser().version;
                  }),
                  (t.getOS = function () {
                    return this.parsedResult.os
                      ? this.parsedResult.os
                      : this.parseOS();
                  }),
                  (t.parseOS = function () {
                    var e = this;
                    this.parsedResult.os = {};
                    var t = o.default.find(a.default, function (t) {
                      if ("function" == typeof t.test) return t.test(e);
                      if (t.test instanceof Array)
                        return t.test.some(function (t) {
                          return e.test(t);
                        });
                      throw new Error("Browser's test function is not valid");
                    });
                    return (
                      t && (this.parsedResult.os = t.describe(this.getUA())),
                      this.parsedResult.os
                    );
                  }),
                  (t.getOSName = function (e) {
                    var t = this.getOS().name;
                    return e ? String(t).toLowerCase() || "" : t || "";
                  }),
                  (t.getOSVersion = function () {
                    return this.getOS().version;
                  }),
                  (t.getPlatform = function () {
                    return this.parsedResult.platform
                      ? this.parsedResult.platform
                      : this.parsePlatform();
                  }),
                  (t.getPlatformType = function (e) {
                    void 0 === e && (e = !1);
                    var t = this.getPlatform().type;
                    return e ? String(t).toLowerCase() || "" : t || "";
                  }),
                  (t.parsePlatform = function () {
                    var e = this;
                    this.parsedResult.platform = {};
                    var t = o.default.find(i.default, function (t) {
                      if ("function" == typeof t.test) return t.test(e);
                      if (t.test instanceof Array)
                        return t.test.some(function (t) {
                          return e.test(t);
                        });
                      throw new Error("Browser's test function is not valid");
                    });
                    return (
                      t &&
                        (this.parsedResult.platform = t.describe(this.getUA())),
                      this.parsedResult.platform
                    );
                  }),
                  (t.getEngine = function () {
                    return this.parsedResult.engine
                      ? this.parsedResult.engine
                      : this.parseEngine();
                  }),
                  (t.getEngineName = function (e) {
                    return e
                      ? String(this.getEngine().name).toLowerCase() || ""
                      : this.getEngine().name || "";
                  }),
                  (t.parseEngine = function () {
                    var e = this;
                    this.parsedResult.engine = {};
                    var t = o.default.find(s.default, function (t) {
                      if ("function" == typeof t.test) return t.test(e);
                      if (t.test instanceof Array)
                        return t.test.some(function (t) {
                          return e.test(t);
                        });
                      throw new Error("Browser's test function is not valid");
                    });
                    return (
                      t &&
                        (this.parsedResult.engine = t.describe(this.getUA())),
                      this.parsedResult.engine
                    );
                  }),
                  (t.parse = function () {
                    return (
                      this.parseBrowser(),
                      this.parseOS(),
                      this.parsePlatform(),
                      this.parseEngine(),
                      this
                    );
                  }),
                  (t.getResult = function () {
                    return o.default.assign({}, this.parsedResult);
                  }),
                  (t.satisfies = function (e) {
                    var t = this,
                      r = {},
                      n = 0,
                      a = {},
                      i = 0;
                    if (
                      (Object.keys(e).forEach(function (t) {
                        var s = e[t];
                        "string" == typeof s
                          ? ((a[t] = s), (i += 1))
                          : "object" == typeof s && ((r[t] = s), (n += 1));
                      }),
                      n > 0)
                    ) {
                      var s = Object.keys(r),
                        c = o.default.find(s, function (e) {
                          return t.isOS(e);
                        });
                      if (c) {
                        var d = this.satisfies(r[c]);
                        if (void 0 !== d) return d;
                      }
                      var l = o.default.find(s, function (e) {
                        return t.isPlatform(e);
                      });
                      if (l) {
                        var u = this.satisfies(r[l]);
                        if (void 0 !== u) return u;
                      }
                    }
                    if (i > 0) {
                      var p = Object.keys(a),
                        h = o.default.find(p, function (e) {
                          return t.isBrowser(e, !0);
                        });
                      if (void 0 !== h) return this.compareVersion(a[h]);
                    }
                  }),
                  (t.isBrowser = function (e, t) {
                    void 0 === t && (t = !1);
                    var r = this.getBrowserName().toLowerCase(),
                      n = e.toLowerCase(),
                      a = o.default.getBrowserTypeByAlias(n);
                    return t && a && (n = a.toLowerCase()), n === r;
                  }),
                  (t.compareVersion = function (e) {
                    var t = [0],
                      r = e,
                      n = !1,
                      a = this.getBrowserVersion();
                    if ("string" == typeof a)
                      return (
                        ">" === e[0] || "<" === e[0]
                          ? ((r = e.substr(1)),
                            "=" === e[1]
                              ? ((n = !0), (r = e.substr(2)))
                              : (t = []),
                            ">" === e[0] ? t.push(1) : t.push(-1))
                          : "=" === e[0]
                          ? (r = e.substr(1))
                          : "~" === e[0] && ((n = !0), (r = e.substr(1))),
                        t.indexOf(o.default.compareVersions(a, r, n)) > -1
                      );
                  }),
                  (t.isOS = function (e) {
                    return this.getOSName(!0) === String(e).toLowerCase();
                  }),
                  (t.isPlatform = function (e) {
                    return this.getPlatformType(!0) === String(e).toLowerCase();
                  }),
                  (t.isEngine = function (e) {
                    return this.getEngineName(!0) === String(e).toLowerCase();
                  }),
                  (t.is = function (e, t) {
                    return (
                      void 0 === t && (t = !1),
                      this.isBrowser(e, t) || this.isOS(e) || this.isPlatform(e)
                    );
                  }),
                  (t.some = function (e) {
                    var t = this;
                    return (
                      void 0 === e && (e = []),
                      e.some(function (e) {
                        return t.is(e);
                      })
                    );
                  }),
                  e
                );
              })();
              (t.default = d), (e.exports = t.default);
            },
            92: function (e, t, r) {
              "use strict";
              (t.__esModule = !0), (t.default = void 0);
              var n,
                a = (n = r(17)) && n.__esModule ? n : { default: n },
                i = /version\/(\d+(\.?_?\d+)+)/i,
                s = [
                  {
                    test: [/googlebot/i],
                    describe: function (e) {
                      var t = { name: "Googlebot" },
                        r =
                          a.default.getFirstMatch(
                            /googlebot\/(\d+(\.\d+))/i,
                            e
                          ) || a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/opera/i],
                    describe: function (e) {
                      var t = { name: "Opera" },
                        r =
                          a.default.getFirstMatch(i, e) ||
                          a.default.getFirstMatch(
                            /(?:opera)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/opr\/|opios/i],
                    describe: function (e) {
                      var t = { name: "Opera" },
                        r =
                          a.default.getFirstMatch(
                            /(?:opr|opios)[\s/](\S+)/i,
                            e
                          ) || a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/SamsungBrowser/i],
                    describe: function (e) {
                      var t = { name: "Samsung Internet for Android" },
                        r =
                          a.default.getFirstMatch(i, e) ||
                          a.default.getFirstMatch(
                            /(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/Whale/i],
                    describe: function (e) {
                      var t = { name: "NAVER Whale Browser" },
                        r =
                          a.default.getFirstMatch(i, e) ||
                          a.default.getFirstMatch(
                            /(?:whale)[\s/](\d+(?:\.\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/MZBrowser/i],
                    describe: function (e) {
                      var t = { name: "MZ Browser" },
                        r =
                          a.default.getFirstMatch(
                            /(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i,
                            e
                          ) || a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/focus/i],
                    describe: function (e) {
                      var t = { name: "Focus" },
                        r =
                          a.default.getFirstMatch(
                            /(?:focus)[\s/](\d+(?:\.\d+)+)/i,
                            e
                          ) || a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/swing/i],
                    describe: function (e) {
                      var t = { name: "Swing" },
                        r =
                          a.default.getFirstMatch(
                            /(?:swing)[\s/](\d+(?:\.\d+)+)/i,
                            e
                          ) || a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/coast/i],
                    describe: function (e) {
                      var t = { name: "Opera Coast" },
                        r =
                          a.default.getFirstMatch(i, e) ||
                          a.default.getFirstMatch(
                            /(?:coast)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/opt\/\d+(?:.?_?\d+)+/i],
                    describe: function (e) {
                      var t = { name: "Opera Touch" },
                        r =
                          a.default.getFirstMatch(
                            /(?:opt)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          ) || a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/yabrowser/i],
                    describe: function (e) {
                      var t = { name: "Yandex Browser" },
                        r =
                          a.default.getFirstMatch(
                            /(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          ) || a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/ucbrowser/i],
                    describe: function (e) {
                      var t = { name: "UC Browser" },
                        r =
                          a.default.getFirstMatch(i, e) ||
                          a.default.getFirstMatch(
                            /(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/Maxthon|mxios/i],
                    describe: function (e) {
                      var t = { name: "Maxthon" },
                        r =
                          a.default.getFirstMatch(i, e) ||
                          a.default.getFirstMatch(
                            /(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/epiphany/i],
                    describe: function (e) {
                      var t = { name: "Epiphany" },
                        r =
                          a.default.getFirstMatch(i, e) ||
                          a.default.getFirstMatch(
                            /(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/puffin/i],
                    describe: function (e) {
                      var t = { name: "Puffin" },
                        r =
                          a.default.getFirstMatch(i, e) ||
                          a.default.getFirstMatch(
                            /(?:puffin)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/sleipnir/i],
                    describe: function (e) {
                      var t = { name: "Sleipnir" },
                        r =
                          a.default.getFirstMatch(i, e) ||
                          a.default.getFirstMatch(
                            /(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/k-meleon/i],
                    describe: function (e) {
                      var t = { name: "K-Meleon" },
                        r =
                          a.default.getFirstMatch(i, e) ||
                          a.default.getFirstMatch(
                            /(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/micromessenger/i],
                    describe: function (e) {
                      var t = { name: "WeChat" },
                        r =
                          a.default.getFirstMatch(
                            /(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          ) || a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/qqbrowser/i],
                    describe: function (e) {
                      var t = {
                          name: /qqbrowserlite/i.test(e)
                            ? "QQ Browser Lite"
                            : "QQ Browser",
                        },
                        r =
                          a.default.getFirstMatch(
                            /(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i,
                            e
                          ) || a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/msie|trident/i],
                    describe: function (e) {
                      var t = { name: "Internet Explorer" },
                        r = a.default.getFirstMatch(
                          /(?:msie |rv:)(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/\sedg\//i],
                    describe: function (e) {
                      var t = { name: "Microsoft Edge" },
                        r = a.default.getFirstMatch(
                          /\sedg\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/edg([ea]|ios)/i],
                    describe: function (e) {
                      var t = { name: "Microsoft Edge" },
                        r = a.default.getSecondMatch(
                          /edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/vivaldi/i],
                    describe: function (e) {
                      var t = { name: "Vivaldi" },
                        r = a.default.getFirstMatch(
                          /vivaldi\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/seamonkey/i],
                    describe: function (e) {
                      var t = { name: "SeaMonkey" },
                        r = a.default.getFirstMatch(
                          /seamonkey\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/sailfish/i],
                    describe: function (e) {
                      var t = { name: "Sailfish" },
                        r = a.default.getFirstMatch(
                          /sailfish\s?browser\/(\d+(\.\d+)?)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/silk/i],
                    describe: function (e) {
                      var t = { name: "Amazon Silk" },
                        r = a.default.getFirstMatch(
                          /silk\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/phantom/i],
                    describe: function (e) {
                      var t = { name: "PhantomJS" },
                        r = a.default.getFirstMatch(
                          /phantomjs\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/slimerjs/i],
                    describe: function (e) {
                      var t = { name: "SlimerJS" },
                        r = a.default.getFirstMatch(
                          /slimerjs\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
                    describe: function (e) {
                      var t = { name: "BlackBerry" },
                        r =
                          a.default.getFirstMatch(i, e) ||
                          a.default.getFirstMatch(
                            /blackberry[\d]+\/(\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/(web|hpw)[o0]s/i],
                    describe: function (e) {
                      var t = { name: "WebOS Browser" },
                        r =
                          a.default.getFirstMatch(i, e) ||
                          a.default.getFirstMatch(
                            /w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/bada/i],
                    describe: function (e) {
                      var t = { name: "Bada" },
                        r = a.default.getFirstMatch(
                          /dolfin\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/tizen/i],
                    describe: function (e) {
                      var t = { name: "Tizen" },
                        r =
                          a.default.getFirstMatch(
                            /(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i,
                            e
                          ) || a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/qupzilla/i],
                    describe: function (e) {
                      var t = { name: "QupZilla" },
                        r =
                          a.default.getFirstMatch(
                            /(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          ) || a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/firefox|iceweasel|fxios/i],
                    describe: function (e) {
                      var t = { name: "Firefox" },
                        r = a.default.getFirstMatch(
                          /(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/electron/i],
                    describe: function (e) {
                      var t = { name: "Electron" },
                        r = a.default.getFirstMatch(
                          /(?:electron)\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/MiuiBrowser/i],
                    describe: function (e) {
                      var t = { name: "Miui" },
                        r = a.default.getFirstMatch(
                          /(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/chromium/i],
                    describe: function (e) {
                      var t = { name: "Chromium" },
                        r =
                          a.default.getFirstMatch(
                            /(?:chromium)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          ) || a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/chrome|crios|crmo/i],
                    describe: function (e) {
                      var t = { name: "Chrome" },
                        r = a.default.getFirstMatch(
                          /(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/GSA/i],
                    describe: function (e) {
                      var t = { name: "Google Search" },
                        r = a.default.getFirstMatch(
                          /(?:GSA)\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: function (e) {
                      var t = !e.test(/like android/i),
                        r = e.test(/android/i);
                      return t && r;
                    },
                    describe: function (e) {
                      var t = { name: "Android Browser" },
                        r = a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/playstation 4/i],
                    describe: function (e) {
                      var t = { name: "PlayStation 4" },
                        r = a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/safari|applewebkit/i],
                    describe: function (e) {
                      var t = { name: "Safari" },
                        r = a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/.*/i],
                    describe: function (e) {
                      var t =
                        -1 !== e.search("\\(")
                          ? /^(.*)\/(.*)[ \t]\((.*)/
                          : /^(.*)\/(.*) /;
                      return {
                        name: a.default.getFirstMatch(t, e),
                        version: a.default.getSecondMatch(t, e),
                      };
                    },
                  },
                ];
              (t.default = s), (e.exports = t.default);
            },
            93: function (e, t, r) {
              "use strict";
              (t.__esModule = !0), (t.default = void 0);
              var n,
                a = (n = r(17)) && n.__esModule ? n : { default: n },
                i = r(18),
                s = [
                  {
                    test: [/Roku\/DVP/],
                    describe: function (e) {
                      var t = a.default.getFirstMatch(
                        /Roku\/DVP-(\d+\.\d+)/i,
                        e
                      );
                      return { name: i.OS_MAP.Roku, version: t };
                    },
                  },
                  {
                    test: [/windows phone/i],
                    describe: function (e) {
                      var t = a.default.getFirstMatch(
                        /windows phone (?:os)?\s?(\d+(\.\d+)*)/i,
                        e
                      );
                      return { name: i.OS_MAP.WindowsPhone, version: t };
                    },
                  },
                  {
                    test: [/windows /i],
                    describe: function (e) {
                      var t = a.default.getFirstMatch(
                          /Windows ((NT|XP)( \d\d?.\d)?)/i,
                          e
                        ),
                        r = a.default.getWindowsVersionName(t);
                      return {
                        name: i.OS_MAP.Windows,
                        version: t,
                        versionName: r,
                      };
                    },
                  },
                  {
                    test: [/Macintosh(.*?) FxiOS(.*?)\//],
                    describe: function (e) {
                      var t = { name: i.OS_MAP.iOS },
                        r = a.default.getSecondMatch(
                          /(Version\/)(\d[\d.]+)/,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/macintosh/i],
                    describe: function (e) {
                      var t = a.default
                          .getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, e)
                          .replace(/[_\s]/g, "."),
                        r = a.default.getMacOSVersionName(t),
                        n = { name: i.OS_MAP.MacOS, version: t };
                      return r && (n.versionName = r), n;
                    },
                  },
                  {
                    test: [/(ipod|iphone|ipad)/i],
                    describe: function (e) {
                      var t = a.default
                        .getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, e)
                        .replace(/[_\s]/g, ".");
                      return { name: i.OS_MAP.iOS, version: t };
                    },
                  },
                  {
                    test: function (e) {
                      var t = !e.test(/like android/i),
                        r = e.test(/android/i);
                      return t && r;
                    },
                    describe: function (e) {
                      var t = a.default.getFirstMatch(
                          /android[\s/-](\d+(\.\d+)*)/i,
                          e
                        ),
                        r = a.default.getAndroidVersionName(t),
                        n = { name: i.OS_MAP.Android, version: t };
                      return r && (n.versionName = r), n;
                    },
                  },
                  {
                    test: [/(web|hpw)[o0]s/i],
                    describe: function (e) {
                      var t = a.default.getFirstMatch(
                          /(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i,
                          e
                        ),
                        r = { name: i.OS_MAP.WebOS };
                      return t && t.length && (r.version = t), r;
                    },
                  },
                  {
                    test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
                    describe: function (e) {
                      var t =
                        a.default.getFirstMatch(
                          /rim\stablet\sos\s(\d+(\.\d+)*)/i,
                          e
                        ) ||
                        a.default.getFirstMatch(
                          /blackberry\d+\/(\d+([_\s]\d+)*)/i,
                          e
                        ) ||
                        a.default.getFirstMatch(/\bbb(\d+)/i, e);
                      return { name: i.OS_MAP.BlackBerry, version: t };
                    },
                  },
                  {
                    test: [/bada/i],
                    describe: function (e) {
                      var t = a.default.getFirstMatch(
                        /bada\/(\d+(\.\d+)*)/i,
                        e
                      );
                      return { name: i.OS_MAP.Bada, version: t };
                    },
                  },
                  {
                    test: [/tizen/i],
                    describe: function (e) {
                      var t = a.default.getFirstMatch(
                        /tizen[/\s](\d+(\.\d+)*)/i,
                        e
                      );
                      return { name: i.OS_MAP.Tizen, version: t };
                    },
                  },
                  {
                    test: [/linux/i],
                    describe: function () {
                      return { name: i.OS_MAP.Linux };
                    },
                  },
                  {
                    test: [/CrOS/],
                    describe: function () {
                      return { name: i.OS_MAP.ChromeOS };
                    },
                  },
                  {
                    test: [/PlayStation 4/],
                    describe: function (e) {
                      var t = a.default.getFirstMatch(
                        /PlayStation 4[/\s](\d+(\.\d+)*)/i,
                        e
                      );
                      return { name: i.OS_MAP.PlayStation4, version: t };
                    },
                  },
                ];
              (t.default = s), (e.exports = t.default);
            },
            94: function (e, t, r) {
              "use strict";
              (t.__esModule = !0), (t.default = void 0);
              var n,
                a = (n = r(17)) && n.__esModule ? n : { default: n },
                i = r(18),
                s = [
                  {
                    test: [/googlebot/i],
                    describe: function () {
                      return { type: "bot", vendor: "Google" };
                    },
                  },
                  {
                    test: [/huawei/i],
                    describe: function (e) {
                      var t =
                          a.default.getFirstMatch(/(can-l01)/i, e) && "Nova",
                        r = { type: i.PLATFORMS_MAP.mobile, vendor: "Huawei" };
                      return t && (r.model = t), r;
                    },
                  },
                  {
                    test: [/nexus\s*(?:7|8|9|10).*/i],
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.tablet, vendor: "Nexus" };
                    },
                  },
                  {
                    test: [/ipad/i],
                    describe: function () {
                      return {
                        type: i.PLATFORMS_MAP.tablet,
                        vendor: "Apple",
                        model: "iPad",
                      };
                    },
                  },
                  {
                    test: [/Macintosh(.*?) FxiOS(.*?)\//],
                    describe: function () {
                      return {
                        type: i.PLATFORMS_MAP.tablet,
                        vendor: "Apple",
                        model: "iPad",
                      };
                    },
                  },
                  {
                    test: [/kftt build/i],
                    describe: function () {
                      return {
                        type: i.PLATFORMS_MAP.tablet,
                        vendor: "Amazon",
                        model: "Kindle Fire HD 7",
                      };
                    },
                  },
                  {
                    test: [/silk/i],
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.tablet, vendor: "Amazon" };
                    },
                  },
                  {
                    test: [/tablet(?! pc)/i],
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.tablet };
                    },
                  },
                  {
                    test: function (e) {
                      var t = e.test(/ipod|iphone/i),
                        r = e.test(/like (ipod|iphone)/i);
                      return t && !r;
                    },
                    describe: function (e) {
                      var t = a.default.getFirstMatch(/(ipod|iphone)/i, e);
                      return {
                        type: i.PLATFORMS_MAP.mobile,
                        vendor: "Apple",
                        model: t,
                      };
                    },
                  },
                  {
                    test: [/nexus\s*[0-6].*/i, /galaxy nexus/i],
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.mobile, vendor: "Nexus" };
                    },
                  },
                  {
                    test: [/[^-]mobi/i],
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.mobile };
                    },
                  },
                  {
                    test: function (e) {
                      return "blackberry" === e.getBrowserName(!0);
                    },
                    describe: function () {
                      return {
                        type: i.PLATFORMS_MAP.mobile,
                        vendor: "BlackBerry",
                      };
                    },
                  },
                  {
                    test: function (e) {
                      return "bada" === e.getBrowserName(!0);
                    },
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.mobile };
                    },
                  },
                  {
                    test: function (e) {
                      return "windows phone" === e.getBrowserName();
                    },
                    describe: function () {
                      return {
                        type: i.PLATFORMS_MAP.mobile,
                        vendor: "Microsoft",
                      };
                    },
                  },
                  {
                    test: function (e) {
                      var t = Number(String(e.getOSVersion()).split(".")[0]);
                      return "android" === e.getOSName(!0) && t >= 3;
                    },
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.tablet };
                    },
                  },
                  {
                    test: function (e) {
                      return "android" === e.getOSName(!0);
                    },
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.mobile };
                    },
                  },
                  {
                    test: function (e) {
                      return "macos" === e.getOSName(!0);
                    },
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.desktop, vendor: "Apple" };
                    },
                  },
                  {
                    test: function (e) {
                      return "windows" === e.getOSName(!0);
                    },
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.desktop };
                    },
                  },
                  {
                    test: function (e) {
                      return "linux" === e.getOSName(!0);
                    },
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.desktop };
                    },
                  },
                  {
                    test: function (e) {
                      return "playstation 4" === e.getOSName(!0);
                    },
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.tv };
                    },
                  },
                  {
                    test: function (e) {
                      return "roku" === e.getOSName(!0);
                    },
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.tv };
                    },
                  },
                ];
              (t.default = s), (e.exports = t.default);
            },
            95: function (e, t, r) {
              "use strict";
              (t.__esModule = !0), (t.default = void 0);
              var n,
                a = (n = r(17)) && n.__esModule ? n : { default: n },
                i = r(18),
                s = [
                  {
                    test: function (e) {
                      return "microsoft edge" === e.getBrowserName(!0);
                    },
                    describe: function (e) {
                      if (/\sedg\//i.test(e))
                        return { name: i.ENGINE_MAP.Blink };
                      var t = a.default.getFirstMatch(
                        /edge\/(\d+(\.?_?\d+)+)/i,
                        e
                      );
                      return { name: i.ENGINE_MAP.EdgeHTML, version: t };
                    },
                  },
                  {
                    test: [/trident/i],
                    describe: function (e) {
                      var t = { name: i.ENGINE_MAP.Trident },
                        r = a.default.getFirstMatch(
                          /trident\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: function (e) {
                      return e.test(/presto/i);
                    },
                    describe: function (e) {
                      var t = { name: i.ENGINE_MAP.Presto },
                        r = a.default.getFirstMatch(
                          /presto\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: function (e) {
                      var t = e.test(/gecko/i),
                        r = e.test(/like gecko/i);
                      return t && !r;
                    },
                    describe: function (e) {
                      var t = { name: i.ENGINE_MAP.Gecko },
                        r = a.default.getFirstMatch(
                          /gecko\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/(apple)?webkit\/537\.36/i],
                    describe: function () {
                      return { name: i.ENGINE_MAP.Blink };
                    },
                  },
                  {
                    test: [/(apple)?webkit/i],
                    describe: function (e) {
                      var t = { name: i.ENGINE_MAP.WebKit },
                        r = a.default.getFirstMatch(
                          /webkit\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                ];
              (t.default = s), (e.exports = t.default);
            },
          });
        },
        452: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(8269),
            r(8214),
            r(888),
            r(5109),
            (function () {
              var e = n,
                t = e.lib.BlockCipher,
                r = e.algo,
                a = [],
                i = [],
                s = [],
                o = [],
                c = [],
                d = [],
                l = [],
                u = [],
                p = [],
                h = [];
              !(function () {
                for (var e = [], t = 0; t < 256; t++)
                  e[t] = t < 128 ? t << 1 : (t << 1) ^ 283;
                var r = 0,
                  n = 0;
                for (t = 0; t < 256; t++) {
                  var m = n ^ (n << 1) ^ (n << 2) ^ (n << 3) ^ (n << 4);
                  (m = (m >>> 8) ^ (255 & m) ^ 99), (a[r] = m), (i[m] = r);
                  var f = e[r],
                    v = e[f],
                    _ = e[v],
                    g = (257 * e[m]) ^ (16843008 * m);
                  (s[r] = (g << 24) | (g >>> 8)),
                    (o[r] = (g << 16) | (g >>> 16)),
                    (c[r] = (g << 8) | (g >>> 24)),
                    (d[r] = g),
                    (g =
                      (16843009 * _) ^
                      (65537 * v) ^
                      (257 * f) ^
                      (16843008 * r)),
                    (l[m] = (g << 24) | (g >>> 8)),
                    (u[m] = (g << 16) | (g >>> 16)),
                    (p[m] = (g << 8) | (g >>> 24)),
                    (h[m] = g),
                    r
                      ? ((r = f ^ e[e[e[_ ^ f]]]), (n ^= e[e[n]]))
                      : (r = n = 1);
                }
              })();
              var m = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54],
                f = (r.AES = t.extend({
                  _doReset: function () {
                    if (!this._nRounds || this._keyPriorReset !== this._key) {
                      for (
                        var e = (this._keyPriorReset = this._key),
                          t = e.words,
                          r = e.sigBytes / 4,
                          n = 4 * ((this._nRounds = r + 6) + 1),
                          i = (this._keySchedule = []),
                          s = 0;
                        s < n;
                        s++
                      )
                        s < r
                          ? (i[s] = t[s])
                          : ((d = i[s - 1]),
                            s % r
                              ? r > 6 &&
                                s % r == 4 &&
                                (d =
                                  (a[d >>> 24] << 24) |
                                  (a[(d >>> 16) & 255] << 16) |
                                  (a[(d >>> 8) & 255] << 8) |
                                  a[255 & d])
                              : ((d =
                                  (a[(d = (d << 8) | (d >>> 24)) >>> 24] <<
                                    24) |
                                  (a[(d >>> 16) & 255] << 16) |
                                  (a[(d >>> 8) & 255] << 8) |
                                  a[255 & d]),
                                (d ^= m[(s / r) | 0] << 24)),
                            (i[s] = i[s - r] ^ d));
                      for (
                        var o = (this._invKeySchedule = []), c = 0;
                        c < n;
                        c++
                      ) {
                        if (((s = n - c), c % 4)) var d = i[s];
                        else d = i[s - 4];
                        o[c] =
                          c < 4 || s <= 4
                            ? d
                            : l[a[d >>> 24]] ^
                              u[a[(d >>> 16) & 255]] ^
                              p[a[(d >>> 8) & 255]] ^
                              h[a[255 & d]];
                      }
                    }
                  },
                  encryptBlock: function (e, t) {
                    this._doCryptBlock(e, t, this._keySchedule, s, o, c, d, a);
                  },
                  decryptBlock: function (e, t) {
                    var r = e[t + 1];
                    (e[t + 1] = e[t + 3]),
                      (e[t + 3] = r),
                      this._doCryptBlock(
                        e,
                        t,
                        this._invKeySchedule,
                        l,
                        u,
                        p,
                        h,
                        i
                      ),
                      (r = e[t + 1]),
                      (e[t + 1] = e[t + 3]),
                      (e[t + 3] = r);
                  },
                  _doCryptBlock: function (e, t, r, n, a, i, s, o) {
                    for (
                      var c = this._nRounds,
                        d = e[t] ^ r[0],
                        l = e[t + 1] ^ r[1],
                        u = e[t + 2] ^ r[2],
                        p = e[t + 3] ^ r[3],
                        h = 4,
                        m = 1;
                      m < c;
                      m++
                    ) {
                      var f =
                          n[d >>> 24] ^
                          a[(l >>> 16) & 255] ^
                          i[(u >>> 8) & 255] ^
                          s[255 & p] ^
                          r[h++],
                        v =
                          n[l >>> 24] ^
                          a[(u >>> 16) & 255] ^
                          i[(p >>> 8) & 255] ^
                          s[255 & d] ^
                          r[h++],
                        _ =
                          n[u >>> 24] ^
                          a[(p >>> 16) & 255] ^
                          i[(d >>> 8) & 255] ^
                          s[255 & l] ^
                          r[h++],
                        g =
                          n[p >>> 24] ^
                          a[(d >>> 16) & 255] ^
                          i[(l >>> 8) & 255] ^
                          s[255 & u] ^
                          r[h++];
                      (d = f), (l = v), (u = _), (p = g);
                    }
                    (f =
                      ((o[d >>> 24] << 24) |
                        (o[(l >>> 16) & 255] << 16) |
                        (o[(u >>> 8) & 255] << 8) |
                        o[255 & p]) ^
                      r[h++]),
                      (v =
                        ((o[l >>> 24] << 24) |
                          (o[(u >>> 16) & 255] << 16) |
                          (o[(p >>> 8) & 255] << 8) |
                          o[255 & d]) ^
                        r[h++]),
                      (_ =
                        ((o[u >>> 24] << 24) |
                          (o[(p >>> 16) & 255] << 16) |
                          (o[(d >>> 8) & 255] << 8) |
                          o[255 & l]) ^
                        r[h++]),
                      (g =
                        ((o[p >>> 24] << 24) |
                          (o[(d >>> 16) & 255] << 16) |
                          (o[(l >>> 8) & 255] << 8) |
                          o[255 & u]) ^
                        r[h++]),
                      (e[t] = f),
                      (e[t + 1] = v),
                      (e[t + 2] = _),
                      (e[t + 3] = g);
                  },
                  keySize: 8,
                }));
              e.AES = t._createHelper(f);
            })(),
            n.AES);
        },
        5109: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(888),
            void (
              n.lib.Cipher ||
              (function (e) {
                var t = n,
                  r = t.lib,
                  a = r.Base,
                  i = r.WordArray,
                  s = r.BufferedBlockAlgorithm,
                  o = t.enc,
                  c = (o.Utf8, o.Base64),
                  d = t.algo.EvpKDF,
                  l = (r.Cipher = s.extend({
                    cfg: a.extend(),
                    createEncryptor: function (e, t) {
                      return this.create(this._ENC_XFORM_MODE, e, t);
                    },
                    createDecryptor: function (e, t) {
                      return this.create(this._DEC_XFORM_MODE, e, t);
                    },
                    init: function (e, t, r) {
                      (this.cfg = this.cfg.extend(r)),
                        (this._xformMode = e),
                        (this._key = t),
                        this.reset();
                    },
                    reset: function () {
                      s.reset.call(this), this._doReset();
                    },
                    process: function (e) {
                      return this._append(e), this._process();
                    },
                    finalize: function (e) {
                      return e && this._append(e), this._doFinalize();
                    },
                    keySize: 4,
                    ivSize: 4,
                    _ENC_XFORM_MODE: 1,
                    _DEC_XFORM_MODE: 2,
                    _createHelper: (function () {
                      function e(e) {
                        return "string" == typeof e ? y : _;
                      }
                      return function (t) {
                        return {
                          encrypt: function (r, n, a) {
                            return e(n).encrypt(t, r, n, a);
                          },
                          decrypt: function (r, n, a) {
                            return e(n).decrypt(t, r, n, a);
                          },
                        };
                      };
                    })(),
                  })),
                  u =
                    ((r.StreamCipher = l.extend({
                      _doFinalize: function () {
                        return this._process(!0);
                      },
                      blockSize: 1,
                    })),
                    (t.mode = {})),
                  p = (r.BlockCipherMode = a.extend({
                    createEncryptor: function (e, t) {
                      return this.Encryptor.create(e, t);
                    },
                    createDecryptor: function (e, t) {
                      return this.Decryptor.create(e, t);
                    },
                    init: function (e, t) {
                      (this._cipher = e), (this._iv = t);
                    },
                  })),
                  h = (u.CBC = (function () {
                    var t = p.extend();
                    function r(t, r, n) {
                      var a,
                        i = this._iv;
                      i ? ((a = i), (this._iv = e)) : (a = this._prevBlock);
                      for (var s = 0; s < n; s++) t[r + s] ^= a[s];
                    }
                    return (
                      (t.Encryptor = t.extend({
                        processBlock: function (e, t) {
                          var n = this._cipher,
                            a = n.blockSize;
                          r.call(this, e, t, a),
                            n.encryptBlock(e, t),
                            (this._prevBlock = e.slice(t, t + a));
                        },
                      })),
                      (t.Decryptor = t.extend({
                        processBlock: function (e, t) {
                          var n = this._cipher,
                            a = n.blockSize,
                            i = e.slice(t, t + a);
                          n.decryptBlock(e, t),
                            r.call(this, e, t, a),
                            (this._prevBlock = i);
                        },
                      })),
                      t
                    );
                  })()),
                  m = ((t.pad = {}).Pkcs7 = {
                    pad: function (e, t) {
                      for (
                        var r = 4 * t,
                          n = r - (e.sigBytes % r),
                          a = (n << 24) | (n << 16) | (n << 8) | n,
                          s = [],
                          o = 0;
                        o < n;
                        o += 4
                      )
                        s.push(a);
                      var c = i.create(s, n);
                      e.concat(c);
                    },
                    unpad: function (e) {
                      var t = 255 & e.words[(e.sigBytes - 1) >>> 2];
                      e.sigBytes -= t;
                    },
                  }),
                  f =
                    ((r.BlockCipher = l.extend({
                      cfg: l.cfg.extend({ mode: h, padding: m }),
                      reset: function () {
                        var e;
                        l.reset.call(this);
                        var t = this.cfg,
                          r = t.iv,
                          n = t.mode;
                        this._xformMode == this._ENC_XFORM_MODE
                          ? (e = n.createEncryptor)
                          : ((e = n.createDecryptor),
                            (this._minBufferSize = 1)),
                          this._mode && this._mode.__creator == e
                            ? this._mode.init(this, r && r.words)
                            : ((this._mode = e.call(n, this, r && r.words)),
                              (this._mode.__creator = e));
                      },
                      _doProcessBlock: function (e, t) {
                        this._mode.processBlock(e, t);
                      },
                      _doFinalize: function () {
                        var e,
                          t = this.cfg.padding;
                        return (
                          this._xformMode == this._ENC_XFORM_MODE
                            ? (t.pad(this._data, this.blockSize),
                              (e = this._process(!0)))
                            : ((e = this._process(!0)), t.unpad(e)),
                          e
                        );
                      },
                      blockSize: 4,
                    })),
                    (r.CipherParams = a.extend({
                      init: function (e) {
                        this.mixIn(e);
                      },
                      toString: function (e) {
                        return (e || this.formatter).stringify(this);
                      },
                    }))),
                  v = ((t.format = {}).OpenSSL = {
                    stringify: function (e) {
                      var t = e.ciphertext,
                        r = e.salt;
                      return (
                        r
                          ? i
                              .create([1398893684, 1701076831])
                              .concat(r)
                              .concat(t)
                          : t
                      ).toString(c);
                    },
                    parse: function (e) {
                      var t,
                        r = c.parse(e),
                        n = r.words;
                      return (
                        1398893684 == n[0] &&
                          1701076831 == n[1] &&
                          ((t = i.create(n.slice(2, 4))),
                          n.splice(0, 4),
                          (r.sigBytes -= 16)),
                        f.create({ ciphertext: r, salt: t })
                      );
                    },
                  }),
                  _ = (r.SerializableCipher = a.extend({
                    cfg: a.extend({ format: v }),
                    encrypt: function (e, t, r, n) {
                      n = this.cfg.extend(n);
                      var a = e.createEncryptor(r, n),
                        i = a.finalize(t),
                        s = a.cfg;
                      return f.create({
                        ciphertext: i,
                        key: r,
                        iv: s.iv,
                        algorithm: e,
                        mode: s.mode,
                        padding: s.padding,
                        blockSize: e.blockSize,
                        formatter: n.format,
                      });
                    },
                    decrypt: function (e, t, r, n) {
                      return (
                        (n = this.cfg.extend(n)),
                        (t = this._parse(t, n.format)),
                        e.createDecryptor(r, n).finalize(t.ciphertext)
                      );
                    },
                    _parse: function (e, t) {
                      return "string" == typeof e ? t.parse(e, this) : e;
                    },
                  })),
                  g = ((t.kdf = {}).OpenSSL = {
                    execute: function (e, t, r, n) {
                      n || (n = i.random(8));
                      var a = d.create({ keySize: t + r }).compute(e, n),
                        s = i.create(a.words.slice(t), 4 * r);
                      return (
                        (a.sigBytes = 4 * t),
                        f.create({ key: a, iv: s, salt: n })
                      );
                    },
                  }),
                  y = (r.PasswordBasedCipher = _.extend({
                    cfg: _.cfg.extend({ kdf: g }),
                    encrypt: function (e, t, r, n) {
                      var a = (n = this.cfg.extend(n)).kdf.execute(
                        r,
                        e.keySize,
                        e.ivSize
                      );
                      n.iv = a.iv;
                      var i = _.encrypt.call(this, e, t, a.key, n);
                      return i.mixIn(a), i;
                    },
                    decrypt: function (e, t, r, n) {
                      (n = this.cfg.extend(n)), (t = this._parse(t, n.format));
                      var a = n.kdf.execute(r, e.keySize, e.ivSize, t.salt);
                      return (
                        (n.iv = a.iv), _.decrypt.call(this, e, t, a.key, n)
                      );
                    },
                  }));
              })()
            ));
        },
        8249: function (e, t, r) {
          var n;
          e.exports =
            ((n =
              n ||
              (function (e, t) {
                var n;
                if (
                  ("undefined" != typeof window &&
                    window.crypto &&
                    (n = window.crypto),
                  "undefined" != typeof self &&
                    self.crypto &&
                    (n = self.crypto),
                  "undefined" != typeof globalThis &&
                    globalThis.crypto &&
                    (n = globalThis.crypto),
                  !n &&
                    "undefined" != typeof window &&
                    window.msCrypto &&
                    (n = window.msCrypto),
                  !n && void 0 !== r.g && r.g.crypto && (n = r.g.crypto),
                  !n)
                )
                  try {
                    n = r(2480);
                  } catch (e) {}
                var a = function () {
                    if (n) {
                      if ("function" == typeof n.getRandomValues)
                        try {
                          return n.getRandomValues(new Uint32Array(1))[0];
                        } catch (e) {}
                      if ("function" == typeof n.randomBytes)
                        try {
                          return n.randomBytes(4).readInt32LE();
                        } catch (e) {}
                    }
                    throw new Error(
                      "Native crypto module could not be used to get secure random number."
                    );
                  },
                  i =
                    Object.create ||
                    (function () {
                      function e() {}
                      return function (t) {
                        var r;
                        return (
                          (e.prototype = t),
                          (r = new e()),
                          (e.prototype = null),
                          r
                        );
                      };
                    })(),
                  s = {},
                  o = (s.lib = {}),
                  c = (o.Base = {
                    extend: function (e) {
                      var t = i(this);
                      return (
                        e && t.mixIn(e),
                        (t.hasOwnProperty("init") && this.init !== t.init) ||
                          (t.init = function () {
                            t.$super.init.apply(this, arguments);
                          }),
                        (t.init.prototype = t),
                        (t.$super = this),
                        t
                      );
                    },
                    create: function () {
                      var e = this.extend();
                      return e.init.apply(e, arguments), e;
                    },
                    init: function () {},
                    mixIn: function (e) {
                      for (var t in e) e.hasOwnProperty(t) && (this[t] = e[t]);
                      e.hasOwnProperty("toString") &&
                        (this.toString = e.toString);
                    },
                    clone: function () {
                      return this.init.prototype.extend(this);
                    },
                  }),
                  d = (o.WordArray = c.extend({
                    init: function (e, r) {
                      (e = this.words = e || []),
                        (this.sigBytes = r != t ? r : 4 * e.length);
                    },
                    toString: function (e) {
                      return (e || u).stringify(this);
                    },
                    concat: function (e) {
                      var t = this.words,
                        r = e.words,
                        n = this.sigBytes,
                        a = e.sigBytes;
                      if ((this.clamp(), n % 4))
                        for (var i = 0; i < a; i++) {
                          var s = (r[i >>> 2] >>> (24 - (i % 4) * 8)) & 255;
                          t[(n + i) >>> 2] |= s << (24 - ((n + i) % 4) * 8);
                        }
                      else
                        for (var o = 0; o < a; o += 4)
                          t[(n + o) >>> 2] = r[o >>> 2];
                      return (this.sigBytes += a), this;
                    },
                    clamp: function () {
                      var t = this.words,
                        r = this.sigBytes;
                      (t[r >>> 2] &= 4294967295 << (32 - (r % 4) * 8)),
                        (t.length = e.ceil(r / 4));
                    },
                    clone: function () {
                      var e = c.clone.call(this);
                      return (e.words = this.words.slice(0)), e;
                    },
                    random: function (e) {
                      for (var t = [], r = 0; r < e; r += 4) t.push(a());
                      return new d.init(t, e);
                    },
                  })),
                  l = (s.enc = {}),
                  u = (l.Hex = {
                    stringify: function (e) {
                      for (
                        var t = e.words, r = e.sigBytes, n = [], a = 0;
                        a < r;
                        a++
                      ) {
                        var i = (t[a >>> 2] >>> (24 - (a % 4) * 8)) & 255;
                        n.push((i >>> 4).toString(16)),
                          n.push((15 & i).toString(16));
                      }
                      return n.join("");
                    },
                    parse: function (e) {
                      for (var t = e.length, r = [], n = 0; n < t; n += 2)
                        r[n >>> 3] |=
                          parseInt(e.substr(n, 2), 16) << (24 - (n % 8) * 4);
                      return new d.init(r, t / 2);
                    },
                  }),
                  p = (l.Latin1 = {
                    stringify: function (e) {
                      for (
                        var t = e.words, r = e.sigBytes, n = [], a = 0;
                        a < r;
                        a++
                      ) {
                        var i = (t[a >>> 2] >>> (24 - (a % 4) * 8)) & 255;
                        n.push(String.fromCharCode(i));
                      }
                      return n.join("");
                    },
                    parse: function (e) {
                      for (var t = e.length, r = [], n = 0; n < t; n++)
                        r[n >>> 2] |=
                          (255 & e.charCodeAt(n)) << (24 - (n % 4) * 8);
                      return new d.init(r, t);
                    },
                  }),
                  h = (l.Utf8 = {
                    stringify: function (e) {
                      try {
                        return decodeURIComponent(escape(p.stringify(e)));
                      } catch (e) {
                        throw new Error("Malformed UTF-8 data");
                      }
                    },
                    parse: function (e) {
                      return p.parse(unescape(encodeURIComponent(e)));
                    },
                  }),
                  m = (o.BufferedBlockAlgorithm = c.extend({
                    reset: function () {
                      (this._data = new d.init()), (this._nDataBytes = 0);
                    },
                    _append: function (e) {
                      "string" == typeof e && (e = h.parse(e)),
                        this._data.concat(e),
                        (this._nDataBytes += e.sigBytes);
                    },
                    _process: function (t) {
                      var r,
                        n = this._data,
                        a = n.words,
                        i = n.sigBytes,
                        s = this.blockSize,
                        o = i / (4 * s),
                        c =
                          (o = t
                            ? e.ceil(o)
                            : e.max((0 | o) - this._minBufferSize, 0)) * s,
                        l = e.min(4 * c, i);
                      if (c) {
                        for (var u = 0; u < c; u += s)
                          this._doProcessBlock(a, u);
                        (r = a.splice(0, c)), (n.sigBytes -= l);
                      }
                      return new d.init(r, l);
                    },
                    clone: function () {
                      var e = c.clone.call(this);
                      return (e._data = this._data.clone()), e;
                    },
                    _minBufferSize: 0,
                  })),
                  f =
                    ((o.Hasher = m.extend({
                      cfg: c.extend(),
                      init: function (e) {
                        (this.cfg = this.cfg.extend(e)), this.reset();
                      },
                      reset: function () {
                        m.reset.call(this), this._doReset();
                      },
                      update: function (e) {
                        return this._append(e), this._process(), this;
                      },
                      finalize: function (e) {
                        return e && this._append(e), this._doFinalize();
                      },
                      blockSize: 16,
                      _createHelper: function (e) {
                        return function (t, r) {
                          return new e.init(r).finalize(t);
                        };
                      },
                      _createHmacHelper: function (e) {
                        return function (t, r) {
                          return new f.HMAC.init(e, r).finalize(t);
                        };
                      },
                    })),
                    (s.algo = {}));
                return s;
              })(Math)),
            n);
        },
        8269: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            (function () {
              var e = n,
                t = e.lib.WordArray;
              function r(e, r, n) {
                for (var a = [], i = 0, s = 0; s < r; s++)
                  if (s % 4) {
                    var o =
                      (n[e.charCodeAt(s - 1)] << ((s % 4) * 2)) |
                      (n[e.charCodeAt(s)] >>> (6 - (s % 4) * 2));
                    (a[i >>> 2] |= o << (24 - (i % 4) * 8)), i++;
                  }
                return t.create(a, i);
              }
              e.enc.Base64 = {
                stringify: function (e) {
                  var t = e.words,
                    r = e.sigBytes,
                    n = this._map;
                  e.clamp();
                  for (var a = [], i = 0; i < r; i += 3)
                    for (
                      var s =
                          (((t[i >>> 2] >>> (24 - (i % 4) * 8)) & 255) << 16) |
                          (((t[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) &
                            255) <<
                            8) |
                          ((t[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) &
                            255),
                        o = 0;
                      o < 4 && i + 0.75 * o < r;
                      o++
                    )
                      a.push(n.charAt((s >>> (6 * (3 - o))) & 63));
                  var c = n.charAt(64);
                  if (c) for (; a.length % 4; ) a.push(c);
                  return a.join("");
                },
                parse: function (e) {
                  var t = e.length,
                    n = this._map,
                    a = this._reverseMap;
                  if (!a) {
                    a = this._reverseMap = [];
                    for (var i = 0; i < n.length; i++) a[n.charCodeAt(i)] = i;
                  }
                  var s = n.charAt(64);
                  if (s) {
                    var o = e.indexOf(s);
                    -1 !== o && (t = o);
                  }
                  return r(e, t, a);
                },
                _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
              };
            })(),
            n.enc.Base64);
        },
        3786: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            (function () {
              var e = n,
                t = e.lib.WordArray;
              function r(e, r, n) {
                for (var a = [], i = 0, s = 0; s < r; s++)
                  if (s % 4) {
                    var o =
                      (n[e.charCodeAt(s - 1)] << ((s % 4) * 2)) |
                      (n[e.charCodeAt(s)] >>> (6 - (s % 4) * 2));
                    (a[i >>> 2] |= o << (24 - (i % 4) * 8)), i++;
                  }
                return t.create(a, i);
              }
              e.enc.Base64url = {
                stringify: function (e, t = !0) {
                  var r = e.words,
                    n = e.sigBytes,
                    a = t ? this._safe_map : this._map;
                  e.clamp();
                  for (var i = [], s = 0; s < n; s += 3)
                    for (
                      var o =
                          (((r[s >>> 2] >>> (24 - (s % 4) * 8)) & 255) << 16) |
                          (((r[(s + 1) >>> 2] >>> (24 - ((s + 1) % 4) * 8)) &
                            255) <<
                            8) |
                          ((r[(s + 2) >>> 2] >>> (24 - ((s + 2) % 4) * 8)) &
                            255),
                        c = 0;
                      c < 4 && s + 0.75 * c < n;
                      c++
                    )
                      i.push(a.charAt((o >>> (6 * (3 - c))) & 63));
                  var d = a.charAt(64);
                  if (d) for (; i.length % 4; ) i.push(d);
                  return i.join("");
                },
                parse: function (e, t = !0) {
                  var n = e.length,
                    a = t ? this._safe_map : this._map,
                    i = this._reverseMap;
                  if (!i) {
                    i = this._reverseMap = [];
                    for (var s = 0; s < a.length; s++) i[a.charCodeAt(s)] = s;
                  }
                  var o = a.charAt(64);
                  if (o) {
                    var c = e.indexOf(o);
                    -1 !== c && (n = c);
                  }
                  return r(e, n, i);
                },
                _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
                _safe_map:
                  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
              };
            })(),
            n.enc.Base64url);
        },
        298: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            (function () {
              var e = n,
                t = e.lib.WordArray,
                r = e.enc;
              function a(e) {
                return ((e << 8) & 4278255360) | ((e >>> 8) & 16711935);
              }
              (r.Utf16 = r.Utf16BE =
                {
                  stringify: function (e) {
                    for (
                      var t = e.words, r = e.sigBytes, n = [], a = 0;
                      a < r;
                      a += 2
                    ) {
                      var i = (t[a >>> 2] >>> (16 - (a % 4) * 8)) & 65535;
                      n.push(String.fromCharCode(i));
                    }
                    return n.join("");
                  },
                  parse: function (e) {
                    for (var r = e.length, n = [], a = 0; a < r; a++)
                      n[a >>> 1] |= e.charCodeAt(a) << (16 - (a % 2) * 16);
                    return t.create(n, 2 * r);
                  },
                }),
                (r.Utf16LE = {
                  stringify: function (e) {
                    for (
                      var t = e.words, r = e.sigBytes, n = [], i = 0;
                      i < r;
                      i += 2
                    ) {
                      var s = a((t[i >>> 2] >>> (16 - (i % 4) * 8)) & 65535);
                      n.push(String.fromCharCode(s));
                    }
                    return n.join("");
                  },
                  parse: function (e) {
                    for (var r = e.length, n = [], i = 0; i < r; i++)
                      n[i >>> 1] |= a(e.charCodeAt(i) << (16 - (i % 2) * 16));
                    return t.create(n, 2 * r);
                  },
                });
            })(),
            n.enc.Utf16);
        },
        888: function (e, t, r) {
          var n, a, i, s, o, c, d, l;
          e.exports =
            ((l = r(8249)),
            r(2783),
            r(9824),
            (a = (n = l).lib),
            (i = a.Base),
            (s = a.WordArray),
            (o = n.algo),
            (c = o.MD5),
            (d = o.EvpKDF =
              i.extend({
                cfg: i.extend({ keySize: 4, hasher: c, iterations: 1 }),
                init: function (e) {
                  this.cfg = this.cfg.extend(e);
                },
                compute: function (e, t) {
                  for (
                    var r,
                      n = this.cfg,
                      a = n.hasher.create(),
                      i = s.create(),
                      o = i.words,
                      c = n.keySize,
                      d = n.iterations;
                    o.length < c;

                  ) {
                    r && a.update(r), (r = a.update(e).finalize(t)), a.reset();
                    for (var l = 1; l < d; l++) (r = a.finalize(r)), a.reset();
                    i.concat(r);
                  }
                  return (i.sigBytes = 4 * c), i;
                },
              })),
            (n.EvpKDF = function (e, t, r) {
              return d.create(r).compute(e, t);
            }),
            l.EvpKDF);
        },
        2209: function (e, t, r) {
          var n, a, i, s;
          e.exports =
            ((s = r(8249)),
            r(5109),
            (a = (n = s).lib.CipherParams),
            (i = n.enc.Hex),
            (n.format.Hex = {
              stringify: function (e) {
                return e.ciphertext.toString(i);
              },
              parse: function (e) {
                var t = i.parse(e);
                return a.create({ ciphertext: t });
              },
            }),
            s.format.Hex);
        },
        9824: function (e, t, r) {
          var n, a, i, s;
          e.exports =
            ((n = r(8249)),
            (i = (a = n).lib.Base),
            (s = a.enc.Utf8),
            void (a.algo.HMAC = i.extend({
              init: function (e, t) {
                (e = this._hasher = new e.init()),
                  "string" == typeof t && (t = s.parse(t));
                var r = e.blockSize,
                  n = 4 * r;
                t.sigBytes > n && (t = e.finalize(t)), t.clamp();
                for (
                  var a = (this._oKey = t.clone()),
                    i = (this._iKey = t.clone()),
                    o = a.words,
                    c = i.words,
                    d = 0;
                  d < r;
                  d++
                )
                  (o[d] ^= 1549556828), (c[d] ^= 909522486);
                (a.sigBytes = i.sigBytes = n), this.reset();
              },
              reset: function () {
                var e = this._hasher;
                e.reset(), e.update(this._iKey);
              },
              update: function (e) {
                return this._hasher.update(e), this;
              },
              finalize: function (e) {
                var t = this._hasher,
                  r = t.finalize(e);
                return t.reset(), t.finalize(this._oKey.clone().concat(r));
              },
            })));
        },
        1354: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(4938),
            r(4433),
            r(298),
            r(8269),
            r(3786),
            r(8214),
            r(2783),
            r(2153),
            r(7792),
            r(34),
            r(7460),
            r(3327),
            r(706),
            r(9824),
            r(2112),
            r(888),
            r(5109),
            r(8568),
            r(4242),
            r(9968),
            r(7660),
            r(1148),
            r(3615),
            r(2807),
            r(1077),
            r(6475),
            r(6991),
            r(2209),
            r(452),
            r(4253),
            r(1857),
            r(4454),
            r(3974),
            n);
        },
        4433: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            (function () {
              if ("function" == typeof ArrayBuffer) {
                var e = n.lib.WordArray,
                  t = e.init,
                  r = (e.init = function (e) {
                    if (
                      (e instanceof ArrayBuffer && (e = new Uint8Array(e)),
                      (e instanceof Int8Array ||
                        ("undefined" != typeof Uint8ClampedArray &&
                          e instanceof Uint8ClampedArray) ||
                        e instanceof Int16Array ||
                        e instanceof Uint16Array ||
                        e instanceof Int32Array ||
                        e instanceof Uint32Array ||
                        e instanceof Float32Array ||
                        e instanceof Float64Array) &&
                        (e = new Uint8Array(
                          e.buffer,
                          e.byteOffset,
                          e.byteLength
                        )),
                      e instanceof Uint8Array)
                    ) {
                      for (var r = e.byteLength, n = [], a = 0; a < r; a++)
                        n[a >>> 2] |= e[a] << (24 - (a % 4) * 8);
                      t.call(this, n, r);
                    } else t.apply(this, arguments);
                  });
                r.prototype = e;
              }
            })(),
            n.lib.WordArray);
        },
        8214: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            (function (e) {
              var t = n,
                r = t.lib,
                a = r.WordArray,
                i = r.Hasher,
                s = t.algo,
                o = [];
              !(function () {
                for (var t = 0; t < 64; t++)
                  o[t] = (4294967296 * e.abs(e.sin(t + 1))) | 0;
              })();
              var c = (s.MD5 = i.extend({
                _doReset: function () {
                  this._hash = new a.init([
                    1732584193, 4023233417, 2562383102, 271733878,
                  ]);
                },
                _doProcessBlock: function (e, t) {
                  for (var r = 0; r < 16; r++) {
                    var n = t + r,
                      a = e[n];
                    e[n] =
                      (16711935 & ((a << 8) | (a >>> 24))) |
                      (4278255360 & ((a << 24) | (a >>> 8)));
                  }
                  var i = this._hash.words,
                    s = e[t + 0],
                    c = e[t + 1],
                    h = e[t + 2],
                    m = e[t + 3],
                    f = e[t + 4],
                    v = e[t + 5],
                    _ = e[t + 6],
                    g = e[t + 7],
                    y = e[t + 8],
                    b = e[t + 9],
                    w = e[t + 10],
                    S = e[t + 11],
                    k = e[t + 12],
                    R = e[t + 13],
                    E = e[t + 14],
                    T = e[t + 15],
                    P = i[0],
                    C = i[1],
                    x = i[2],
                    O = i[3];
                  (P = d(P, C, x, O, s, 7, o[0])),
                    (O = d(O, P, C, x, c, 12, o[1])),
                    (x = d(x, O, P, C, h, 17, o[2])),
                    (C = d(C, x, O, P, m, 22, o[3])),
                    (P = d(P, C, x, O, f, 7, o[4])),
                    (O = d(O, P, C, x, v, 12, o[5])),
                    (x = d(x, O, P, C, _, 17, o[6])),
                    (C = d(C, x, O, P, g, 22, o[7])),
                    (P = d(P, C, x, O, y, 7, o[8])),
                    (O = d(O, P, C, x, b, 12, o[9])),
                    (x = d(x, O, P, C, w, 17, o[10])),
                    (C = d(C, x, O, P, S, 22, o[11])),
                    (P = d(P, C, x, O, k, 7, o[12])),
                    (O = d(O, P, C, x, R, 12, o[13])),
                    (x = d(x, O, P, C, E, 17, o[14])),
                    (P = l(
                      P,
                      (C = d(C, x, O, P, T, 22, o[15])),
                      x,
                      O,
                      c,
                      5,
                      o[16]
                    )),
                    (O = l(O, P, C, x, _, 9, o[17])),
                    (x = l(x, O, P, C, S, 14, o[18])),
                    (C = l(C, x, O, P, s, 20, o[19])),
                    (P = l(P, C, x, O, v, 5, o[20])),
                    (O = l(O, P, C, x, w, 9, o[21])),
                    (x = l(x, O, P, C, T, 14, o[22])),
                    (C = l(C, x, O, P, f, 20, o[23])),
                    (P = l(P, C, x, O, b, 5, o[24])),
                    (O = l(O, P, C, x, E, 9, o[25])),
                    (x = l(x, O, P, C, m, 14, o[26])),
                    (C = l(C, x, O, P, y, 20, o[27])),
                    (P = l(P, C, x, O, R, 5, o[28])),
                    (O = l(O, P, C, x, h, 9, o[29])),
                    (x = l(x, O, P, C, g, 14, o[30])),
                    (P = u(
                      P,
                      (C = l(C, x, O, P, k, 20, o[31])),
                      x,
                      O,
                      v,
                      4,
                      o[32]
                    )),
                    (O = u(O, P, C, x, y, 11, o[33])),
                    (x = u(x, O, P, C, S, 16, o[34])),
                    (C = u(C, x, O, P, E, 23, o[35])),
                    (P = u(P, C, x, O, c, 4, o[36])),
                    (O = u(O, P, C, x, f, 11, o[37])),
                    (x = u(x, O, P, C, g, 16, o[38])),
                    (C = u(C, x, O, P, w, 23, o[39])),
                    (P = u(P, C, x, O, R, 4, o[40])),
                    (O = u(O, P, C, x, s, 11, o[41])),
                    (x = u(x, O, P, C, m, 16, o[42])),
                    (C = u(C, x, O, P, _, 23, o[43])),
                    (P = u(P, C, x, O, b, 4, o[44])),
                    (O = u(O, P, C, x, k, 11, o[45])),
                    (x = u(x, O, P, C, T, 16, o[46])),
                    (P = p(
                      P,
                      (C = u(C, x, O, P, h, 23, o[47])),
                      x,
                      O,
                      s,
                      6,
                      o[48]
                    )),
                    (O = p(O, P, C, x, g, 10, o[49])),
                    (x = p(x, O, P, C, E, 15, o[50])),
                    (C = p(C, x, O, P, v, 21, o[51])),
                    (P = p(P, C, x, O, k, 6, o[52])),
                    (O = p(O, P, C, x, m, 10, o[53])),
                    (x = p(x, O, P, C, w, 15, o[54])),
                    (C = p(C, x, O, P, c, 21, o[55])),
                    (P = p(P, C, x, O, y, 6, o[56])),
                    (O = p(O, P, C, x, T, 10, o[57])),
                    (x = p(x, O, P, C, _, 15, o[58])),
                    (C = p(C, x, O, P, R, 21, o[59])),
                    (P = p(P, C, x, O, f, 6, o[60])),
                    (O = p(O, P, C, x, S, 10, o[61])),
                    (x = p(x, O, P, C, h, 15, o[62])),
                    (C = p(C, x, O, P, b, 21, o[63])),
                    (i[0] = (i[0] + P) | 0),
                    (i[1] = (i[1] + C) | 0),
                    (i[2] = (i[2] + x) | 0),
                    (i[3] = (i[3] + O) | 0);
                },
                _doFinalize: function () {
                  var t = this._data,
                    r = t.words,
                    n = 8 * this._nDataBytes,
                    a = 8 * t.sigBytes;
                  r[a >>> 5] |= 128 << (24 - (a % 32));
                  var i = e.floor(n / 4294967296),
                    s = n;
                  (r[15 + (((a + 64) >>> 9) << 4)] =
                    (16711935 & ((i << 8) | (i >>> 24))) |
                    (4278255360 & ((i << 24) | (i >>> 8)))),
                    (r[14 + (((a + 64) >>> 9) << 4)] =
                      (16711935 & ((s << 8) | (s >>> 24))) |
                      (4278255360 & ((s << 24) | (s >>> 8)))),
                    (t.sigBytes = 4 * (r.length + 1)),
                    this._process();
                  for (var o = this._hash, c = o.words, d = 0; d < 4; d++) {
                    var l = c[d];
                    c[d] =
                      (16711935 & ((l << 8) | (l >>> 24))) |
                      (4278255360 & ((l << 24) | (l >>> 8)));
                  }
                  return o;
                },
                clone: function () {
                  var e = i.clone.call(this);
                  return (e._hash = this._hash.clone()), e;
                },
              }));
              function d(e, t, r, n, a, i, s) {
                var o = e + ((t & r) | (~t & n)) + a + s;
                return ((o << i) | (o >>> (32 - i))) + t;
              }
              function l(e, t, r, n, a, i, s) {
                var o = e + ((t & n) | (r & ~n)) + a + s;
                return ((o << i) | (o >>> (32 - i))) + t;
              }
              function u(e, t, r, n, a, i, s) {
                var o = e + (t ^ r ^ n) + a + s;
                return ((o << i) | (o >>> (32 - i))) + t;
              }
              function p(e, t, r, n, a, i, s) {
                var o = e + (r ^ (t | ~n)) + a + s;
                return ((o << i) | (o >>> (32 - i))) + t;
              }
              (t.MD5 = i._createHelper(c)),
                (t.HmacMD5 = i._createHmacHelper(c));
            })(Math),
            n.MD5);
        },
        8568: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(5109),
            (n.mode.CFB = (function () {
              var e = n.lib.BlockCipherMode.extend();
              function t(e, t, r, n) {
                var a,
                  i = this._iv;
                i
                  ? ((a = i.slice(0)), (this._iv = void 0))
                  : (a = this._prevBlock),
                  n.encryptBlock(a, 0);
                for (var s = 0; s < r; s++) e[t + s] ^= a[s];
              }
              return (
                (e.Encryptor = e.extend({
                  processBlock: function (e, r) {
                    var n = this._cipher,
                      a = n.blockSize;
                    t.call(this, e, r, a, n),
                      (this._prevBlock = e.slice(r, r + a));
                  },
                })),
                (e.Decryptor = e.extend({
                  processBlock: function (e, r) {
                    var n = this._cipher,
                      a = n.blockSize,
                      i = e.slice(r, r + a);
                    t.call(this, e, r, a, n), (this._prevBlock = i);
                  },
                })),
                e
              );
            })()),
            n.mode.CFB);
        },
        9968: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(5109),
            (n.mode.CTRGladman = (function () {
              var e = n.lib.BlockCipherMode.extend();
              function t(e) {
                if (255 == ((e >> 24) & 255)) {
                  var t = (e >> 16) & 255,
                    r = (e >> 8) & 255,
                    n = 255 & e;
                  255 === t
                    ? ((t = 0),
                      255 === r ? ((r = 0), 255 === n ? (n = 0) : ++n) : ++r)
                    : ++t,
                    (e = 0),
                    (e += t << 16),
                    (e += r << 8),
                    (e += n);
                } else e += 1 << 24;
                return e;
              }
              function r(e) {
                return 0 === (e[0] = t(e[0])) && (e[1] = t(e[1])), e;
              }
              var a = (e.Encryptor = e.extend({
                processBlock: function (e, t) {
                  var n = this._cipher,
                    a = n.blockSize,
                    i = this._iv,
                    s = this._counter;
                  i && ((s = this._counter = i.slice(0)), (this._iv = void 0)),
                    r(s);
                  var o = s.slice(0);
                  n.encryptBlock(o, 0);
                  for (var c = 0; c < a; c++) e[t + c] ^= o[c];
                },
              }));
              return (e.Decryptor = a), e;
            })()),
            n.mode.CTRGladman);
        },
        4242: function (e, t, r) {
          var n, a, i;
          e.exports =
            ((i = r(8249)),
            r(5109),
            (i.mode.CTR =
              ((n = i.lib.BlockCipherMode.extend()),
              (a = n.Encryptor =
                n.extend({
                  processBlock: function (e, t) {
                    var r = this._cipher,
                      n = r.blockSize,
                      a = this._iv,
                      i = this._counter;
                    a &&
                      ((i = this._counter = a.slice(0)), (this._iv = void 0));
                    var s = i.slice(0);
                    r.encryptBlock(s, 0), (i[n - 1] = (i[n - 1] + 1) | 0);
                    for (var o = 0; o < n; o++) e[t + o] ^= s[o];
                  },
                })),
              (n.Decryptor = a),
              n)),
            i.mode.CTR);
        },
        1148: function (e, t, r) {
          var n, a;
          e.exports =
            ((a = r(8249)),
            r(5109),
            (a.mode.ECB =
              (((n = a.lib.BlockCipherMode.extend()).Encryptor = n.extend({
                processBlock: function (e, t) {
                  this._cipher.encryptBlock(e, t);
                },
              })),
              (n.Decryptor = n.extend({
                processBlock: function (e, t) {
                  this._cipher.decryptBlock(e, t);
                },
              })),
              n)),
            a.mode.ECB);
        },
        7660: function (e, t, r) {
          var n, a, i;
          e.exports =
            ((i = r(8249)),
            r(5109),
            (i.mode.OFB =
              ((n = i.lib.BlockCipherMode.extend()),
              (a = n.Encryptor =
                n.extend({
                  processBlock: function (e, t) {
                    var r = this._cipher,
                      n = r.blockSize,
                      a = this._iv,
                      i = this._keystream;
                    a &&
                      ((i = this._keystream = a.slice(0)), (this._iv = void 0)),
                      r.encryptBlock(i, 0);
                    for (var s = 0; s < n; s++) e[t + s] ^= i[s];
                  },
                })),
              (n.Decryptor = a),
              n)),
            i.mode.OFB);
        },
        3615: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(5109),
            (n.pad.AnsiX923 = {
              pad: function (e, t) {
                var r = e.sigBytes,
                  n = 4 * t,
                  a = n - (r % n),
                  i = r + a - 1;
                e.clamp(),
                  (e.words[i >>> 2] |= a << (24 - (i % 4) * 8)),
                  (e.sigBytes += a);
              },
              unpad: function (e) {
                var t = 255 & e.words[(e.sigBytes - 1) >>> 2];
                e.sigBytes -= t;
              },
            }),
            n.pad.Ansix923);
        },
        2807: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(5109),
            (n.pad.Iso10126 = {
              pad: function (e, t) {
                var r = 4 * t,
                  a = r - (e.sigBytes % r);
                e.concat(n.lib.WordArray.random(a - 1)).concat(
                  n.lib.WordArray.create([a << 24], 1)
                );
              },
              unpad: function (e) {
                var t = 255 & e.words[(e.sigBytes - 1) >>> 2];
                e.sigBytes -= t;
              },
            }),
            n.pad.Iso10126);
        },
        1077: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(5109),
            (n.pad.Iso97971 = {
              pad: function (e, t) {
                e.concat(n.lib.WordArray.create([2147483648], 1)),
                  n.pad.ZeroPadding.pad(e, t);
              },
              unpad: function (e) {
                n.pad.ZeroPadding.unpad(e), e.sigBytes--;
              },
            }),
            n.pad.Iso97971);
        },
        6991: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(5109),
            (n.pad.NoPadding = { pad: function () {}, unpad: function () {} }),
            n.pad.NoPadding);
        },
        6475: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(5109),
            (n.pad.ZeroPadding = {
              pad: function (e, t) {
                var r = 4 * t;
                e.clamp(), (e.sigBytes += r - (e.sigBytes % r || r));
              },
              unpad: function (e) {
                var t = e.words,
                  r = e.sigBytes - 1;
                for (r = e.sigBytes - 1; r >= 0; r--)
                  if ((t[r >>> 2] >>> (24 - (r % 4) * 8)) & 255) {
                    e.sigBytes = r + 1;
                    break;
                  }
              },
            }),
            n.pad.ZeroPadding);
        },
        2112: function (e, t, r) {
          var n, a, i, s, o, c, d, l, u;
          e.exports =
            ((u = r(8249)),
            r(2783),
            r(9824),
            (a = (n = u).lib),
            (i = a.Base),
            (s = a.WordArray),
            (o = n.algo),
            (c = o.SHA1),
            (d = o.HMAC),
            (l = o.PBKDF2 =
              i.extend({
                cfg: i.extend({ keySize: 4, hasher: c, iterations: 1 }),
                init: function (e) {
                  this.cfg = this.cfg.extend(e);
                },
                compute: function (e, t) {
                  for (
                    var r = this.cfg,
                      n = d.create(r.hasher, e),
                      a = s.create(),
                      i = s.create([1]),
                      o = a.words,
                      c = i.words,
                      l = r.keySize,
                      u = r.iterations;
                    o.length < l;

                  ) {
                    var p = n.update(t).finalize(i);
                    n.reset();
                    for (
                      var h = p.words, m = h.length, f = p, v = 1;
                      v < u;
                      v++
                    ) {
                      (f = n.finalize(f)), n.reset();
                      for (var _ = f.words, g = 0; g < m; g++) h[g] ^= _[g];
                    }
                    a.concat(p), c[0]++;
                  }
                  return (a.sigBytes = 4 * l), a;
                },
              })),
            (n.PBKDF2 = function (e, t, r) {
              return l.create(r).compute(e, t);
            }),
            u.PBKDF2);
        },
        3974: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(8269),
            r(8214),
            r(888),
            r(5109),
            (function () {
              var e = n,
                t = e.lib.StreamCipher,
                r = e.algo,
                a = [],
                i = [],
                s = [],
                o = (r.RabbitLegacy = t.extend({
                  _doReset: function () {
                    var e = this._key.words,
                      t = this.cfg.iv,
                      r = (this._X = [
                        e[0],
                        (e[3] << 16) | (e[2] >>> 16),
                        e[1],
                        (e[0] << 16) | (e[3] >>> 16),
                        e[2],
                        (e[1] << 16) | (e[0] >>> 16),
                        e[3],
                        (e[2] << 16) | (e[1] >>> 16),
                      ]),
                      n = (this._C = [
                        (e[2] << 16) | (e[2] >>> 16),
                        (4294901760 & e[0]) | (65535 & e[1]),
                        (e[3] << 16) | (e[3] >>> 16),
                        (4294901760 & e[1]) | (65535 & e[2]),
                        (e[0] << 16) | (e[0] >>> 16),
                        (4294901760 & e[2]) | (65535 & e[3]),
                        (e[1] << 16) | (e[1] >>> 16),
                        (4294901760 & e[3]) | (65535 & e[0]),
                      ]);
                    this._b = 0;
                    for (var a = 0; a < 4; a++) c.call(this);
                    for (a = 0; a < 8; a++) n[a] ^= r[(a + 4) & 7];
                    if (t) {
                      var i = t.words,
                        s = i[0],
                        o = i[1],
                        d =
                          (16711935 & ((s << 8) | (s >>> 24))) |
                          (4278255360 & ((s << 24) | (s >>> 8))),
                        l =
                          (16711935 & ((o << 8) | (o >>> 24))) |
                          (4278255360 & ((o << 24) | (o >>> 8))),
                        u = (d >>> 16) | (4294901760 & l),
                        p = (l << 16) | (65535 & d);
                      for (
                        n[0] ^= d,
                          n[1] ^= u,
                          n[2] ^= l,
                          n[3] ^= p,
                          n[4] ^= d,
                          n[5] ^= u,
                          n[6] ^= l,
                          n[7] ^= p,
                          a = 0;
                        a < 4;
                        a++
                      )
                        c.call(this);
                    }
                  },
                  _doProcessBlock: function (e, t) {
                    var r = this._X;
                    c.call(this),
                      (a[0] = r[0] ^ (r[5] >>> 16) ^ (r[3] << 16)),
                      (a[1] = r[2] ^ (r[7] >>> 16) ^ (r[5] << 16)),
                      (a[2] = r[4] ^ (r[1] >>> 16) ^ (r[7] << 16)),
                      (a[3] = r[6] ^ (r[3] >>> 16) ^ (r[1] << 16));
                    for (var n = 0; n < 4; n++)
                      (a[n] =
                        (16711935 & ((a[n] << 8) | (a[n] >>> 24))) |
                        (4278255360 & ((a[n] << 24) | (a[n] >>> 8)))),
                        (e[t + n] ^= a[n]);
                  },
                  blockSize: 4,
                  ivSize: 2,
                }));
              function c() {
                for (var e = this._X, t = this._C, r = 0; r < 8; r++)
                  i[r] = t[r];
                for (
                  t[0] = (t[0] + 1295307597 + this._b) | 0,
                    t[1] =
                      (t[1] + 3545052371 + (t[0] >>> 0 < i[0] >>> 0 ? 1 : 0)) |
                      0,
                    t[2] =
                      (t[2] + 886263092 + (t[1] >>> 0 < i[1] >>> 0 ? 1 : 0)) |
                      0,
                    t[3] =
                      (t[3] + 1295307597 + (t[2] >>> 0 < i[2] >>> 0 ? 1 : 0)) |
                      0,
                    t[4] =
                      (t[4] + 3545052371 + (t[3] >>> 0 < i[3] >>> 0 ? 1 : 0)) |
                      0,
                    t[5] =
                      (t[5] + 886263092 + (t[4] >>> 0 < i[4] >>> 0 ? 1 : 0)) |
                      0,
                    t[6] =
                      (t[6] + 1295307597 + (t[5] >>> 0 < i[5] >>> 0 ? 1 : 0)) |
                      0,
                    t[7] =
                      (t[7] + 3545052371 + (t[6] >>> 0 < i[6] >>> 0 ? 1 : 0)) |
                      0,
                    this._b = t[7] >>> 0 < i[7] >>> 0 ? 1 : 0,
                    r = 0;
                  r < 8;
                  r++
                ) {
                  var n = e[r] + t[r],
                    a = 65535 & n,
                    o = n >>> 16,
                    c = ((((a * a) >>> 17) + a * o) >>> 15) + o * o,
                    d = (((4294901760 & n) * n) | 0) + (((65535 & n) * n) | 0);
                  s[r] = c ^ d;
                }
                (e[0] =
                  (s[0] +
                    ((s[7] << 16) | (s[7] >>> 16)) +
                    ((s[6] << 16) | (s[6] >>> 16))) |
                  0),
                  (e[1] = (s[1] + ((s[0] << 8) | (s[0] >>> 24)) + s[7]) | 0),
                  (e[2] =
                    (s[2] +
                      ((s[1] << 16) | (s[1] >>> 16)) +
                      ((s[0] << 16) | (s[0] >>> 16))) |
                    0),
                  (e[3] = (s[3] + ((s[2] << 8) | (s[2] >>> 24)) + s[1]) | 0),
                  (e[4] =
                    (s[4] +
                      ((s[3] << 16) | (s[3] >>> 16)) +
                      ((s[2] << 16) | (s[2] >>> 16))) |
                    0),
                  (e[5] = (s[5] + ((s[4] << 8) | (s[4] >>> 24)) + s[3]) | 0),
                  (e[6] =
                    (s[6] +
                      ((s[5] << 16) | (s[5] >>> 16)) +
                      ((s[4] << 16) | (s[4] >>> 16))) |
                    0),
                  (e[7] = (s[7] + ((s[6] << 8) | (s[6] >>> 24)) + s[5]) | 0);
              }
              e.RabbitLegacy = t._createHelper(o);
            })(),
            n.RabbitLegacy);
        },
        4454: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(8269),
            r(8214),
            r(888),
            r(5109),
            (function () {
              var e = n,
                t = e.lib.StreamCipher,
                r = e.algo,
                a = [],
                i = [],
                s = [],
                o = (r.Rabbit = t.extend({
                  _doReset: function () {
                    for (
                      var e = this._key.words, t = this.cfg.iv, r = 0;
                      r < 4;
                      r++
                    )
                      e[r] =
                        (16711935 & ((e[r] << 8) | (e[r] >>> 24))) |
                        (4278255360 & ((e[r] << 24) | (e[r] >>> 8)));
                    var n = (this._X = [
                        e[0],
                        (e[3] << 16) | (e[2] >>> 16),
                        e[1],
                        (e[0] << 16) | (e[3] >>> 16),
                        e[2],
                        (e[1] << 16) | (e[0] >>> 16),
                        e[3],
                        (e[2] << 16) | (e[1] >>> 16),
                      ]),
                      a = (this._C = [
                        (e[2] << 16) | (e[2] >>> 16),
                        (4294901760 & e[0]) | (65535 & e[1]),
                        (e[3] << 16) | (e[3] >>> 16),
                        (4294901760 & e[1]) | (65535 & e[2]),
                        (e[0] << 16) | (e[0] >>> 16),
                        (4294901760 & e[2]) | (65535 & e[3]),
                        (e[1] << 16) | (e[1] >>> 16),
                        (4294901760 & e[3]) | (65535 & e[0]),
                      ]);
                    for (this._b = 0, r = 0; r < 4; r++) c.call(this);
                    for (r = 0; r < 8; r++) a[r] ^= n[(r + 4) & 7];
                    if (t) {
                      var i = t.words,
                        s = i[0],
                        o = i[1],
                        d =
                          (16711935 & ((s << 8) | (s >>> 24))) |
                          (4278255360 & ((s << 24) | (s >>> 8))),
                        l =
                          (16711935 & ((o << 8) | (o >>> 24))) |
                          (4278255360 & ((o << 24) | (o >>> 8))),
                        u = (d >>> 16) | (4294901760 & l),
                        p = (l << 16) | (65535 & d);
                      for (
                        a[0] ^= d,
                          a[1] ^= u,
                          a[2] ^= l,
                          a[3] ^= p,
                          a[4] ^= d,
                          a[5] ^= u,
                          a[6] ^= l,
                          a[7] ^= p,
                          r = 0;
                        r < 4;
                        r++
                      )
                        c.call(this);
                    }
                  },
                  _doProcessBlock: function (e, t) {
                    var r = this._X;
                    c.call(this),
                      (a[0] = r[0] ^ (r[5] >>> 16) ^ (r[3] << 16)),
                      (a[1] = r[2] ^ (r[7] >>> 16) ^ (r[5] << 16)),
                      (a[2] = r[4] ^ (r[1] >>> 16) ^ (r[7] << 16)),
                      (a[3] = r[6] ^ (r[3] >>> 16) ^ (r[1] << 16));
                    for (var n = 0; n < 4; n++)
                      (a[n] =
                        (16711935 & ((a[n] << 8) | (a[n] >>> 24))) |
                        (4278255360 & ((a[n] << 24) | (a[n] >>> 8)))),
                        (e[t + n] ^= a[n]);
                  },
                  blockSize: 4,
                  ivSize: 2,
                }));
              function c() {
                for (var e = this._X, t = this._C, r = 0; r < 8; r++)
                  i[r] = t[r];
                for (
                  t[0] = (t[0] + 1295307597 + this._b) | 0,
                    t[1] =
                      (t[1] + 3545052371 + (t[0] >>> 0 < i[0] >>> 0 ? 1 : 0)) |
                      0,
                    t[2] =
                      (t[2] + 886263092 + (t[1] >>> 0 < i[1] >>> 0 ? 1 : 0)) |
                      0,
                    t[3] =
                      (t[3] + 1295307597 + (t[2] >>> 0 < i[2] >>> 0 ? 1 : 0)) |
                      0,
                    t[4] =
                      (t[4] + 3545052371 + (t[3] >>> 0 < i[3] >>> 0 ? 1 : 0)) |
                      0,
                    t[5] =
                      (t[5] + 886263092 + (t[4] >>> 0 < i[4] >>> 0 ? 1 : 0)) |
                      0,
                    t[6] =
                      (t[6] + 1295307597 + (t[5] >>> 0 < i[5] >>> 0 ? 1 : 0)) |
                      0,
                    t[7] =
                      (t[7] + 3545052371 + (t[6] >>> 0 < i[6] >>> 0 ? 1 : 0)) |
                      0,
                    this._b = t[7] >>> 0 < i[7] >>> 0 ? 1 : 0,
                    r = 0;
                  r < 8;
                  r++
                ) {
                  var n = e[r] + t[r],
                    a = 65535 & n,
                    o = n >>> 16,
                    c = ((((a * a) >>> 17) + a * o) >>> 15) + o * o,
                    d = (((4294901760 & n) * n) | 0) + (((65535 & n) * n) | 0);
                  s[r] = c ^ d;
                }
                (e[0] =
                  (s[0] +
                    ((s[7] << 16) | (s[7] >>> 16)) +
                    ((s[6] << 16) | (s[6] >>> 16))) |
                  0),
                  (e[1] = (s[1] + ((s[0] << 8) | (s[0] >>> 24)) + s[7]) | 0),
                  (e[2] =
                    (s[2] +
                      ((s[1] << 16) | (s[1] >>> 16)) +
                      ((s[0] << 16) | (s[0] >>> 16))) |
                    0),
                  (e[3] = (s[3] + ((s[2] << 8) | (s[2] >>> 24)) + s[1]) | 0),
                  (e[4] =
                    (s[4] +
                      ((s[3] << 16) | (s[3] >>> 16)) +
                      ((s[2] << 16) | (s[2] >>> 16))) |
                    0),
                  (e[5] = (s[5] + ((s[4] << 8) | (s[4] >>> 24)) + s[3]) | 0),
                  (e[6] =
                    (s[6] +
                      ((s[5] << 16) | (s[5] >>> 16)) +
                      ((s[4] << 16) | (s[4] >>> 16))) |
                    0),
                  (e[7] = (s[7] + ((s[6] << 8) | (s[6] >>> 24)) + s[5]) | 0);
              }
              e.Rabbit = t._createHelper(o);
            })(),
            n.Rabbit);
        },
        1857: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(8269),
            r(8214),
            r(888),
            r(5109),
            (function () {
              var e = n,
                t = e.lib.StreamCipher,
                r = e.algo,
                a = (r.RC4 = t.extend({
                  _doReset: function () {
                    for (
                      var e = this._key,
                        t = e.words,
                        r = e.sigBytes,
                        n = (this._S = []),
                        a = 0;
                      a < 256;
                      a++
                    )
                      n[a] = a;
                    a = 0;
                    for (var i = 0; a < 256; a++) {
                      var s = a % r,
                        o = (t[s >>> 2] >>> (24 - (s % 4) * 8)) & 255;
                      i = (i + n[a] + o) % 256;
                      var c = n[a];
                      (n[a] = n[i]), (n[i] = c);
                    }
                    this._i = this._j = 0;
                  },
                  _doProcessBlock: function (e, t) {
                    e[t] ^= i.call(this);
                  },
                  keySize: 8,
                  ivSize: 0,
                }));
              function i() {
                for (
                  var e = this._S, t = this._i, r = this._j, n = 0, a = 0;
                  a < 4;
                  a++
                ) {
                  r = (r + e[(t = (t + 1) % 256)]) % 256;
                  var i = e[t];
                  (e[t] = e[r]),
                    (e[r] = i),
                    (n |= e[(e[t] + e[r]) % 256] << (24 - 8 * a));
                }
                return (this._i = t), (this._j = r), n;
              }
              e.RC4 = t._createHelper(a);
              var s = (r.RC4Drop = a.extend({
                cfg: a.cfg.extend({ drop: 192 }),
                _doReset: function () {
                  a._doReset.call(this);
                  for (var e = this.cfg.drop; e > 0; e--) i.call(this);
                },
              }));
              e.RC4Drop = t._createHelper(s);
            })(),
            n.RC4);
        },
        706: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            (function (e) {
              var t = n,
                r = t.lib,
                a = r.WordArray,
                i = r.Hasher,
                s = t.algo,
                o = a.create([
                  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4,
                  13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4,
                  9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8,
                  12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10,
                  14, 1, 3, 8, 11, 6, 15, 13,
                ]),
                c = a.create([
                  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11,
                  3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7,
                  14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15,
                  0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6,
                  2, 13, 14, 0, 3, 9, 11,
                ]),
                d = a.create([
                  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6,
                  8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6,
                  7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15,
                  14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8,
                  13, 12, 5, 12, 13, 14, 11, 8, 5, 6,
                ]),
                l = a.create([
                  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13,
                  15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11,
                  8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14,
                  14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14,
                  6, 8, 13, 6, 5, 15, 13, 11, 11,
                ]),
                u = a.create([
                  0, 1518500249, 1859775393, 2400959708, 2840853838,
                ]),
                p = a.create([
                  1352829926, 1548603684, 1836072691, 2053994217, 0,
                ]),
                h = (s.RIPEMD160 = i.extend({
                  _doReset: function () {
                    this._hash = a.create([
                      1732584193, 4023233417, 2562383102, 271733878, 3285377520,
                    ]);
                  },
                  _doProcessBlock: function (e, t) {
                    for (var r = 0; r < 16; r++) {
                      var n = t + r,
                        a = e[n];
                      e[n] =
                        (16711935 & ((a << 8) | (a >>> 24))) |
                        (4278255360 & ((a << 24) | (a >>> 8)));
                    }
                    var i,
                      s,
                      h,
                      b,
                      w,
                      S,
                      k,
                      R,
                      E,
                      T,
                      P,
                      C = this._hash.words,
                      x = u.words,
                      O = p.words,
                      D = o.words,
                      I = c.words,
                      M = d.words,
                      L = l.words;
                    for (
                      S = i = C[0],
                        k = s = C[1],
                        R = h = C[2],
                        E = b = C[3],
                        T = w = C[4],
                        r = 0;
                      r < 80;
                      r += 1
                    )
                      (P = (i + e[t + D[r]]) | 0),
                        (P +=
                          r < 16
                            ? m(s, h, b) + x[0]
                            : r < 32
                            ? f(s, h, b) + x[1]
                            : r < 48
                            ? v(s, h, b) + x[2]
                            : r < 64
                            ? _(s, h, b) + x[3]
                            : g(s, h, b) + x[4]),
                        (P = ((P = y((P |= 0), M[r])) + w) | 0),
                        (i = w),
                        (w = b),
                        (b = y(h, 10)),
                        (h = s),
                        (s = P),
                        (P = (S + e[t + I[r]]) | 0),
                        (P +=
                          r < 16
                            ? g(k, R, E) + O[0]
                            : r < 32
                            ? _(k, R, E) + O[1]
                            : r < 48
                            ? v(k, R, E) + O[2]
                            : r < 64
                            ? f(k, R, E) + O[3]
                            : m(k, R, E) + O[4]),
                        (P = ((P = y((P |= 0), L[r])) + T) | 0),
                        (S = T),
                        (T = E),
                        (E = y(R, 10)),
                        (R = k),
                        (k = P);
                    (P = (C[1] + h + E) | 0),
                      (C[1] = (C[2] + b + T) | 0),
                      (C[2] = (C[3] + w + S) | 0),
                      (C[3] = (C[4] + i + k) | 0),
                      (C[4] = (C[0] + s + R) | 0),
                      (C[0] = P);
                  },
                  _doFinalize: function () {
                    var e = this._data,
                      t = e.words,
                      r = 8 * this._nDataBytes,
                      n = 8 * e.sigBytes;
                    (t[n >>> 5] |= 128 << (24 - (n % 32))),
                      (t[14 + (((n + 64) >>> 9) << 4)] =
                        (16711935 & ((r << 8) | (r >>> 24))) |
                        (4278255360 & ((r << 24) | (r >>> 8)))),
                      (e.sigBytes = 4 * (t.length + 1)),
                      this._process();
                    for (var a = this._hash, i = a.words, s = 0; s < 5; s++) {
                      var o = i[s];
                      i[s] =
                        (16711935 & ((o << 8) | (o >>> 24))) |
                        (4278255360 & ((o << 24) | (o >>> 8)));
                    }
                    return a;
                  },
                  clone: function () {
                    var e = i.clone.call(this);
                    return (e._hash = this._hash.clone()), e;
                  },
                }));
              function m(e, t, r) {
                return e ^ t ^ r;
              }
              function f(e, t, r) {
                return (e & t) | (~e & r);
              }
              function v(e, t, r) {
                return (e | ~t) ^ r;
              }
              function _(e, t, r) {
                return (e & r) | (t & ~r);
              }
              function g(e, t, r) {
                return e ^ (t | ~r);
              }
              function y(e, t) {
                return (e << t) | (e >>> (32 - t));
              }
              (t.RIPEMD160 = i._createHelper(h)),
                (t.HmacRIPEMD160 = i._createHmacHelper(h));
            })(Math),
            n.RIPEMD160);
        },
        2783: function (e, t, r) {
          var n, a, i, s, o, c, d, l;
          e.exports =
            ((l = r(8249)),
            (a = (n = l).lib),
            (i = a.WordArray),
            (s = a.Hasher),
            (o = n.algo),
            (c = []),
            (d = o.SHA1 =
              s.extend({
                _doReset: function () {
                  this._hash = new i.init([
                    1732584193, 4023233417, 2562383102, 271733878, 3285377520,
                  ]);
                },
                _doProcessBlock: function (e, t) {
                  for (
                    var r = this._hash.words,
                      n = r[0],
                      a = r[1],
                      i = r[2],
                      s = r[3],
                      o = r[4],
                      d = 0;
                    d < 80;
                    d++
                  ) {
                    if (d < 16) c[d] = 0 | e[t + d];
                    else {
                      var l = c[d - 3] ^ c[d - 8] ^ c[d - 14] ^ c[d - 16];
                      c[d] = (l << 1) | (l >>> 31);
                    }
                    var u = ((n << 5) | (n >>> 27)) + o + c[d];
                    (u +=
                      d < 20
                        ? 1518500249 + ((a & i) | (~a & s))
                        : d < 40
                        ? 1859775393 + (a ^ i ^ s)
                        : d < 60
                        ? ((a & i) | (a & s) | (i & s)) - 1894007588
                        : (a ^ i ^ s) - 899497514),
                      (o = s),
                      (s = i),
                      (i = (a << 30) | (a >>> 2)),
                      (a = n),
                      (n = u);
                  }
                  (r[0] = (r[0] + n) | 0),
                    (r[1] = (r[1] + a) | 0),
                    (r[2] = (r[2] + i) | 0),
                    (r[3] = (r[3] + s) | 0),
                    (r[4] = (r[4] + o) | 0);
                },
                _doFinalize: function () {
                  var e = this._data,
                    t = e.words,
                    r = 8 * this._nDataBytes,
                    n = 8 * e.sigBytes;
                  return (
                    (t[n >>> 5] |= 128 << (24 - (n % 32))),
                    (t[14 + (((n + 64) >>> 9) << 4)] = Math.floor(
                      r / 4294967296
                    )),
                    (t[15 + (((n + 64) >>> 9) << 4)] = r),
                    (e.sigBytes = 4 * t.length),
                    this._process(),
                    this._hash
                  );
                },
                clone: function () {
                  var e = s.clone.call(this);
                  return (e._hash = this._hash.clone()), e;
                },
              })),
            (n.SHA1 = s._createHelper(d)),
            (n.HmacSHA1 = s._createHmacHelper(d)),
            l.SHA1);
        },
        7792: function (e, t, r) {
          var n, a, i, s, o, c;
          e.exports =
            ((c = r(8249)),
            r(2153),
            (a = (n = c).lib.WordArray),
            (i = n.algo),
            (s = i.SHA256),
            (o = i.SHA224 =
              s.extend({
                _doReset: function () {
                  this._hash = new a.init([
                    3238371032, 914150663, 812702999, 4144912697, 4290775857,
                    1750603025, 1694076839, 3204075428,
                  ]);
                },
                _doFinalize: function () {
                  var e = s._doFinalize.call(this);
                  return (e.sigBytes -= 4), e;
                },
              })),
            (n.SHA224 = s._createHelper(o)),
            (n.HmacSHA224 = s._createHmacHelper(o)),
            c.SHA224);
        },
        2153: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            (function (e) {
              var t = n,
                r = t.lib,
                a = r.WordArray,
                i = r.Hasher,
                s = t.algo,
                o = [],
                c = [];
              !(function () {
                function t(t) {
                  for (var r = e.sqrt(t), n = 2; n <= r; n++)
                    if (!(t % n)) return !1;
                  return !0;
                }
                function r(e) {
                  return (4294967296 * (e - (0 | e))) | 0;
                }
                for (var n = 2, a = 0; a < 64; )
                  t(n) &&
                    (a < 8 && (o[a] = r(e.pow(n, 0.5))),
                    (c[a] = r(e.pow(n, 1 / 3))),
                    a++),
                    n++;
              })();
              var d = [],
                l = (s.SHA256 = i.extend({
                  _doReset: function () {
                    this._hash = new a.init(o.slice(0));
                  },
                  _doProcessBlock: function (e, t) {
                    for (
                      var r = this._hash.words,
                        n = r[0],
                        a = r[1],
                        i = r[2],
                        s = r[3],
                        o = r[4],
                        l = r[5],
                        u = r[6],
                        p = r[7],
                        h = 0;
                      h < 64;
                      h++
                    ) {
                      if (h < 16) d[h] = 0 | e[t + h];
                      else {
                        var m = d[h - 15],
                          f =
                            ((m << 25) | (m >>> 7)) ^
                            ((m << 14) | (m >>> 18)) ^
                            (m >>> 3),
                          v = d[h - 2],
                          _ =
                            ((v << 15) | (v >>> 17)) ^
                            ((v << 13) | (v >>> 19)) ^
                            (v >>> 10);
                        d[h] = f + d[h - 7] + _ + d[h - 16];
                      }
                      var g = (n & a) ^ (n & i) ^ (a & i),
                        y =
                          ((n << 30) | (n >>> 2)) ^
                          ((n << 19) | (n >>> 13)) ^
                          ((n << 10) | (n >>> 22)),
                        b =
                          p +
                          (((o << 26) | (o >>> 6)) ^
                            ((o << 21) | (o >>> 11)) ^
                            ((o << 7) | (o >>> 25))) +
                          ((o & l) ^ (~o & u)) +
                          c[h] +
                          d[h];
                      (p = u),
                        (u = l),
                        (l = o),
                        (o = (s + b) | 0),
                        (s = i),
                        (i = a),
                        (a = n),
                        (n = (b + (y + g)) | 0);
                    }
                    (r[0] = (r[0] + n) | 0),
                      (r[1] = (r[1] + a) | 0),
                      (r[2] = (r[2] + i) | 0),
                      (r[3] = (r[3] + s) | 0),
                      (r[4] = (r[4] + o) | 0),
                      (r[5] = (r[5] + l) | 0),
                      (r[6] = (r[6] + u) | 0),
                      (r[7] = (r[7] + p) | 0);
                  },
                  _doFinalize: function () {
                    var t = this._data,
                      r = t.words,
                      n = 8 * this._nDataBytes,
                      a = 8 * t.sigBytes;
                    return (
                      (r[a >>> 5] |= 128 << (24 - (a % 32))),
                      (r[14 + (((a + 64) >>> 9) << 4)] = e.floor(
                        n / 4294967296
                      )),
                      (r[15 + (((a + 64) >>> 9) << 4)] = n),
                      (t.sigBytes = 4 * r.length),
                      this._process(),
                      this._hash
                    );
                  },
                  clone: function () {
                    var e = i.clone.call(this);
                    return (e._hash = this._hash.clone()), e;
                  },
                }));
              (t.SHA256 = i._createHelper(l)),
                (t.HmacSHA256 = i._createHmacHelper(l));
            })(Math),
            n.SHA256);
        },
        3327: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(4938),
            (function (e) {
              var t = n,
                r = t.lib,
                a = r.WordArray,
                i = r.Hasher,
                s = t.x64.Word,
                o = t.algo,
                c = [],
                d = [],
                l = [];
              !(function () {
                for (var e = 1, t = 0, r = 0; r < 24; r++) {
                  c[e + 5 * t] = (((r + 1) * (r + 2)) / 2) % 64;
                  var n = (2 * e + 3 * t) % 5;
                  (e = t % 5), (t = n);
                }
                for (e = 0; e < 5; e++)
                  for (t = 0; t < 5; t++)
                    d[e + 5 * t] = t + ((2 * e + 3 * t) % 5) * 5;
                for (var a = 1, i = 0; i < 24; i++) {
                  for (var o = 0, u = 0, p = 0; p < 7; p++) {
                    if (1 & a) {
                      var h = (1 << p) - 1;
                      h < 32 ? (u ^= 1 << h) : (o ^= 1 << (h - 32));
                    }
                    128 & a ? (a = (a << 1) ^ 113) : (a <<= 1);
                  }
                  l[i] = s.create(o, u);
                }
              })();
              var u = [];
              !(function () {
                for (var e = 0; e < 25; e++) u[e] = s.create();
              })();
              var p = (o.SHA3 = i.extend({
                cfg: i.cfg.extend({ outputLength: 512 }),
                _doReset: function () {
                  for (var e = (this._state = []), t = 0; t < 25; t++)
                    e[t] = new s.init();
                  this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
                },
                _doProcessBlock: function (e, t) {
                  for (
                    var r = this._state, n = this.blockSize / 2, a = 0;
                    a < n;
                    a++
                  ) {
                    var i = e[t + 2 * a],
                      s = e[t + 2 * a + 1];
                    (i =
                      (16711935 & ((i << 8) | (i >>> 24))) |
                      (4278255360 & ((i << 24) | (i >>> 8)))),
                      (s =
                        (16711935 & ((s << 8) | (s >>> 24))) |
                        (4278255360 & ((s << 24) | (s >>> 8)))),
                      ((C = r[a]).high ^= s),
                      (C.low ^= i);
                  }
                  for (var o = 0; o < 24; o++) {
                    for (var p = 0; p < 5; p++) {
                      for (var h = 0, m = 0, f = 0; f < 5; f++)
                        (h ^= (C = r[p + 5 * f]).high), (m ^= C.low);
                      var v = u[p];
                      (v.high = h), (v.low = m);
                    }
                    for (p = 0; p < 5; p++) {
                      var _ = u[(p + 4) % 5],
                        g = u[(p + 1) % 5],
                        y = g.high,
                        b = g.low;
                      for (
                        h = _.high ^ ((y << 1) | (b >>> 31)),
                          m = _.low ^ ((b << 1) | (y >>> 31)),
                          f = 0;
                        f < 5;
                        f++
                      )
                        ((C = r[p + 5 * f]).high ^= h), (C.low ^= m);
                    }
                    for (var w = 1; w < 25; w++) {
                      var S = (C = r[w]).high,
                        k = C.low,
                        R = c[w];
                      R < 32
                        ? ((h = (S << R) | (k >>> (32 - R))),
                          (m = (k << R) | (S >>> (32 - R))))
                        : ((h = (k << (R - 32)) | (S >>> (64 - R))),
                          (m = (S << (R - 32)) | (k >>> (64 - R))));
                      var E = u[d[w]];
                      (E.high = h), (E.low = m);
                    }
                    var T = u[0],
                      P = r[0];
                    for (T.high = P.high, T.low = P.low, p = 0; p < 5; p++)
                      for (f = 0; f < 5; f++) {
                        var C = r[(w = p + 5 * f)],
                          x = u[w],
                          O = u[((p + 1) % 5) + 5 * f],
                          D = u[((p + 2) % 5) + 5 * f];
                        (C.high = x.high ^ (~O.high & D.high)),
                          (C.low = x.low ^ (~O.low & D.low));
                      }
                    C = r[0];
                    var I = l[o];
                    (C.high ^= I.high), (C.low ^= I.low);
                  }
                },
                _doFinalize: function () {
                  var t = this._data,
                    r = t.words,
                    n = (this._nDataBytes, 8 * t.sigBytes),
                    i = 32 * this.blockSize;
                  (r[n >>> 5] |= 1 << (24 - (n % 32))),
                    (r[((e.ceil((n + 1) / i) * i) >>> 5) - 1] |= 128),
                    (t.sigBytes = 4 * r.length),
                    this._process();
                  for (
                    var s = this._state,
                      o = this.cfg.outputLength / 8,
                      c = o / 8,
                      d = [],
                      l = 0;
                    l < c;
                    l++
                  ) {
                    var u = s[l],
                      p = u.high,
                      h = u.low;
                    (p =
                      (16711935 & ((p << 8) | (p >>> 24))) |
                      (4278255360 & ((p << 24) | (p >>> 8)))),
                      (h =
                        (16711935 & ((h << 8) | (h >>> 24))) |
                        (4278255360 & ((h << 24) | (h >>> 8)))),
                      d.push(h),
                      d.push(p);
                  }
                  return new a.init(d, o);
                },
                clone: function () {
                  for (
                    var e = i.clone.call(this),
                      t = (e._state = this._state.slice(0)),
                      r = 0;
                    r < 25;
                    r++
                  )
                    t[r] = t[r].clone();
                  return e;
                },
              }));
              (t.SHA3 = i._createHelper(p)),
                (t.HmacSHA3 = i._createHmacHelper(p));
            })(Math),
            n.SHA3);
        },
        7460: function (e, t, r) {
          var n, a, i, s, o, c, d, l;
          e.exports =
            ((l = r(8249)),
            r(4938),
            r(34),
            (a = (n = l).x64),
            (i = a.Word),
            (s = a.WordArray),
            (o = n.algo),
            (c = o.SHA512),
            (d = o.SHA384 =
              c.extend({
                _doReset: function () {
                  this._hash = new s.init([
                    new i.init(3418070365, 3238371032),
                    new i.init(1654270250, 914150663),
                    new i.init(2438529370, 812702999),
                    new i.init(355462360, 4144912697),
                    new i.init(1731405415, 4290775857),
                    new i.init(2394180231, 1750603025),
                    new i.init(3675008525, 1694076839),
                    new i.init(1203062813, 3204075428),
                  ]);
                },
                _doFinalize: function () {
                  var e = c._doFinalize.call(this);
                  return (e.sigBytes -= 16), e;
                },
              })),
            (n.SHA384 = c._createHelper(d)),
            (n.HmacSHA384 = c._createHmacHelper(d)),
            l.SHA384);
        },
        34: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(4938),
            (function () {
              var e = n,
                t = e.lib.Hasher,
                r = e.x64,
                a = r.Word,
                i = r.WordArray,
                s = e.algo;
              function o() {
                return a.create.apply(a, arguments);
              }
              var c = [
                  o(1116352408, 3609767458),
                  o(1899447441, 602891725),
                  o(3049323471, 3964484399),
                  o(3921009573, 2173295548),
                  o(961987163, 4081628472),
                  o(1508970993, 3053834265),
                  o(2453635748, 2937671579),
                  o(2870763221, 3664609560),
                  o(3624381080, 2734883394),
                  o(310598401, 1164996542),
                  o(607225278, 1323610764),
                  o(1426881987, 3590304994),
                  o(1925078388, 4068182383),
                  o(2162078206, 991336113),
                  o(2614888103, 633803317),
                  o(3248222580, 3479774868),
                  o(3835390401, 2666613458),
                  o(4022224774, 944711139),
                  o(264347078, 2341262773),
                  o(604807628, 2007800933),
                  o(770255983, 1495990901),
                  o(1249150122, 1856431235),
                  o(1555081692, 3175218132),
                  o(1996064986, 2198950837),
                  o(2554220882, 3999719339),
                  o(2821834349, 766784016),
                  o(2952996808, 2566594879),
                  o(3210313671, 3203337956),
                  o(3336571891, 1034457026),
                  o(3584528711, 2466948901),
                  o(113926993, 3758326383),
                  o(338241895, 168717936),
                  o(666307205, 1188179964),
                  o(773529912, 1546045734),
                  o(1294757372, 1522805485),
                  o(1396182291, 2643833823),
                  o(1695183700, 2343527390),
                  o(1986661051, 1014477480),
                  o(2177026350, 1206759142),
                  o(2456956037, 344077627),
                  o(2730485921, 1290863460),
                  o(2820302411, 3158454273),
                  o(3259730800, 3505952657),
                  o(3345764771, 106217008),
                  o(3516065817, 3606008344),
                  o(3600352804, 1432725776),
                  o(4094571909, 1467031594),
                  o(275423344, 851169720),
                  o(430227734, 3100823752),
                  o(506948616, 1363258195),
                  o(659060556, 3750685593),
                  o(883997877, 3785050280),
                  o(958139571, 3318307427),
                  o(1322822218, 3812723403),
                  o(1537002063, 2003034995),
                  o(1747873779, 3602036899),
                  o(1955562222, 1575990012),
                  o(2024104815, 1125592928),
                  o(2227730452, 2716904306),
                  o(2361852424, 442776044),
                  o(2428436474, 593698344),
                  o(2756734187, 3733110249),
                  o(3204031479, 2999351573),
                  o(3329325298, 3815920427),
                  o(3391569614, 3928383900),
                  o(3515267271, 566280711),
                  o(3940187606, 3454069534),
                  o(4118630271, 4000239992),
                  o(116418474, 1914138554),
                  o(174292421, 2731055270),
                  o(289380356, 3203993006),
                  o(460393269, 320620315),
                  o(685471733, 587496836),
                  o(852142971, 1086792851),
                  o(1017036298, 365543100),
                  o(1126000580, 2618297676),
                  o(1288033470, 3409855158),
                  o(1501505948, 4234509866),
                  o(1607167915, 987167468),
                  o(1816402316, 1246189591),
                ],
                d = [];
              !(function () {
                for (var e = 0; e < 80; e++) d[e] = o();
              })();
              var l = (s.SHA512 = t.extend({
                _doReset: function () {
                  this._hash = new i.init([
                    new a.init(1779033703, 4089235720),
                    new a.init(3144134277, 2227873595),
                    new a.init(1013904242, 4271175723),
                    new a.init(2773480762, 1595750129),
                    new a.init(1359893119, 2917565137),
                    new a.init(2600822924, 725511199),
                    new a.init(528734635, 4215389547),
                    new a.init(1541459225, 327033209),
                  ]);
                },
                _doProcessBlock: function (e, t) {
                  for (
                    var r = this._hash.words,
                      n = r[0],
                      a = r[1],
                      i = r[2],
                      s = r[3],
                      o = r[4],
                      l = r[5],
                      u = r[6],
                      p = r[7],
                      h = n.high,
                      m = n.low,
                      f = a.high,
                      v = a.low,
                      _ = i.high,
                      g = i.low,
                      y = s.high,
                      b = s.low,
                      w = o.high,
                      S = o.low,
                      k = l.high,
                      R = l.low,
                      E = u.high,
                      T = u.low,
                      P = p.high,
                      C = p.low,
                      x = h,
                      O = m,
                      D = f,
                      I = v,
                      M = _,
                      L = g,
                      A = y,
                      j = b,
                      N = w,
                      B = S,
                      F = k,
                      U = R,
                      W = E,
                      V = T,
                      H = P,
                      Z = C,
                      q = 0;
                    q < 80;
                    q++
                  ) {
                    var z,
                      G,
                      K = d[q];
                    if (q < 16)
                      (G = K.high = 0 | e[t + 2 * q]),
                        (z = K.low = 0 | e[t + 2 * q + 1]);
                    else {
                      var $ = d[q - 15],
                        J = $.high,
                        Q = $.low,
                        Y =
                          ((J >>> 1) | (Q << 31)) ^
                          ((J >>> 8) | (Q << 24)) ^
                          (J >>> 7),
                        X =
                          ((Q >>> 1) | (J << 31)) ^
                          ((Q >>> 8) | (J << 24)) ^
                          ((Q >>> 7) | (J << 25)),
                        ee = d[q - 2],
                        te = ee.high,
                        re = ee.low,
                        ne =
                          ((te >>> 19) | (re << 13)) ^
                          ((te << 3) | (re >>> 29)) ^
                          (te >>> 6),
                        ae =
                          ((re >>> 19) | (te << 13)) ^
                          ((re << 3) | (te >>> 29)) ^
                          ((re >>> 6) | (te << 26)),
                        ie = d[q - 7],
                        se = ie.high,
                        oe = ie.low,
                        ce = d[q - 16],
                        de = ce.high,
                        le = ce.low;
                      (G =
                        (G =
                          (G =
                            Y + se + ((z = X + oe) >>> 0 < X >>> 0 ? 1 : 0)) +
                          ne +
                          ((z += ae) >>> 0 < ae >>> 0 ? 1 : 0)) +
                        de +
                        ((z += le) >>> 0 < le >>> 0 ? 1 : 0)),
                        (K.high = G),
                        (K.low = z);
                    }
                    var ue,
                      pe = (N & F) ^ (~N & W),
                      he = (B & U) ^ (~B & V),
                      me = (x & D) ^ (x & M) ^ (D & M),
                      fe = (O & I) ^ (O & L) ^ (I & L),
                      ve =
                        ((x >>> 28) | (O << 4)) ^
                        ((x << 30) | (O >>> 2)) ^
                        ((x << 25) | (O >>> 7)),
                      _e =
                        ((O >>> 28) | (x << 4)) ^
                        ((O << 30) | (x >>> 2)) ^
                        ((O << 25) | (x >>> 7)),
                      ge =
                        ((N >>> 14) | (B << 18)) ^
                        ((N >>> 18) | (B << 14)) ^
                        ((N << 23) | (B >>> 9)),
                      ye =
                        ((B >>> 14) | (N << 18)) ^
                        ((B >>> 18) | (N << 14)) ^
                        ((B << 23) | (N >>> 9)),
                      be = c[q],
                      we = be.high,
                      Se = be.low,
                      ke = H + ge + ((ue = Z + ye) >>> 0 < Z >>> 0 ? 1 : 0),
                      Re = _e + fe;
                    (H = W),
                      (Z = V),
                      (W = F),
                      (V = U),
                      (F = N),
                      (U = B),
                      (N =
                        (A +
                          (ke =
                            (ke =
                              (ke =
                                ke +
                                pe +
                                ((ue += he) >>> 0 < he >>> 0 ? 1 : 0)) +
                              we +
                              ((ue += Se) >>> 0 < Se >>> 0 ? 1 : 0)) +
                            G +
                            ((ue += z) >>> 0 < z >>> 0 ? 1 : 0)) +
                          ((B = (j + ue) | 0) >>> 0 < j >>> 0 ? 1 : 0)) |
                        0),
                      (A = M),
                      (j = L),
                      (M = D),
                      (L = I),
                      (D = x),
                      (I = O),
                      (x =
                        (ke +
                          (ve + me + (Re >>> 0 < _e >>> 0 ? 1 : 0)) +
                          ((O = (ue + Re) | 0) >>> 0 < ue >>> 0 ? 1 : 0)) |
                        0);
                  }
                  (m = n.low = m + O),
                    (n.high = h + x + (m >>> 0 < O >>> 0 ? 1 : 0)),
                    (v = a.low = v + I),
                    (a.high = f + D + (v >>> 0 < I >>> 0 ? 1 : 0)),
                    (g = i.low = g + L),
                    (i.high = _ + M + (g >>> 0 < L >>> 0 ? 1 : 0)),
                    (b = s.low = b + j),
                    (s.high = y + A + (b >>> 0 < j >>> 0 ? 1 : 0)),
                    (S = o.low = S + B),
                    (o.high = w + N + (S >>> 0 < B >>> 0 ? 1 : 0)),
                    (R = l.low = R + U),
                    (l.high = k + F + (R >>> 0 < U >>> 0 ? 1 : 0)),
                    (T = u.low = T + V),
                    (u.high = E + W + (T >>> 0 < V >>> 0 ? 1 : 0)),
                    (C = p.low = C + Z),
                    (p.high = P + H + (C >>> 0 < Z >>> 0 ? 1 : 0));
                },
                _doFinalize: function () {
                  var e = this._data,
                    t = e.words,
                    r = 8 * this._nDataBytes,
                    n = 8 * e.sigBytes;
                  return (
                    (t[n >>> 5] |= 128 << (24 - (n % 32))),
                    (t[30 + (((n + 128) >>> 10) << 5)] = Math.floor(
                      r / 4294967296
                    )),
                    (t[31 + (((n + 128) >>> 10) << 5)] = r),
                    (e.sigBytes = 4 * t.length),
                    this._process(),
                    this._hash.toX32()
                  );
                },
                clone: function () {
                  var e = t.clone.call(this);
                  return (e._hash = this._hash.clone()), e;
                },
                blockSize: 32,
              }));
              (e.SHA512 = t._createHelper(l)),
                (e.HmacSHA512 = t._createHmacHelper(l));
            })(),
            n.SHA512);
        },
        4253: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(8269),
            r(8214),
            r(888),
            r(5109),
            (function () {
              var e = n,
                t = e.lib,
                r = t.WordArray,
                a = t.BlockCipher,
                i = e.algo,
                s = [
                  57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2,
                  59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39,
                  31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37,
                  29, 21, 13, 5, 28, 20, 12, 4,
                ],
                o = [
                  14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26,
                  8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51,
                  45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32,
                ],
                c = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28],
                d = [
                  {
                    0: 8421888,
                    268435456: 32768,
                    536870912: 8421378,
                    805306368: 2,
                    1073741824: 512,
                    1342177280: 8421890,
                    1610612736: 8389122,
                    1879048192: 8388608,
                    2147483648: 514,
                    2415919104: 8389120,
                    2684354560: 33280,
                    2952790016: 8421376,
                    3221225472: 32770,
                    3489660928: 8388610,
                    3758096384: 0,
                    4026531840: 33282,
                    134217728: 0,
                    402653184: 8421890,
                    671088640: 33282,
                    939524096: 32768,
                    1207959552: 8421888,
                    1476395008: 512,
                    1744830464: 8421378,
                    2013265920: 2,
                    2281701376: 8389120,
                    2550136832: 33280,
                    2818572288: 8421376,
                    3087007744: 8389122,
                    3355443200: 8388610,
                    3623878656: 32770,
                    3892314112: 514,
                    4160749568: 8388608,
                    1: 32768,
                    268435457: 2,
                    536870913: 8421888,
                    805306369: 8388608,
                    1073741825: 8421378,
                    1342177281: 33280,
                    1610612737: 512,
                    1879048193: 8389122,
                    2147483649: 8421890,
                    2415919105: 8421376,
                    2684354561: 8388610,
                    2952790017: 33282,
                    3221225473: 514,
                    3489660929: 8389120,
                    3758096385: 32770,
                    4026531841: 0,
                    134217729: 8421890,
                    402653185: 8421376,
                    671088641: 8388608,
                    939524097: 512,
                    1207959553: 32768,
                    1476395009: 8388610,
                    1744830465: 2,
                    2013265921: 33282,
                    2281701377: 32770,
                    2550136833: 8389122,
                    2818572289: 514,
                    3087007745: 8421888,
                    3355443201: 8389120,
                    3623878657: 0,
                    3892314113: 33280,
                    4160749569: 8421378,
                  },
                  {
                    0: 1074282512,
                    16777216: 16384,
                    33554432: 524288,
                    50331648: 1074266128,
                    67108864: 1073741840,
                    83886080: 1074282496,
                    100663296: 1073758208,
                    117440512: 16,
                    134217728: 540672,
                    150994944: 1073758224,
                    167772160: 1073741824,
                    184549376: 540688,
                    201326592: 524304,
                    218103808: 0,
                    234881024: 16400,
                    251658240: 1074266112,
                    8388608: 1073758208,
                    25165824: 540688,
                    41943040: 16,
                    58720256: 1073758224,
                    75497472: 1074282512,
                    92274688: 1073741824,
                    109051904: 524288,
                    125829120: 1074266128,
                    142606336: 524304,
                    159383552: 0,
                    176160768: 16384,
                    192937984: 1074266112,
                    209715200: 1073741840,
                    226492416: 540672,
                    243269632: 1074282496,
                    260046848: 16400,
                    268435456: 0,
                    285212672: 1074266128,
                    301989888: 1073758224,
                    318767104: 1074282496,
                    335544320: 1074266112,
                    352321536: 16,
                    369098752: 540688,
                    385875968: 16384,
                    402653184: 16400,
                    419430400: 524288,
                    436207616: 524304,
                    452984832: 1073741840,
                    469762048: 540672,
                    486539264: 1073758208,
                    503316480: 1073741824,
                    520093696: 1074282512,
                    276824064: 540688,
                    293601280: 524288,
                    310378496: 1074266112,
                    327155712: 16384,
                    343932928: 1073758208,
                    360710144: 1074282512,
                    377487360: 16,
                    394264576: 1073741824,
                    411041792: 1074282496,
                    427819008: 1073741840,
                    444596224: 1073758224,
                    461373440: 524304,
                    478150656: 0,
                    494927872: 16400,
                    511705088: 1074266128,
                    528482304: 540672,
                  },
                  {
                    0: 260,
                    1048576: 0,
                    2097152: 67109120,
                    3145728: 65796,
                    4194304: 65540,
                    5242880: 67108868,
                    6291456: 67174660,
                    7340032: 67174400,
                    8388608: 67108864,
                    9437184: 67174656,
                    10485760: 65792,
                    11534336: 67174404,
                    12582912: 67109124,
                    13631488: 65536,
                    14680064: 4,
                    15728640: 256,
                    524288: 67174656,
                    1572864: 67174404,
                    2621440: 0,
                    3670016: 67109120,
                    4718592: 67108868,
                    5767168: 65536,
                    6815744: 65540,
                    7864320: 260,
                    8912896: 4,
                    9961472: 256,
                    11010048: 67174400,
                    12058624: 65796,
                    13107200: 65792,
                    14155776: 67109124,
                    15204352: 67174660,
                    16252928: 67108864,
                    16777216: 67174656,
                    17825792: 65540,
                    18874368: 65536,
                    19922944: 67109120,
                    20971520: 256,
                    22020096: 67174660,
                    23068672: 67108868,
                    24117248: 0,
                    25165824: 67109124,
                    26214400: 67108864,
                    27262976: 4,
                    28311552: 65792,
                    29360128: 67174400,
                    30408704: 260,
                    31457280: 65796,
                    32505856: 67174404,
                    17301504: 67108864,
                    18350080: 260,
                    19398656: 67174656,
                    20447232: 0,
                    21495808: 65540,
                    22544384: 67109120,
                    23592960: 256,
                    24641536: 67174404,
                    25690112: 65536,
                    26738688: 67174660,
                    27787264: 65796,
                    28835840: 67108868,
                    29884416: 67109124,
                    30932992: 67174400,
                    31981568: 4,
                    33030144: 65792,
                  },
                  {
                    0: 2151682048,
                    65536: 2147487808,
                    131072: 4198464,
                    196608: 2151677952,
                    262144: 0,
                    327680: 4198400,
                    393216: 2147483712,
                    458752: 4194368,
                    524288: 2147483648,
                    589824: 4194304,
                    655360: 64,
                    720896: 2147487744,
                    786432: 2151678016,
                    851968: 4160,
                    917504: 4096,
                    983040: 2151682112,
                    32768: 2147487808,
                    98304: 64,
                    163840: 2151678016,
                    229376: 2147487744,
                    294912: 4198400,
                    360448: 2151682112,
                    425984: 0,
                    491520: 2151677952,
                    557056: 4096,
                    622592: 2151682048,
                    688128: 4194304,
                    753664: 4160,
                    819200: 2147483648,
                    884736: 4194368,
                    950272: 4198464,
                    1015808: 2147483712,
                    1048576: 4194368,
                    1114112: 4198400,
                    1179648: 2147483712,
                    1245184: 0,
                    1310720: 4160,
                    1376256: 2151678016,
                    1441792: 2151682048,
                    1507328: 2147487808,
                    1572864: 2151682112,
                    1638400: 2147483648,
                    1703936: 2151677952,
                    1769472: 4198464,
                    1835008: 2147487744,
                    1900544: 4194304,
                    1966080: 64,
                    2031616: 4096,
                    1081344: 2151677952,
                    1146880: 2151682112,
                    1212416: 0,
                    1277952: 4198400,
                    1343488: 4194368,
                    1409024: 2147483648,
                    1474560: 2147487808,
                    1540096: 64,
                    1605632: 2147483712,
                    1671168: 4096,
                    1736704: 2147487744,
                    1802240: 2151678016,
                    1867776: 4160,
                    1933312: 2151682048,
                    1998848: 4194304,
                    2064384: 4198464,
                  },
                  {
                    0: 128,
                    4096: 17039360,
                    8192: 262144,
                    12288: 536870912,
                    16384: 537133184,
                    20480: 16777344,
                    24576: 553648256,
                    28672: 262272,
                    32768: 16777216,
                    36864: 537133056,
                    40960: 536871040,
                    45056: 553910400,
                    49152: 553910272,
                    53248: 0,
                    57344: 17039488,
                    61440: 553648128,
                    2048: 17039488,
                    6144: 553648256,
                    10240: 128,
                    14336: 17039360,
                    18432: 262144,
                    22528: 537133184,
                    26624: 553910272,
                    30720: 536870912,
                    34816: 537133056,
                    38912: 0,
                    43008: 553910400,
                    47104: 16777344,
                    51200: 536871040,
                    55296: 553648128,
                    59392: 16777216,
                    63488: 262272,
                    65536: 262144,
                    69632: 128,
                    73728: 536870912,
                    77824: 553648256,
                    81920: 16777344,
                    86016: 553910272,
                    90112: 537133184,
                    94208: 16777216,
                    98304: 553910400,
                    102400: 553648128,
                    106496: 17039360,
                    110592: 537133056,
                    114688: 262272,
                    118784: 536871040,
                    122880: 0,
                    126976: 17039488,
                    67584: 553648256,
                    71680: 16777216,
                    75776: 17039360,
                    79872: 537133184,
                    83968: 536870912,
                    88064: 17039488,
                    92160: 128,
                    96256: 553910272,
                    100352: 262272,
                    104448: 553910400,
                    108544: 0,
                    112640: 553648128,
                    116736: 16777344,
                    120832: 262144,
                    124928: 537133056,
                    129024: 536871040,
                  },
                  {
                    0: 268435464,
                    256: 8192,
                    512: 270532608,
                    768: 270540808,
                    1024: 268443648,
                    1280: 2097152,
                    1536: 2097160,
                    1792: 268435456,
                    2048: 0,
                    2304: 268443656,
                    2560: 2105344,
                    2816: 8,
                    3072: 270532616,
                    3328: 2105352,
                    3584: 8200,
                    3840: 270540800,
                    128: 270532608,
                    384: 270540808,
                    640: 8,
                    896: 2097152,
                    1152: 2105352,
                    1408: 268435464,
                    1664: 268443648,
                    1920: 8200,
                    2176: 2097160,
                    2432: 8192,
                    2688: 268443656,
                    2944: 270532616,
                    3200: 0,
                    3456: 270540800,
                    3712: 2105344,
                    3968: 268435456,
                    4096: 268443648,
                    4352: 270532616,
                    4608: 270540808,
                    4864: 8200,
                    5120: 2097152,
                    5376: 268435456,
                    5632: 268435464,
                    5888: 2105344,
                    6144: 2105352,
                    6400: 0,
                    6656: 8,
                    6912: 270532608,
                    7168: 8192,
                    7424: 268443656,
                    7680: 270540800,
                    7936: 2097160,
                    4224: 8,
                    4480: 2105344,
                    4736: 2097152,
                    4992: 268435464,
                    5248: 268443648,
                    5504: 8200,
                    5760: 270540808,
                    6016: 270532608,
                    6272: 270540800,
                    6528: 270532616,
                    6784: 8192,
                    7040: 2105352,
                    7296: 2097160,
                    7552: 0,
                    7808: 268435456,
                    8064: 268443656,
                  },
                  {
                    0: 1048576,
                    16: 33555457,
                    32: 1024,
                    48: 1049601,
                    64: 34604033,
                    80: 0,
                    96: 1,
                    112: 34603009,
                    128: 33555456,
                    144: 1048577,
                    160: 33554433,
                    176: 34604032,
                    192: 34603008,
                    208: 1025,
                    224: 1049600,
                    240: 33554432,
                    8: 34603009,
                    24: 0,
                    40: 33555457,
                    56: 34604032,
                    72: 1048576,
                    88: 33554433,
                    104: 33554432,
                    120: 1025,
                    136: 1049601,
                    152: 33555456,
                    168: 34603008,
                    184: 1048577,
                    200: 1024,
                    216: 34604033,
                    232: 1,
                    248: 1049600,
                    256: 33554432,
                    272: 1048576,
                    288: 33555457,
                    304: 34603009,
                    320: 1048577,
                    336: 33555456,
                    352: 34604032,
                    368: 1049601,
                    384: 1025,
                    400: 34604033,
                    416: 1049600,
                    432: 1,
                    448: 0,
                    464: 34603008,
                    480: 33554433,
                    496: 1024,
                    264: 1049600,
                    280: 33555457,
                    296: 34603009,
                    312: 1,
                    328: 33554432,
                    344: 1048576,
                    360: 1025,
                    376: 34604032,
                    392: 33554433,
                    408: 34603008,
                    424: 0,
                    440: 34604033,
                    456: 1049601,
                    472: 1024,
                    488: 33555456,
                    504: 1048577,
                  },
                  {
                    0: 134219808,
                    1: 131072,
                    2: 134217728,
                    3: 32,
                    4: 131104,
                    5: 134350880,
                    6: 134350848,
                    7: 2048,
                    8: 134348800,
                    9: 134219776,
                    10: 133120,
                    11: 134348832,
                    12: 2080,
                    13: 0,
                    14: 134217760,
                    15: 133152,
                    2147483648: 2048,
                    2147483649: 134350880,
                    2147483650: 134219808,
                    2147483651: 134217728,
                    2147483652: 134348800,
                    2147483653: 133120,
                    2147483654: 133152,
                    2147483655: 32,
                    2147483656: 134217760,
                    2147483657: 2080,
                    2147483658: 131104,
                    2147483659: 134350848,
                    2147483660: 0,
                    2147483661: 134348832,
                    2147483662: 134219776,
                    2147483663: 131072,
                    16: 133152,
                    17: 134350848,
                    18: 32,
                    19: 2048,
                    20: 134219776,
                    21: 134217760,
                    22: 134348832,
                    23: 131072,
                    24: 0,
                    25: 131104,
                    26: 134348800,
                    27: 134219808,
                    28: 134350880,
                    29: 133120,
                    30: 2080,
                    31: 134217728,
                    2147483664: 131072,
                    2147483665: 2048,
                    2147483666: 134348832,
                    2147483667: 133152,
                    2147483668: 32,
                    2147483669: 134348800,
                    2147483670: 134217728,
                    2147483671: 134219808,
                    2147483672: 134350880,
                    2147483673: 134217760,
                    2147483674: 134219776,
                    2147483675: 0,
                    2147483676: 133120,
                    2147483677: 2080,
                    2147483678: 131104,
                    2147483679: 134350848,
                  },
                ],
                l = [
                  4160749569, 528482304, 33030144, 2064384, 129024, 8064, 504,
                  2147483679,
                ],
                u = (i.DES = a.extend({
                  _doReset: function () {
                    for (var e = this._key.words, t = [], r = 0; r < 56; r++) {
                      var n = s[r] - 1;
                      t[r] = (e[n >>> 5] >>> (31 - (n % 32))) & 1;
                    }
                    for (var a = (this._subKeys = []), i = 0; i < 16; i++) {
                      var d = (a[i] = []),
                        l = c[i];
                      for (r = 0; r < 24; r++)
                        (d[(r / 6) | 0] |=
                          t[(o[r] - 1 + l) % 28] << (31 - (r % 6))),
                          (d[4 + ((r / 6) | 0)] |=
                            t[28 + ((o[r + 24] - 1 + l) % 28)] <<
                            (31 - (r % 6)));
                      for (
                        d[0] = (d[0] << 1) | (d[0] >>> 31), r = 1;
                        r < 7;
                        r++
                      )
                        d[r] = d[r] >>> (4 * (r - 1) + 3);
                      d[7] = (d[7] << 5) | (d[7] >>> 27);
                    }
                    var u = (this._invSubKeys = []);
                    for (r = 0; r < 16; r++) u[r] = a[15 - r];
                  },
                  encryptBlock: function (e, t) {
                    this._doCryptBlock(e, t, this._subKeys);
                  },
                  decryptBlock: function (e, t) {
                    this._doCryptBlock(e, t, this._invSubKeys);
                  },
                  _doCryptBlock: function (e, t, r) {
                    (this._lBlock = e[t]),
                      (this._rBlock = e[t + 1]),
                      p.call(this, 4, 252645135),
                      p.call(this, 16, 65535),
                      h.call(this, 2, 858993459),
                      h.call(this, 8, 16711935),
                      p.call(this, 1, 1431655765);
                    for (var n = 0; n < 16; n++) {
                      for (
                        var a = r[n],
                          i = this._lBlock,
                          s = this._rBlock,
                          o = 0,
                          c = 0;
                        c < 8;
                        c++
                      )
                        o |= d[c][((s ^ a[c]) & l[c]) >>> 0];
                      (this._lBlock = s), (this._rBlock = i ^ o);
                    }
                    var u = this._lBlock;
                    (this._lBlock = this._rBlock),
                      (this._rBlock = u),
                      p.call(this, 1, 1431655765),
                      h.call(this, 8, 16711935),
                      h.call(this, 2, 858993459),
                      p.call(this, 16, 65535),
                      p.call(this, 4, 252645135),
                      (e[t] = this._lBlock),
                      (e[t + 1] = this._rBlock);
                  },
                  keySize: 2,
                  ivSize: 2,
                  blockSize: 2,
                }));
              function p(e, t) {
                var r = ((this._lBlock >>> e) ^ this._rBlock) & t;
                (this._rBlock ^= r), (this._lBlock ^= r << e);
              }
              function h(e, t) {
                var r = ((this._rBlock >>> e) ^ this._lBlock) & t;
                (this._lBlock ^= r), (this._rBlock ^= r << e);
              }
              e.DES = a._createHelper(u);
              var m = (i.TripleDES = a.extend({
                _doReset: function () {
                  var e = this._key.words;
                  if (2 !== e.length && 4 !== e.length && e.length < 6)
                    throw new Error(
                      "Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192."
                    );
                  var t = e.slice(0, 2),
                    n = e.length < 4 ? e.slice(0, 2) : e.slice(2, 4),
                    a = e.length < 6 ? e.slice(0, 2) : e.slice(4, 6);
                  (this._des1 = u.createEncryptor(r.create(t))),
                    (this._des2 = u.createEncryptor(r.create(n))),
                    (this._des3 = u.createEncryptor(r.create(a)));
                },
                encryptBlock: function (e, t) {
                  this._des1.encryptBlock(e, t),
                    this._des2.decryptBlock(e, t),
                    this._des3.encryptBlock(e, t);
                },
                decryptBlock: function (e, t) {
                  this._des3.decryptBlock(e, t),
                    this._des2.encryptBlock(e, t),
                    this._des1.decryptBlock(e, t);
                },
                keySize: 6,
                ivSize: 2,
                blockSize: 2,
              }));
              e.TripleDES = a._createHelper(m);
            })(),
            n.TripleDES);
        },
        4938: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            (function (e) {
              var t = n,
                r = t.lib,
                a = r.Base,
                i = r.WordArray,
                s = (t.x64 = {});
              (s.Word = a.extend({
                init: function (e, t) {
                  (this.high = e), (this.low = t);
                },
              })),
                (s.WordArray = a.extend({
                  init: function (t, r) {
                    (t = this.words = t || []),
                      (this.sigBytes = r != e ? r : 8 * t.length);
                  },
                  toX32: function () {
                    for (
                      var e = this.words, t = e.length, r = [], n = 0;
                      n < t;
                      n++
                    ) {
                      var a = e[n];
                      r.push(a.high), r.push(a.low);
                    }
                    return i.create(r, this.sigBytes);
                  },
                  clone: function () {
                    for (
                      var e = a.clone.call(this),
                        t = (e.words = this.words.slice(0)),
                        r = t.length,
                        n = 0;
                      n < r;
                      n++
                    )
                      t[n] = t[n].clone();
                    return e;
                  },
                }));
            })(),
            n);
        },
        1227: (e, t, r) => {
          (t.formatArgs = function (t) {
            if (
              ((t[0] =
                (this.useColors ? "%c" : "") +
                this.namespace +
                (this.useColors ? " %c" : " ") +
                t[0] +
                (this.useColors ? "%c " : " ") +
                "+" +
                e.exports.humanize(this.diff)),
              !this.useColors)
            )
              return;
            const r = "color: " + this.color;
            t.splice(1, 0, r, "color: inherit");
            let n = 0,
              a = 0;
            t[0].replace(/%[a-zA-Z%]/g, (e) => {
              "%%" !== e && (n++, "%c" === e && (a = n));
            }),
              t.splice(a, 0, r);
          }),
            (t.save = function (e) {
              try {
                e
                  ? t.storage.setItem("debug", e)
                  : t.storage.removeItem("debug");
              } catch (e) {}
            }),
            (t.load = function () {
              let e;
              try {
                e = t.storage.getItem("debug");
              } catch (e) {}
              !e &&
                "undefined" != typeof process &&
                "env" in process &&
                (e = process.env.DEBUG);
              return e;
            }),
            (t.useColors = function () {
              if (
                "undefined" != typeof window &&
                window.process &&
                ("renderer" === window.process.type || window.process.__nwjs)
              )
                return !0;
              if (
                "undefined" != typeof navigator &&
                navigator.userAgent &&
                navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)
              )
                return !1;
              return (
                ("undefined" != typeof document &&
                  document.documentElement &&
                  document.documentElement.style &&
                  document.documentElement.style.WebkitAppearance) ||
                ("undefined" != typeof window &&
                  window.console &&
                  (window.console.firebug ||
                    (window.console.exception && window.console.table))) ||
                ("undefined" != typeof navigator &&
                  navigator.userAgent &&
                  navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) &&
                  parseInt(RegExp.$1, 10) >= 31) ||
                ("undefined" != typeof navigator &&
                  navigator.userAgent &&
                  navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))
              );
            }),
            (t.storage = (function () {
              try {
                return localStorage;
              } catch (e) {}
            })()),
            (t.destroy = (() => {
              let e = !1;
              return () => {
                e ||
                  ((e = !0),
                  console.warn(
                    "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
                  ));
              };
            })()),
            (t.colors = [
              "#0000CC",
              "#0000FF",
              "#0033CC",
              "#0033FF",
              "#0066CC",
              "#0066FF",
              "#0099CC",
              "#0099FF",
              "#00CC00",
              "#00CC33",
              "#00CC66",
              "#00CC99",
              "#00CCCC",
              "#00CCFF",
              "#3300CC",
              "#3300FF",
              "#3333CC",
              "#3333FF",
              "#3366CC",
              "#3366FF",
              "#3399CC",
              "#3399FF",
              "#33CC00",
              "#33CC33",
              "#33CC66",
              "#33CC99",
              "#33CCCC",
              "#33CCFF",
              "#6600CC",
              "#6600FF",
              "#6633CC",
              "#6633FF",
              "#66CC00",
              "#66CC33",
              "#9900CC",
              "#9900FF",
              "#9933CC",
              "#9933FF",
              "#99CC00",
              "#99CC33",
              "#CC0000",
              "#CC0033",
              "#CC0066",
              "#CC0099",
              "#CC00CC",
              "#CC00FF",
              "#CC3300",
              "#CC3333",
              "#CC3366",
              "#CC3399",
              "#CC33CC",
              "#CC33FF",
              "#CC6600",
              "#CC6633",
              "#CC9900",
              "#CC9933",
              "#CCCC00",
              "#CCCC33",
              "#FF0000",
              "#FF0033",
              "#FF0066",
              "#FF0099",
              "#FF00CC",
              "#FF00FF",
              "#FF3300",
              "#FF3333",
              "#FF3366",
              "#FF3399",
              "#FF33CC",
              "#FF33FF",
              "#FF6600",
              "#FF6633",
              "#FF9900",
              "#FF9933",
              "#FFCC00",
              "#FFCC33",
            ]),
            (t.log = console.debug || console.log || (() => {})),
            (e.exports = r(2447)(t));
          const { formatters: n } = e.exports;
          n.j = function (e) {
            try {
              return JSON.stringify(e);
            } catch (e) {
              return "[UnexpectedJSONParseError]: " + e.message;
            }
          };
        },
        2447: (e, t, r) => {
          e.exports = function (e) {
            function t(e) {
              let r,
                a,
                i,
                s = null;
              function o(...e) {
                if (!o.enabled) return;
                const n = o,
                  a = Number(new Date()),
                  i = a - (r || a);
                (n.diff = i),
                  (n.prev = r),
                  (n.curr = a),
                  (r = a),
                  (e[0] = t.coerce(e[0])),
                  "string" != typeof e[0] && e.unshift("%O");
                let s = 0;
                (e[0] = e[0].replace(/%([a-zA-Z%])/g, (r, a) => {
                  if ("%%" === r) return "%";
                  s++;
                  const i = t.formatters[a];
                  if ("function" == typeof i) {
                    const t = e[s];
                    (r = i.call(n, t)), e.splice(s, 1), s--;
                  }
                  return r;
                })),
                  t.formatArgs.call(n, e);
                (n.log || t.log).apply(n, e);
              }
              return (
                (o.namespace = e),
                (o.useColors = t.useColors()),
                (o.color = t.selectColor(e)),
                (o.extend = n),
                (o.destroy = t.destroy),
                Object.defineProperty(o, "enabled", {
                  enumerable: !0,
                  configurable: !1,
                  get: () =>
                    null !== s
                      ? s
                      : (a !== t.namespaces &&
                          ((a = t.namespaces), (i = t.enabled(e))),
                        i),
                  set: (e) => {
                    s = e;
                  },
                }),
                "function" == typeof t.init && t.init(o),
                o
              );
            }
            function n(e, r) {
              const n = t(this.namespace + (void 0 === r ? ":" : r) + e);
              return (n.log = this.log), n;
            }
            function a(e) {
              return e
                .toString()
                .substring(2, e.toString().length - 2)
                .replace(/\.\*\?$/, "*");
            }
            return (
              (t.debug = t),
              (t.default = t),
              (t.coerce = function (e) {
                if (e instanceof Error) return e.stack || e.message;
                return e;
              }),
              (t.disable = function () {
                const e = [
                  ...t.names.map(a),
                  ...t.skips.map(a).map((e) => "-" + e),
                ].join(",");
                return t.enable(""), e;
              }),
              (t.enable = function (e) {
                let r;
                t.save(e), (t.namespaces = e), (t.names = []), (t.skips = []);
                const n = ("string" == typeof e ? e : "").split(/[\s,]+/),
                  a = n.length;
                for (r = 0; r < a; r++)
                  n[r] &&
                    ("-" === (e = n[r].replace(/\*/g, ".*?"))[0]
                      ? t.skips.push(new RegExp("^" + e.substr(1) + "$"))
                      : t.names.push(new RegExp("^" + e + "$")));
              }),
              (t.enabled = function (e) {
                if ("*" === e[e.length - 1]) return !0;
                let r, n;
                for (r = 0, n = t.skips.length; r < n; r++)
                  if (t.skips[r].test(e)) return !1;
                for (r = 0, n = t.names.length; r < n; r++)
                  if (t.names[r].test(e)) return !0;
                return !1;
              }),
              (t.humanize = r(7824)),
              (t.destroy = function () {
                console.warn(
                  "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
                );
              }),
              Object.keys(e).forEach((r) => {
                t[r] = e[r];
              }),
              (t.names = []),
              (t.skips = []),
              (t.formatters = {}),
              (t.selectColor = function (e) {
                let r = 0;
                for (let t = 0; t < e.length; t++)
                  (r = (r << 5) - r + e.charCodeAt(t)), (r |= 0);
                return t.colors[Math.abs(r) % t.colors.length];
              }),
              t.enable(t.load()),
              t
            );
          };
        },
        284: (e) => {
          var t = function () {
            if ("object" == typeof self && self) return self;
            if ("object" == typeof window && window) return window;
            throw new Error("Unable to resolve global `this`");
          };
          e.exports = (function () {
            if (this) return this;
            if ("object" == typeof globalThis && globalThis) return globalThis;
            try {
              Object.defineProperty(Object.prototype, "__global__", {
                get: function () {
                  return this;
                },
                configurable: !0,
              });
            } catch (e) {
              return t();
            }
            try {
              return __global__ || t();
            } finally {
              delete Object.prototype.__global__;
            }
          })();
        },
        7187: (e) => {
          "use strict";
          var t,
            r = "object" == typeof Reflect ? Reflect : null,
            n =
              r && "function" == typeof r.apply
                ? r.apply
                : function (e, t, r) {
                    return Function.prototype.apply.call(e, t, r);
                  };
          t =
            r && "function" == typeof r.ownKeys
              ? r.ownKeys
              : Object.getOwnPropertySymbols
              ? function (e) {
                  return Object.getOwnPropertyNames(e).concat(
                    Object.getOwnPropertySymbols(e)
                  );
                }
              : function (e) {
                  return Object.getOwnPropertyNames(e);
                };
          var a =
            Number.isNaN ||
            function (e) {
              return e != e;
            };
          function i() {
            i.init.call(this);
          }
          (e.exports = i),
            (e.exports.once = function (e, t) {
              return new Promise(function (r, n) {
                function a(r) {
                  e.removeListener(t, i), n(r);
                }
                function i() {
                  "function" == typeof e.removeListener &&
                    e.removeListener("error", a),
                    r([].slice.call(arguments));
                }
                f(e, t, i, { once: !0 }),
                  "error" !== t &&
                    (function (e, t, r) {
                      "function" == typeof e.on && f(e, "error", t, r);
                    })(e, a, { once: !0 });
              });
            }),
            (i.EventEmitter = i),
            (i.prototype._events = void 0),
            (i.prototype._eventsCount = 0),
            (i.prototype._maxListeners = void 0);
          var s = 10;
          function o(e) {
            if ("function" != typeof e)
              throw new TypeError(
                'The "listener" argument must be of type Function. Received type ' +
                  typeof e
              );
          }
          function c(e) {
            return void 0 === e._maxListeners
              ? i.defaultMaxListeners
              : e._maxListeners;
          }
          function d(e, t, r, n) {
            var a, i, s, d;
            if (
              (o(r),
              void 0 === (i = e._events)
                ? ((i = e._events = Object.create(null)), (e._eventsCount = 0))
                : (void 0 !== i.newListener &&
                    (e.emit("newListener", t, r.listener ? r.listener : r),
                    (i = e._events)),
                  (s = i[t])),
              void 0 === s)
            )
              (s = i[t] = r), ++e._eventsCount;
            else if (
              ("function" == typeof s
                ? (s = i[t] = n ? [r, s] : [s, r])
                : n
                ? s.unshift(r)
                : s.push(r),
              (a = c(e)) > 0 && s.length > a && !s.warned)
            ) {
              s.warned = !0;
              var l = new Error(
                "Possible EventEmitter memory leak detected. " +
                  s.length +
                  " " +
                  String(t) +
                  " listeners added. Use emitter.setMaxListeners() to increase limit"
              );
              (l.name = "MaxListenersExceededWarning"),
                (l.emitter = e),
                (l.type = t),
                (l.count = s.length),
                (d = l),
                console && console.warn && console.warn(d);
            }
            return e;
          }
          function l() {
            if (!this.fired)
              return (
                this.target.removeListener(this.type, this.wrapFn),
                (this.fired = !0),
                0 === arguments.length
                  ? this.listener.call(this.target)
                  : this.listener.apply(this.target, arguments)
              );
          }
          function u(e, t, r) {
            var n = {
                fired: !1,
                wrapFn: void 0,
                target: e,
                type: t,
                listener: r,
              },
              a = l.bind(n);
            return (a.listener = r), (n.wrapFn = a), a;
          }
          function p(e, t, r) {
            var n = e._events;
            if (void 0 === n) return [];
            var a = n[t];
            return void 0 === a
              ? []
              : "function" == typeof a
              ? r
                ? [a.listener || a]
                : [a]
              : r
              ? (function (e) {
                  for (var t = new Array(e.length), r = 0; r < t.length; ++r)
                    t[r] = e[r].listener || e[r];
                  return t;
                })(a)
              : m(a, a.length);
          }
          function h(e) {
            var t = this._events;
            if (void 0 !== t) {
              var r = t[e];
              if ("function" == typeof r) return 1;
              if (void 0 !== r) return r.length;
            }
            return 0;
          }
          function m(e, t) {
            for (var r = new Array(t), n = 0; n < t; ++n) r[n] = e[n];
            return r;
          }
          function f(e, t, r, n) {
            if ("function" == typeof e.on) n.once ? e.once(t, r) : e.on(t, r);
            else {
              if ("function" != typeof e.addEventListener)
                throw new TypeError(
                  'The "emitter" argument must be of type EventEmitter. Received type ' +
                    typeof e
                );
              e.addEventListener(t, function a(i) {
                n.once && e.removeEventListener(t, a), r(i);
              });
            }
          }
          Object.defineProperty(i, "defaultMaxListeners", {
            enumerable: !0,
            get: function () {
              return s;
            },
            set: function (e) {
              if ("number" != typeof e || e < 0 || a(e))
                throw new RangeError(
                  'The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' +
                    e +
                    "."
                );
              s = e;
            },
          }),
            (i.init = function () {
              (void 0 !== this._events &&
                this._events !== Object.getPrototypeOf(this)._events) ||
                ((this._events = Object.create(null)), (this._eventsCount = 0)),
                (this._maxListeners = this._maxListeners || void 0);
            }),
            (i.prototype.setMaxListeners = function (e) {
              if ("number" != typeof e || e < 0 || a(e))
                throw new RangeError(
                  'The value of "n" is out of range. It must be a non-negative number. Received ' +
                    e +
                    "."
                );
              return (this._maxListeners = e), this;
            }),
            (i.prototype.getMaxListeners = function () {
              return c(this);
            }),
            (i.prototype.emit = function (e) {
              for (var t = [], r = 1; r < arguments.length; r++)
                t.push(arguments[r]);
              var a = "error" === e,
                i = this._events;
              if (void 0 !== i) a = a && void 0 === i.error;
              else if (!a) return !1;
              if (a) {
                var s;
                if ((t.length > 0 && (s = t[0]), s instanceof Error)) throw s;
                var o = new Error(
                  "Unhandled error." + (s ? " (" + s.message + ")" : "")
                );
                throw ((o.context = s), o);
              }
              var c = i[e];
              if (void 0 === c) return !1;
              if ("function" == typeof c) n(c, this, t);
              else {
                var d = c.length,
                  l = m(c, d);
                for (r = 0; r < d; ++r) n(l[r], this, t);
              }
              return !0;
            }),
            (i.prototype.addListener = function (e, t) {
              return d(this, e, t, !1);
            }),
            (i.prototype.on = i.prototype.addListener),
            (i.prototype.prependListener = function (e, t) {
              return d(this, e, t, !0);
            }),
            (i.prototype.once = function (e, t) {
              return o(t), this.on(e, u(this, e, t)), this;
            }),
            (i.prototype.prependOnceListener = function (e, t) {
              return o(t), this.prependListener(e, u(this, e, t)), this;
            }),
            (i.prototype.removeListener = function (e, t) {
              var r, n, a, i, s;
              if ((o(t), void 0 === (n = this._events))) return this;
              if (void 0 === (r = n[e])) return this;
              if (r === t || r.listener === t)
                0 == --this._eventsCount
                  ? (this._events = Object.create(null))
                  : (delete n[e],
                    n.removeListener &&
                      this.emit("removeListener", e, r.listener || t));
              else if ("function" != typeof r) {
                for (a = -1, i = r.length - 1; i >= 0; i--)
                  if (r[i] === t || r[i].listener === t) {
                    (s = r[i].listener), (a = i);
                    break;
                  }
                if (a < 0) return this;
                0 === a
                  ? r.shift()
                  : (function (e, t) {
                      for (; t + 1 < e.length; t++) e[t] = e[t + 1];
                      e.pop();
                    })(r, a),
                  1 === r.length && (n[e] = r[0]),
                  void 0 !== n.removeListener &&
                    this.emit("removeListener", e, s || t);
              }
              return this;
            }),
            (i.prototype.off = i.prototype.removeListener),
            (i.prototype.removeAllListeners = function (e) {
              var t, r, n;
              if (void 0 === (r = this._events)) return this;
              if (void 0 === r.removeListener)
                return (
                  0 === arguments.length
                    ? ((this._events = Object.create(null)),
                      (this._eventsCount = 0))
                    : void 0 !== r[e] &&
                      (0 == --this._eventsCount
                        ? (this._events = Object.create(null))
                        : delete r[e]),
                  this
                );
              if (0 === arguments.length) {
                var a,
                  i = Object.keys(r);
                for (n = 0; n < i.length; ++n)
                  "removeListener" !== (a = i[n]) && this.removeAllListeners(a);
                return (
                  this.removeAllListeners("removeListener"),
                  (this._events = Object.create(null)),
                  (this._eventsCount = 0),
                  this
                );
              }
              if ("function" == typeof (t = r[e])) this.removeListener(e, t);
              else if (void 0 !== t)
                for (n = t.length - 1; n >= 0; n--)
                  this.removeListener(e, t[n]);
              return this;
            }),
            (i.prototype.listeners = function (e) {
              return p(this, e, !0);
            }),
            (i.prototype.rawListeners = function (e) {
              return p(this, e, !1);
            }),
            (i.listenerCount = function (e, t) {
              return "function" == typeof e.listenerCount
                ? e.listenerCount(t)
                : h.call(e, t);
            }),
            (i.prototype.listenerCount = h),
            (i.prototype.eventNames = function () {
              return this._eventsCount > 0 ? t(this._events) : [];
            });
        },
        7855: (e, t, r) => {
          const n = r(1227)("h264-profile-level-id");
          n.log = console.info.bind(console);
          (t.ProfileConstrainedBaseline = 1),
            (t.ProfileBaseline = 2),
            (t.ProfileMain = 3),
            (t.ProfileConstrainedHigh = 4),
            (t.ProfileHigh = 5);
          const a = 10;
          (t.Level1_b = 0),
            (t.Level1 = 10),
            (t.Level1_1 = 11),
            (t.Level1_2 = 12),
            (t.Level1_3 = 13),
            (t.Level2 = 20),
            (t.Level2_1 = 21),
            (t.Level2_2 = 22),
            (t.Level3 = 30),
            (t.Level3_1 = 31),
            (t.Level3_2 = 32),
            (t.Level4 = 40),
            (t.Level4_1 = 41),
            (t.Level4_2 = 42),
            (t.Level5 = 50),
            (t.Level5_1 = 51),
            (t.Level5_2 = 52);
          class i {
            constructor(e, t) {
              (this.profile = e), (this.level = t);
            }
          }
          t.ProfileLevelId = i;
          const s = new i(1, 31);
          class o {
            constructor(e) {
              (this._mask = ~l("x", e)), (this._maskedValue = l("1", e));
            }
            isMatch(e) {
              return this._maskedValue === (e & this._mask);
            }
          }
          class c {
            constructor(e, t, r) {
              (this.profile_idc = e),
                (this.profile_iop = t),
                (this.profile = r);
            }
          }
          const d = [
            new c(66, new o("x1xx0000"), 1),
            new c(77, new o("1xxx0000"), 1),
            new c(88, new o("11xx0000"), 1),
            new c(66, new o("x0xx0000"), 2),
            new c(88, new o("10xx0000"), 2),
            new c(77, new o("0x0x0000"), 3),
            new c(100, new o("00000000"), 5),
            new c(100, new o("00001100"), 4),
          ];
          function l(e, t) {
            return (
              ((t[0] === e) << 7) |
              ((t[1] === e) << 6) |
              ((t[2] === e) << 5) |
              ((t[3] === e) << 4) |
              ((t[4] === e) << 3) |
              ((t[5] === e) << 2) |
              ((t[6] === e) << 1) |
              ((t[7] === e) << 0)
            );
          }
          function u(e = {}) {
            const t = e["level-asymmetry-allowed"];
            return 1 === t || "1" === t;
          }
          (t.parseProfileLevelId = function (e) {
            if ("string" != typeof e || 6 !== e.length) return null;
            const t = parseInt(e, 16);
            if (0 === t) return null;
            const r = 255 & t,
              a = (t >> 8) & 255,
              s = (t >> 16) & 255;
            let o;
            switch (r) {
              case 11:
                o = 0 != (16 & a) ? 0 : 11;
                break;
              case 10:
              case 12:
              case 13:
              case 20:
              case 21:
              case 22:
              case 30:
              case 31:
              case 32:
              case 40:
              case 41:
              case 42:
              case 50:
              case 51:
              case 52:
                o = r;
                break;
              default:
                return (
                  n("parseProfileLevelId() | unrecognized level_idc:%s", r),
                  null
                );
            }
            for (const e of d)
              if (s === e.profile_idc && e.profile_iop.isMatch(a))
                return new i(e.profile, o);
            return (
              n(
                "parseProfileLevelId() | unrecognized profile_idc/profile_iop combination"
              ),
              null
            );
          }),
            (t.profileLevelIdToString = function (e) {
              if (0 == e.level)
                switch (e.profile) {
                  case 1:
                    return "42f00b";
                  case 2:
                    return "42100b";
                  case 3:
                    return "4d100b";
                  default:
                    return (
                      n(
                        "profileLevelIdToString() | Level 1_b not is allowed for profile:%s",
                        e.profile
                      ),
                      null
                    );
                }
              let t;
              switch (e.profile) {
                case 1:
                  t = "42e0";
                  break;
                case 2:
                  t = "4200";
                  break;
                case 3:
                  t = "4d00";
                  break;
                case 4:
                  t = "640c";
                  break;
                case 5:
                  t = "6400";
                  break;
                default:
                  return (
                    n(
                      "profileLevelIdToString() | unrecognized profile:%s",
                      e.profile
                    ),
                    null
                  );
              }
              let r = e.level.toString(16);
              return 1 === r.length && (r = `0${r}`), `${t}${r}`;
            }),
            (t.parseSdpProfileLevelId = function (e = {}) {
              const r = e["profile-level-id"];
              return r ? t.parseProfileLevelId(r) : s;
            }),
            (t.isSameProfile = function (e = {}, r = {}) {
              const n = t.parseSdpProfileLevelId(e),
                a = t.parseSdpProfileLevelId(r);
              return Boolean(n && a && n.profile === a.profile);
            }),
            (t.generateProfileLevelIdForAnswer = function (e = {}, r = {}) {
              if (!e["profile-level-id"] && !r["profile-level-id"])
                return (
                  n(
                    "generateProfileLevelIdForAnswer() | no profile-level-id in local and remote params"
                  ),
                  null
                );
              const s = t.parseSdpProfileLevelId(e),
                o = t.parseSdpProfileLevelId(r);
              if (!s) throw new TypeError("invalid local_profile_level_id");
              if (!o) throw new TypeError("invalid remote_profile_level_id");
              if (s.profile !== o.profile)
                throw new TypeError("H264 Profile mismatch");
              const c = u(e) && u(r),
                d = s.level,
                l = o.level,
                p = (function (e, t) {
                  return 0 === e
                    ? t !== a && 0 !== t
                    : 0 === t
                    ? e !== a
                    : e < t;
                })((h = d), (m = l))
                  ? h
                  : m;
              var h, m;
              const f = c ? d : p;
              return (
                n(
                  "generateProfileLevelIdForAnswer() | result: [profile:%s, level:%s]",
                  s.profile,
                  f
                ),
                t.profileLevelIdToString(new i(s.profile, f))
              );
            });
        },
        4301: (e, t, r) => {
          r(7147), (e.exports = self.fetch.bind(self));
        },
        6808: (e, t, r) => {
          var n, a;
          !(function (i) {
            if (
              (void 0 ===
                (a = "function" == typeof (n = i) ? n.call(t, r, t, e) : n) ||
                (e.exports = a),
              !0,
              (e.exports = i()),
              !!0)
            ) {
              var s = window.Cookies,
                o = (window.Cookies = i());
              o.noConflict = function () {
                return (window.Cookies = s), o;
              };
            }
          })(function () {
            function e() {
              for (var e = 0, t = {}; e < arguments.length; e++) {
                var r = arguments[e];
                for (var n in r) t[n] = r[n];
              }
              return t;
            }
            function t(e) {
              return e.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
            }
            return (function r(n) {
              function a() {}
              function i(t, r, i) {
                if ("undefined" != typeof document) {
                  "number" ==
                    typeof (i = e({ path: "/" }, a.defaults, i)).expires &&
                    (i.expires = new Date(1 * new Date() + 864e5 * i.expires)),
                    (i.expires = i.expires ? i.expires.toUTCString() : "");
                  try {
                    var s = JSON.stringify(r);
                    /^[\{\[]/.test(s) && (r = s);
                  } catch (e) {}
                  (r = n.write
                    ? n.write(r, t)
                    : encodeURIComponent(String(r)).replace(
                        /%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,
                        decodeURIComponent
                      )),
                    (t = encodeURIComponent(String(t))
                      .replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)
                      .replace(/[\(\)]/g, escape));
                  var o = "";
                  for (var c in i)
                    i[c] &&
                      ((o += "; " + c),
                      !0 !== i[c] && (o += "=" + i[c].split(";")[0]));
                  return (document.cookie = t + "=" + r + o);
                }
              }
              function s(e, r) {
                if ("undefined" != typeof document) {
                  for (
                    var a = {},
                      i = document.cookie ? document.cookie.split("; ") : [],
                      s = 0;
                    s < i.length;
                    s++
                  ) {
                    var o = i[s].split("="),
                      c = o.slice(1).join("=");
                    r || '"' !== c.charAt(0) || (c = c.slice(1, -1));
                    try {
                      var d = t(o[0]);
                      if (((c = (n.read || n)(c, d) || t(c)), r))
                        try {
                          c = JSON.parse(c);
                        } catch (e) {}
                      if (((a[d] = c), e === d)) break;
                    } catch (e) {}
                  }
                  return e ? a[e] : a;
                }
              }
              return (
                (a.set = i),
                (a.get = function (e) {
                  return s(e, !1);
                }),
                (a.getJSON = function (e) {
                  return s(e, !0);
                }),
                (a.remove = function (t, r) {
                  i(t, "", e(r, { expires: -1 }));
                }),
                (a.defaults = {}),
                (a.withConverter = r),
                a
              );
            })(function () {});
          });
        },
        773: (e, t, r) => {
          var n = "__lodash_hash_undefined__",
            a = "[object Function]",
            i = "[object GeneratorFunction]",
            s = /^\[object .+?Constructor\]$/,
            o = "object" == typeof r.g && r.g && r.g.Object === Object && r.g,
            c =
              "object" == typeof self && self && self.Object === Object && self,
            d = o || c || Function("return this")();
          var l,
            u = Array.prototype,
            p = Function.prototype,
            h = Object.prototype,
            m = d["__core-js_shared__"],
            f = (l = /[^.]+$/.exec((m && m.keys && m.keys.IE_PROTO) || ""))
              ? "Symbol(src)_1." + l
              : "",
            v = p.toString,
            _ = h.hasOwnProperty,
            g = h.toString,
            y = RegExp(
              "^" +
                v
                  .call(_)
                  .replace(/[\\^$.*+?()[\]{}|]/g, "\\$&")
                  .replace(
                    /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
                    "$1.*?"
                  ) +
                "$"
            ),
            b = u.splice,
            w = x(d, "Map"),
            S = x(Object, "create");
          function k(e) {
            var t = -1,
              r = e ? e.length : 0;
            for (this.clear(); ++t < r; ) {
              var n = e[t];
              this.set(n[0], n[1]);
            }
          }
          function R(e) {
            var t = -1,
              r = e ? e.length : 0;
            for (this.clear(); ++t < r; ) {
              var n = e[t];
              this.set(n[0], n[1]);
            }
          }
          function E(e) {
            var t = -1,
              r = e ? e.length : 0;
            for (this.clear(); ++t < r; ) {
              var n = e[t];
              this.set(n[0], n[1]);
            }
          }
          function T(e, t) {
            for (var r, n, a = e.length; a--; )
              if ((r = e[a][0]) === (n = t) || (r != r && n != n)) return a;
            return -1;
          }
          function P(e) {
            if (!D(e) || ((t = e), f && f in t)) return !1;
            var t,
              r =
                (function (e) {
                  var t = D(e) ? g.call(e) : "";
                  return t == a || t == i;
                })(e) ||
                (function (e) {
                  var t = !1;
                  if (null != e && "function" != typeof e.toString)
                    try {
                      t = !!(e + "");
                    } catch (e) {}
                  return t;
                })(e)
                  ? y
                  : s;
            return r.test(
              (function (e) {
                if (null != e) {
                  try {
                    return v.call(e);
                  } catch (e) {}
                  try {
                    return e + "";
                  } catch (e) {}
                }
                return "";
              })(e)
            );
          }
          function C(e, t) {
            var r,
              n,
              a = e.__data__;
            return (
              "string" == (n = typeof (r = t)) ||
              "number" == n ||
              "symbol" == n ||
              "boolean" == n
                ? "__proto__" !== r
                : null === r
            )
              ? a["string" == typeof t ? "string" : "hash"]
              : a.map;
          }
          function x(e, t) {
            var r = (function (e, t) {
              return null == e ? void 0 : e[t];
            })(e, t);
            return P(r) ? r : void 0;
          }
          function O(e, t) {
            if ("function" != typeof e || (t && "function" != typeof t))
              throw new TypeError("Expected a function");
            var r = function () {
              var n = arguments,
                a = t ? t.apply(this, n) : n[0],
                i = r.cache;
              if (i.has(a)) return i.get(a);
              var s = e.apply(this, n);
              return (r.cache = i.set(a, s)), s;
            };
            return (r.cache = new (O.Cache || E)()), r;
          }
          function D(e) {
            var t = typeof e;
            return !!e && ("object" == t || "function" == t);
          }
          (k.prototype.clear = function () {
            this.__data__ = S ? S(null) : {};
          }),
            (k.prototype.delete = function (e) {
              return this.has(e) && delete this.__data__[e];
            }),
            (k.prototype.get = function (e) {
              var t = this.__data__;
              if (S) {
                var r = t[e];
                return r === n ? void 0 : r;
              }
              return _.call(t, e) ? t[e] : void 0;
            }),
            (k.prototype.has = function (e) {
              var t = this.__data__;
              return S ? void 0 !== t[e] : _.call(t, e);
            }),
            (k.prototype.set = function (e, t) {
              return (this.__data__[e] = S && void 0 === t ? n : t), this;
            }),
            (R.prototype.clear = function () {
              this.__data__ = [];
            }),
            (R.prototype.delete = function (e) {
              var t = this.__data__,
                r = T(t, e);
              return (
                !(r < 0) && (r == t.length - 1 ? t.pop() : b.call(t, r, 1), !0)
              );
            }),
            (R.prototype.get = function (e) {
              var t = this.__data__,
                r = T(t, e);
              return r < 0 ? void 0 : t[r][1];
            }),
            (R.prototype.has = function (e) {
              return T(this.__data__, e) > -1;
            }),
            (R.prototype.set = function (e, t) {
              var r = this.__data__,
                n = T(r, e);
              return n < 0 ? r.push([e, t]) : (r[n][1] = t), this;
            }),
            (E.prototype.clear = function () {
              this.__data__ = {
                hash: new k(),
                map: new (w || R)(),
                string: new k(),
              };
            }),
            (E.prototype.delete = function (e) {
              return C(this, e).delete(e);
            }),
            (E.prototype.get = function (e) {
              return C(this, e).get(e);
            }),
            (E.prototype.has = function (e) {
              return C(this, e).has(e);
            }),
            (E.prototype.set = function (e, t) {
              return C(this, e).set(e, t), this;
            }),
            (O.Cache = E),
            (e.exports = O);
        },
        9514: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Consumer = void 0);
          const n = r(8562),
            a = r(4493),
            i = r(9992),
            s = new n.Logger("Consumer");
          class o extends a.EnhancedEventEmitter {
            constructor({
              id: e,
              localId: t,
              producerId: r,
              rtpReceiver: n,
              track: i,
              rtpParameters: o,
              appData: c,
            }) {
              super(),
                (this._closed = !1),
                (this._observer = new a.EnhancedEventEmitter()),
                s.debug("constructor()"),
                (this._id = e),
                (this._localId = t),
                (this._producerId = r),
                (this._rtpReceiver = n),
                (this._track = i),
                (this._rtpParameters = o),
                (this._paused = !i.enabled),
                (this._appData = c),
                (this._onTrackEnded = this._onTrackEnded.bind(this)),
                this._handleTrack();
            }
            get id() {
              return this._id;
            }
            get localId() {
              return this._localId;
            }
            get producerId() {
              return this._producerId;
            }
            get closed() {
              return this._closed;
            }
            get kind() {
              return this._track.kind;
            }
            get rtpReceiver() {
              return this._rtpReceiver;
            }
            get track() {
              return this._track;
            }
            get rtpParameters() {
              return this._rtpParameters;
            }
            get paused() {
              return this._paused;
            }
            get appData() {
              return this._appData;
            }
            set appData(e) {
              throw new Error("cannot override appData object");
            }
            get observer() {
              return this._observer;
            }
            close() {
              this._closed ||
                (s.debug("close()"),
                (this._closed = !0),
                this._destroyTrack(),
                this.emit("@close"),
                this._observer.safeEmit("close"));
            }
            transportClosed() {
              this._closed ||
                (s.debug("transportClosed()"),
                (this._closed = !0),
                this._destroyTrack(),
                this.safeEmit("transportclose"),
                this._observer.safeEmit("close"));
            }
            async getStats() {
              if (this._closed) throw new i.InvalidStateError("closed");
              return this.safeEmitAsPromise("@getstats");
            }
            pause() {
              s.debug("pause()"),
                this._closed
                  ? s.error("pause() | Consumer closed")
                  : ((this._paused = !0),
                    (this._track.enabled = !1),
                    this.emit("@pause"),
                    this._observer.safeEmit("pause"));
            }
            resume() {
              s.debug("resume()"),
                this._closed
                  ? s.error("resume() | Consumer closed")
                  : ((this._paused = !1),
                    (this._track.enabled = !0),
                    this.emit("@resume"),
                    this._observer.safeEmit("resume"));
            }
            _onTrackEnded() {
              s.debug('track "ended" event'),
                this.safeEmit("trackended"),
                this._observer.safeEmit("trackended");
            }
            _handleTrack() {
              this._track.addEventListener("ended", this._onTrackEnded);
            }
            _destroyTrack() {
              try {
                this._track.removeEventListener("ended", this._onTrackEnded),
                  this._track.stop();
              } catch (e) {}
            }
          }
          t.Consumer = o;
        },
        1623: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.DataConsumer = void 0);
          const n = r(8562),
            a = r(4493),
            i = new n.Logger("DataConsumer");
          class s extends a.EnhancedEventEmitter {
            constructor({
              id: e,
              dataProducerId: t,
              dataChannel: r,
              sctpStreamParameters: n,
              appData: s,
            }) {
              super(),
                (this._closed = !1),
                (this._observer = new a.EnhancedEventEmitter()),
                i.debug("constructor()"),
                (this._id = e),
                (this._dataProducerId = t),
                (this._dataChannel = r),
                (this._sctpStreamParameters = n),
                (this._appData = s),
                this._handleDataChannel();
            }
            get id() {
              return this._id;
            }
            get dataProducerId() {
              return this._dataProducerId;
            }
            get closed() {
              return this._closed;
            }
            get sctpStreamParameters() {
              return this._sctpStreamParameters;
            }
            get readyState() {
              return this._dataChannel.readyState;
            }
            get label() {
              return this._dataChannel.label;
            }
            get protocol() {
              return this._dataChannel.protocol;
            }
            get binaryType() {
              return this._dataChannel.binaryType;
            }
            set binaryType(e) {
              this._dataChannel.binaryType = e;
            }
            get appData() {
              return this._appData;
            }
            set appData(e) {
              throw new Error("cannot override appData object");
            }
            get observer() {
              return this._observer;
            }
            close() {
              this._closed ||
                (i.debug("close()"),
                (this._closed = !0),
                this._dataChannel.close(),
                this.emit("@close"),
                this._observer.safeEmit("close"));
            }
            transportClosed() {
              this._closed ||
                (i.debug("transportClosed()"),
                (this._closed = !0),
                this._dataChannel.close(),
                this.safeEmit("transportclose"),
                this._observer.safeEmit("close"));
            }
            _handleDataChannel() {
              this._dataChannel.addEventListener("open", () => {
                this._closed ||
                  (i.debug('DataChannel "open" event'), this.safeEmit("open"));
              }),
                this._dataChannel.addEventListener("error", (e) => {
                  if (this._closed) return;
                  let { error: t } = e;
                  t || (t = new Error("unknown DataChannel error")),
                    "sctp-failure" === t.errorDetail
                      ? i.error(
                          "DataChannel SCTP error [sctpCauseCode:%s]: %s",
                          t.sctpCauseCode,
                          t.message
                        )
                      : i.error('DataChannel "error" event: %o', t),
                    this.safeEmit("error", t);
                }),
                this._dataChannel.addEventListener("close", () => {
                  this._closed ||
                    (i.warn('DataChannel "close" event'),
                    (this._closed = !0),
                    this.emit("@close"),
                    this.safeEmit("close"));
                }),
                this._dataChannel.addEventListener("message", (e) => {
                  this._closed || this.safeEmit("message", e.data);
                });
            }
          }
          t.DataConsumer = s;
        },
        5504: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.DataProducer = void 0);
          const n = r(8562),
            a = r(4493),
            i = r(9992),
            s = new n.Logger("DataProducer");
          class o extends a.EnhancedEventEmitter {
            constructor({
              id: e,
              dataChannel: t,
              sctpStreamParameters: r,
              appData: n,
            }) {
              super(),
                (this._closed = !1),
                (this._observer = new a.EnhancedEventEmitter()),
                s.debug("constructor()"),
                (this._id = e),
                (this._dataChannel = t),
                (this._sctpStreamParameters = r),
                (this._appData = n),
                this._handleDataChannel();
            }
            get id() {
              return this._id;
            }
            get closed() {
              return this._closed;
            }
            get sctpStreamParameters() {
              return this._sctpStreamParameters;
            }
            get readyState() {
              return this._dataChannel.readyState;
            }
            get label() {
              return this._dataChannel.label;
            }
            get protocol() {
              return this._dataChannel.protocol;
            }
            get bufferedAmount() {
              return this._dataChannel.bufferedAmount;
            }
            get bufferedAmountLowThreshold() {
              return this._dataChannel.bufferedAmountLowThreshold;
            }
            set bufferedAmountLowThreshold(e) {
              this._dataChannel.bufferedAmountLowThreshold = e;
            }
            get appData() {
              return this._appData;
            }
            set appData(e) {
              throw new Error("cannot override appData object");
            }
            get observer() {
              return this._observer;
            }
            close() {
              this._closed ||
                (s.debug("close()"),
                (this._closed = !0),
                this._dataChannel.close(),
                this.emit("@close"),
                this._observer.safeEmit("close"));
            }
            transportClosed() {
              this._closed ||
                (s.debug("transportClosed()"),
                (this._closed = !0),
                this._dataChannel.close(),
                this.safeEmit("transportclose"),
                this._observer.safeEmit("close"));
            }
            send(e) {
              if ((s.debug("send()"), this._closed))
                throw new i.InvalidStateError("closed");
              this._dataChannel.send(e);
            }
            _handleDataChannel() {
              this._dataChannel.addEventListener("open", () => {
                this._closed ||
                  (s.debug('DataChannel "open" event'), this.safeEmit("open"));
              }),
                this._dataChannel.addEventListener("error", (e) => {
                  if (this._closed) return;
                  let { error: t } = e;
                  t || (t = new Error("unknown DataChannel error")),
                    "sctp-failure" === t.errorDetail
                      ? s.error(
                          "DataChannel SCTP error [sctpCauseCode:%s]: %s",
                          t.sctpCauseCode,
                          t.message
                        )
                      : s.error('DataChannel "error" event: %o', t),
                    this.safeEmit("error", t);
                }),
                this._dataChannel.addEventListener("close", () => {
                  this._closed ||
                    (s.warn('DataChannel "close" event'),
                    (this._closed = !0),
                    this.emit("@close"),
                    this.safeEmit("close"));
                }),
                this._dataChannel.addEventListener("message", () => {
                  this._closed ||
                    s.warn(
                      'DataChannel "message" event in a DataProducer, message discarded'
                    );
                }),
                this._dataChannel.addEventListener("bufferedamountlow", () => {
                  this._closed || this.safeEmit("bufferedamountlow");
                });
            }
          }
          t.DataProducer = o;
        },
        3120: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              },
            s =
              (this && this.__importDefault) ||
              function (e) {
                return e && e.__esModule ? e : { default: e };
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Device = t.detectDevice = void 0);
          const o = s(r(1206)),
            c = r(8562),
            d = r(4493),
            l = r(9992),
            u = i(r(3347)),
            p = i(r(5280)),
            h = r(5202),
            m = r(6656),
            f = r(5372),
            v = r(5697),
            _ = r(564),
            g = r(1419),
            y = r(9862),
            b = r(2205),
            w = r(7392),
            S = r(4770),
            k = new c.Logger("Device");
          function R() {
            if (
              "object" == typeof navigator &&
              "ReactNative" === navigator.product
            )
              return "undefined" == typeof RTCPeerConnection
                ? void k.warn(
                    "this._detectDevice() | unsupported ReactNative without RTCPeerConnection"
                  )
                : (k.debug("this._detectDevice() | ReactNative handler chosen"),
                  "ReactNative");
            if (
              "object" != typeof navigator ||
              "string" != typeof navigator.userAgent
            )
              k.warn("this._detectDevice() | unknown device");
            else {
              const e = navigator.userAgent,
                t = o.default.getParser(e),
                r = t.getEngine();
              if (
                t.satisfies({
                  chrome: ">=74",
                  chromium: ">=74",
                  "microsoft edge": ">=88",
                })
              )
                return "Chrome74";
              if (t.satisfies({ chrome: ">=70", chromium: ">=70" }))
                return "Chrome70";
              if (t.satisfies({ chrome: ">=67", chromium: ">=67" }))
                return "Chrome67";
              if (t.satisfies({ chrome: ">=55", chromium: ">=55" }))
                return "Chrome55";
              if (t.satisfies({ firefox: ">=60" })) return "Firefox60";
              if (t.satisfies({ ios: { OS: ">=14.3", firefox: ">=30.0" } }))
                return "Safari12";
              if (
                t.satisfies({ safari: ">=12.0" }) &&
                "undefined" != typeof RTCRtpTransceiver &&
                RTCRtpTransceiver.prototype.hasOwnProperty("currentDirection")
              )
                return "Safari12";
              if (t.satisfies({ safari: ">=11" })) return "Safari11";
              if (
                t.satisfies({ "microsoft edge": ">=11" }) &&
                t.satisfies({ "microsoft edge": "<=18" })
              )
                return "Edge11";
              if (r.name && "blink" === r.name.toLowerCase()) {
                const t = e.match(/(?:(?:Chrome|Chromium))[ /](\w+)/i);
                if (t) {
                  const e = Number(t[1]);
                  return e >= 74
                    ? "Chrome74"
                    : e >= 70
                    ? "Chrome70"
                    : e >= 67
                    ? "Chrome67"
                    : "Chrome55";
                }
                return "Chrome74";
              }
              k.warn(
                "this._detectDevice() | browser not supported [name:%s, version:%s]",
                t.getBrowserName(),
                t.getBrowserVersion()
              );
            }
          }
          t.detectDevice = R;
          t.Device = class {
            constructor({
              handlerName: e,
              handlerFactory: t,
              Handler: r,
            } = {}) {
              if (
                ((this._loaded = !1),
                (this._observer = new d.EnhancedEventEmitter()),
                k.debug("constructor()"),
                r)
              ) {
                if (
                  (k.warn(
                    "constructor() | Handler option is DEPRECATED, use handlerName or handlerFactory instead"
                  ),
                  "string" != typeof r)
                )
                  throw new TypeError(
                    "non string Handler option no longer supported, use handlerFactory instead"
                  );
                e = r;
              }
              if (e && t)
                throw new TypeError(
                  "just one of handlerName or handlerInterface can be given"
                );
              if (t) this._handlerFactory = t;
              else {
                if (e) k.debug("constructor() | handler given: %s", e);
                else {
                  if (!(e = R()))
                    throw new l.UnsupportedError("device not supported");
                  k.debug("constructor() | detected handler: %s", e);
                }
                switch (e) {
                  case "Chrome74":
                    this._handlerFactory = m.Chrome74.createFactory();
                    break;
                  case "Chrome70":
                    this._handlerFactory = f.Chrome70.createFactory();
                    break;
                  case "Chrome67":
                    this._handlerFactory = v.Chrome67.createFactory();
                    break;
                  case "Chrome55":
                    this._handlerFactory = _.Chrome55.createFactory();
                    break;
                  case "Firefox60":
                    this._handlerFactory = g.Firefox60.createFactory();
                    break;
                  case "Safari12":
                    this._handlerFactory = y.Safari12.createFactory();
                    break;
                  case "Safari11":
                    this._handlerFactory = b.Safari11.createFactory();
                    break;
                  case "Edge11":
                    this._handlerFactory = w.Edge11.createFactory();
                    break;
                  case "ReactNative":
                    this._handlerFactory = S.ReactNative.createFactory();
                    break;
                  default:
                    throw new TypeError(`unknown handlerName "${e}"`);
                }
              }
              const n = this._handlerFactory();
              (this._handlerName = n.name),
                n.close(),
                (this._extendedRtpCapabilities = void 0),
                (this._recvRtpCapabilities = void 0),
                (this._canProduceByKind = { audio: !1, video: !1 }),
                (this._sctpCapabilities = void 0);
            }
            get handlerName() {
              return this._handlerName;
            }
            get loaded() {
              return this._loaded;
            }
            get rtpCapabilities() {
              if (!this._loaded) throw new l.InvalidStateError("not loaded");
              return this._recvRtpCapabilities;
            }
            get sctpCapabilities() {
              if (!this._loaded) throw new l.InvalidStateError("not loaded");
              return this._sctpCapabilities;
            }
            get observer() {
              return this._observer;
            }
            async load({ routerRtpCapabilities: e }) {
              let t;
              k.debug("load() [routerRtpCapabilities:%o]", e),
                (e = u.clone(e, void 0));
              try {
                if (this._loaded)
                  throw new l.InvalidStateError("already loaded");
                p.validateRtpCapabilities(e), (t = this._handlerFactory());
                const r = await t.getNativeRtpCapabilities();
                k.debug("load() | got native RTP capabilities:%o", r),
                  p.validateRtpCapabilities(r),
                  (this._extendedRtpCapabilities = p.getExtendedRtpCapabilities(
                    r,
                    e
                  )),
                  k.debug(
                    "load() | got extended RTP capabilities:%o",
                    this._extendedRtpCapabilities
                  ),
                  (this._canProduceByKind.audio = p.canSend(
                    "audio",
                    this._extendedRtpCapabilities
                  )),
                  (this._canProduceByKind.video = p.canSend(
                    "video",
                    this._extendedRtpCapabilities
                  )),
                  (this._recvRtpCapabilities = p.getRecvRtpCapabilities(
                    this._extendedRtpCapabilities
                  )),
                  p.validateRtpCapabilities(this._recvRtpCapabilities),
                  k.debug(
                    "load() | got receiving RTP capabilities:%o",
                    this._recvRtpCapabilities
                  ),
                  (this._sctpCapabilities =
                    await t.getNativeSctpCapabilities()),
                  k.debug(
                    "load() | got native SCTP capabilities:%o",
                    this._sctpCapabilities
                  ),
                  p.validateSctpCapabilities(this._sctpCapabilities),
                  k.debug("load() succeeded"),
                  (this._loaded = !0),
                  t.close();
              } catch (e) {
                throw (t && t.close(), e);
              }
            }
            canProduce(e) {
              if (!this._loaded) throw new l.InvalidStateError("not loaded");
              if ("audio" !== e && "video" !== e)
                throw new TypeError(`invalid kind "${e}"`);
              return this._canProduceByKind[e];
            }
            createSendTransport({
              id: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: a,
              iceServers: i,
              iceTransportPolicy: s,
              additionalSettings: o,
              proprietaryConstraints: c,
              appData: d = {},
            }) {
              return (
                k.debug("createSendTransport()"),
                this._createTransport({
                  direction: "send",
                  id: e,
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: a,
                  iceServers: i,
                  iceTransportPolicy: s,
                  additionalSettings: o,
                  proprietaryConstraints: c,
                  appData: d,
                })
              );
            }
            createRecvTransport({
              id: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: a,
              iceServers: i,
              iceTransportPolicy: s,
              additionalSettings: o,
              proprietaryConstraints: c,
              appData: d = {},
            }) {
              return (
                k.debug("createRecvTransport()"),
                this._createTransport({
                  direction: "recv",
                  id: e,
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: a,
                  iceServers: i,
                  iceTransportPolicy: s,
                  additionalSettings: o,
                  proprietaryConstraints: c,
                  appData: d,
                })
              );
            }
            _createTransport({
              direction: e,
              id: t,
              iceParameters: r,
              iceCandidates: n,
              dtlsParameters: a,
              sctpParameters: i,
              iceServers: s,
              iceTransportPolicy: o,
              additionalSettings: c,
              proprietaryConstraints: d,
              appData: u = {},
            }) {
              if (!this._loaded) throw new l.InvalidStateError("not loaded");
              if ("string" != typeof t) throw new TypeError("missing id");
              if ("object" != typeof r)
                throw new TypeError("missing iceParameters");
              if (!Array.isArray(n))
                throw new TypeError("missing iceCandidates");
              if ("object" != typeof a)
                throw new TypeError("missing dtlsParameters");
              if (i && "object" != typeof i)
                throw new TypeError("wrong sctpParameters");
              if (u && "object" != typeof u)
                throw new TypeError("if given, appData must be an object");
              const p = new h.Transport({
                direction: e,
                id: t,
                iceParameters: r,
                iceCandidates: n,
                dtlsParameters: a,
                sctpParameters: i,
                iceServers: s,
                iceTransportPolicy: o,
                additionalSettings: c,
                proprietaryConstraints: d,
                appData: u,
                handlerFactory: this._handlerFactory,
                extendedRtpCapabilities: this._extendedRtpCapabilities,
                canProduceByKind: this._canProduceByKind,
              });
              return this._observer.safeEmit("newtransport", p), p;
            }
          };
        },
        4493: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.EnhancedEventEmitter = void 0);
          const n = r(7187),
            a = new (r(8562).Logger)("EnhancedEventEmitter");
          class i extends n.EventEmitter {
            constructor() {
              super(), this.setMaxListeners(1 / 0);
            }
            safeEmit(e, ...t) {
              const r = this.listenerCount(e);
              try {
                return this.emit(e, ...t);
              } catch (t) {
                return (
                  a.error(
                    "safeEmit() | event listener threw an error [event:%s]:%o",
                    e,
                    t
                  ),
                  Boolean(r)
                );
              }
            }
            async safeEmitAsPromise(e, ...t) {
              return new Promise((r, n) => {
                try {
                  this.emit(e, ...t, r, n);
                } catch (t) {
                  a.error(
                    "safeEmitAsPromise() | event listener threw an error [event:%s]:%o",
                    e,
                    t
                  ),
                    n(t);
                }
              });
            }
          }
          t.EnhancedEventEmitter = i;
        },
        8562: function (e, t, r) {
          "use strict";
          var n =
            (this && this.__importDefault) ||
            function (e) {
              return e && e.__esModule ? e : { default: e };
            };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Logger = void 0);
          const a = n(r(1227)),
            i = "mediasoup-client";
          t.Logger = class {
            constructor(e) {
              e
                ? ((this._debug = (0, a.default)(`${i}:${e}`)),
                  (this._warn = (0, a.default)(`${i}:WARN:${e}`)),
                  (this._error = (0, a.default)(`${i}:ERROR:${e}`)))
                : ((this._debug = (0, a.default)(i)),
                  (this._warn = (0, a.default)(`${i}:WARN`)),
                  (this._error = (0, a.default)(`${i}:ERROR`))),
                (this._debug.log = console.info.bind(console)),
                (this._warn.log = console.warn.bind(console)),
                (this._error.log = console.error.bind(console));
            }
            get debug() {
              return this._debug;
            }
            get warn() {
              return this._warn;
            }
            get error() {
              return this._error;
            }
          };
        },
        6569: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Producer = void 0);
          const n = r(8562),
            a = r(4493),
            i = r(9992),
            s = new n.Logger("Producer");
          class o extends a.EnhancedEventEmitter {
            constructor({
              id: e,
              localId: t,
              rtpSender: r,
              track: n,
              rtpParameters: i,
              stopTracks: o,
              disableTrackOnPause: c,
              zeroRtpOnPause: d,
              appData: l,
            }) {
              super(),
                (this._closed = !1),
                (this._observer = new a.EnhancedEventEmitter()),
                s.debug("constructor()"),
                (this._id = e),
                (this._localId = t),
                (this._rtpSender = r),
                (this._track = n),
                (this._kind = n.kind),
                (this._rtpParameters = i),
                (this._paused = !!c && !n.enabled),
                (this._maxSpatialLayer = void 0),
                (this._stopTracks = o),
                (this._disableTrackOnPause = c),
                (this._zeroRtpOnPause = d),
                (this._appData = l),
                (this._onTrackEnded = this._onTrackEnded.bind(this)),
                this._handleTrack();
            }
            get id() {
              return this._id;
            }
            get localId() {
              return this._localId;
            }
            get closed() {
              return this._closed;
            }
            get kind() {
              return this._kind;
            }
            get rtpSender() {
              return this._rtpSender;
            }
            get track() {
              return this._track;
            }
            get rtpParameters() {
              return this._rtpParameters;
            }
            get paused() {
              return this._paused;
            }
            get maxSpatialLayer() {
              return this._maxSpatialLayer;
            }
            get appData() {
              return this._appData;
            }
            set appData(e) {
              throw new Error("cannot override appData object");
            }
            get observer() {
              return this._observer;
            }
            close() {
              this._closed ||
                (s.debug("close()"),
                (this._closed = !0),
                this._destroyTrack(),
                this.emit("@close"),
                this._observer.safeEmit("close"));
            }
            transportClosed() {
              this._closed ||
                (s.debug("transportClosed()"),
                (this._closed = !0),
                this._destroyTrack(),
                this.safeEmit("transportclose"),
                this._observer.safeEmit("close"));
            }
            async getStats() {
              if (this._closed) throw new i.InvalidStateError("closed");
              return this.safeEmitAsPromise("@getstats");
            }
            pause() {
              s.debug("pause()"),
                this._closed
                  ? s.error("pause() | Producer closed")
                  : ((this._paused = !0),
                    this._track &&
                      this._disableTrackOnPause &&
                      (this._track.enabled = !1),
                    this._zeroRtpOnPause &&
                      this.safeEmitAsPromise("@replacetrack", null).catch(
                        () => {}
                      ),
                    this._observer.safeEmit("pause"));
            }
            resume() {
              s.debug("resume()"),
                this._closed
                  ? s.error("resume() | Producer closed")
                  : ((this._paused = !1),
                    this._track &&
                      this._disableTrackOnPause &&
                      (this._track.enabled = !0),
                    this._zeroRtpOnPause &&
                      this.safeEmitAsPromise(
                        "@replacetrack",
                        this._track
                      ).catch(() => {}),
                    this._observer.safeEmit("resume"));
            }
            async replaceTrack({ track: e }) {
              if ((s.debug("replaceTrack() [track:%o]", e), this._closed)) {
                if (e && this._stopTracks)
                  try {
                    e.stop();
                  } catch (e) {}
                throw new i.InvalidStateError("closed");
              }
              if (e && "ended" === e.readyState)
                throw new i.InvalidStateError("track ended");
              e !== this._track
                ? ((this._zeroRtpOnPause && this._paused) ||
                    (await this.safeEmitAsPromise("@replacetrack", e)),
                  this._destroyTrack(),
                  (this._track = e),
                  this._track &&
                    this._disableTrackOnPause &&
                    (this._paused
                      ? this._paused && (this._track.enabled = !1)
                      : (this._track.enabled = !0)),
                  this._handleTrack())
                : s.debug("replaceTrack() | same track, ignored");
            }
            async setMaxSpatialLayer(e) {
              if (this._closed) throw new i.InvalidStateError("closed");
              if ("video" !== this._kind)
                throw new i.UnsupportedError("not a video Producer");
              if ("number" != typeof e)
                throw new TypeError("invalid spatialLayer");
              e !== this._maxSpatialLayer &&
                (await this.safeEmitAsPromise("@setmaxspatiallayer", e),
                (this._maxSpatialLayer = e));
            }
            async setRtpEncodingParameters(e) {
              if (this._closed) throw new i.InvalidStateError("closed");
              if ("object" != typeof e) throw new TypeError("invalid params");
              await this.safeEmitAsPromise("@setrtpencodingparameters", e);
            }
            _onTrackEnded() {
              s.debug('track "ended" event'),
                this.safeEmit("trackended"),
                this._observer.safeEmit("trackended");
            }
            _handleTrack() {
              this._track &&
                this._track.addEventListener("ended", this._onTrackEnded);
            }
            _destroyTrack() {
              if (this._track)
                try {
                  this._track.removeEventListener("ended", this._onTrackEnded),
                    this._stopTracks && this._track.stop();
                } catch (e) {}
            }
          }
          t.Producer = o;
        },
        4879: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 });
        },
        7669: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 });
        },
        5202: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Transport = void 0);
          const s = r(2186),
            o = r(8562),
            c = r(4493),
            d = r(9992),
            l = i(r(3347)),
            u = i(r(5280)),
            p = r(6569),
            h = r(9514),
            m = r(5504),
            f = r(1623),
            v = new o.Logger("Transport");
          class _ extends c.EnhancedEventEmitter {
            constructor({
              direction: e,
              id: t,
              iceParameters: r,
              iceCandidates: n,
              dtlsParameters: a,
              sctpParameters: i,
              iceServers: o,
              iceTransportPolicy: u,
              additionalSettings: p,
              proprietaryConstraints: h,
              appData: m,
              handlerFactory: f,
              extendedRtpCapabilities: _,
              canProduceByKind: g,
            }) {
              super(),
                (this._closed = !1),
                (this._connectionState = "new"),
                (this._producers = new Map()),
                (this._consumers = new Map()),
                (this._dataProducers = new Map()),
                (this._dataConsumers = new Map()),
                (this._probatorConsumerCreated = !1),
                (this._awaitQueue = new s.AwaitQueue({
                  ClosedErrorClass: d.InvalidStateError,
                })),
                (this._observer = new c.EnhancedEventEmitter()),
                v.debug("constructor() [id:%s, direction:%s]", t, e),
                (this._id = t),
                (this._direction = e),
                (this._extendedRtpCapabilities = _),
                (this._canProduceByKind = g),
                (this._maxSctpMessageSize = i ? i.maxMessageSize : null),
                delete (p = l.clone(p, {})).iceServers,
                delete p.iceTransportPolicy,
                delete p.bundlePolicy,
                delete p.rtcpMuxPolicy,
                delete p.sdpSemantics,
                (this._handler = f()),
                this._handler.run({
                  direction: e,
                  iceParameters: r,
                  iceCandidates: n,
                  dtlsParameters: a,
                  sctpParameters: i,
                  iceServers: o,
                  iceTransportPolicy: u,
                  additionalSettings: p,
                  proprietaryConstraints: h,
                  extendedRtpCapabilities: _,
                }),
                (this._appData = m),
                this._handleHandler();
            }
            get id() {
              return this._id;
            }
            get closed() {
              return this._closed;
            }
            get direction() {
              return this._direction;
            }
            get handler() {
              return this._handler;
            }
            get connectionState() {
              return this._connectionState;
            }
            get appData() {
              return this._appData;
            }
            set appData(e) {
              throw new Error("cannot override appData object");
            }
            get observer() {
              return this._observer;
            }
            close() {
              if (!this._closed) {
                v.debug("close()"),
                  (this._closed = !0),
                  this._awaitQueue.close(),
                  this._handler.close();
                for (const e of this._producers.values()) e.transportClosed();
                this._producers.clear();
                for (const e of this._consumers.values()) e.transportClosed();
                this._consumers.clear();
                for (const e of this._dataProducers.values())
                  e.transportClosed();
                this._dataProducers.clear();
                for (const e of this._dataConsumers.values())
                  e.transportClosed();
                this._dataConsumers.clear(), this._observer.safeEmit("close");
              }
            }
            async getStats() {
              if (this._closed) throw new d.InvalidStateError("closed");
              return this._handler.getTransportStats();
            }
            async restartIce({ iceParameters: e }) {
              if ((v.debug("restartIce()"), this._closed))
                throw new d.InvalidStateError("closed");
              if (!e) throw new TypeError("missing iceParameters");
              return this._awaitQueue.push(
                async () => this._handler.restartIce(e),
                "transport.restartIce()"
              );
            }
            async updateIceServers({ iceServers: e } = {}) {
              if ((v.debug("updateIceServers()"), this._closed))
                throw new d.InvalidStateError("closed");
              if (!Array.isArray(e)) throw new TypeError("missing iceServers");
              return this._awaitQueue.push(
                async () => this._handler.updateIceServers(e),
                "transport.updateIceServers()"
              );
            }
            async produce({
              track: e,
              encodings: t,
              codecOptions: r,
              codec: n,
              stopTracks: a = !0,
              disableTrackOnPause: i = !0,
              zeroRtpOnPause: s = !1,
              appData: o = {},
            } = {}) {
              if ((v.debug("produce() [track:%o]", e), !e))
                throw new TypeError("missing track");
              if ("send" !== this._direction)
                throw new d.UnsupportedError("not a sending Transport");
              if (!this._canProduceByKind[e.kind])
                throw new d.UnsupportedError(`cannot produce ${e.kind}`);
              if ("ended" === e.readyState)
                throw new d.InvalidStateError("track ended");
              if (
                0 === this.listenerCount("connect") &&
                "new" === this._connectionState
              )
                throw new TypeError(
                  'no "connect" listener set into this transport'
                );
              if (0 === this.listenerCount("produce"))
                throw new TypeError(
                  'no "produce" listener set into this transport'
                );
              if (o && "object" != typeof o)
                throw new TypeError("if given, appData must be an object");
              return this._awaitQueue
                .push(async () => {
                  let c;
                  if (t && !Array.isArray(t))
                    throw TypeError("encodings must be an array");
                  t && 0 === t.length
                    ? (c = void 0)
                    : t &&
                      (c = t.map((e) => {
                        const t = { active: !0 };
                        return (
                          !1 === e.active && (t.active = !1),
                          "boolean" == typeof e.dtx && (t.dtx = e.dtx),
                          "string" == typeof e.scalabilityMode &&
                            (t.scalabilityMode = e.scalabilityMode),
                          "number" == typeof e.scaleResolutionDownBy &&
                            (t.scaleResolutionDownBy = e.scaleResolutionDownBy),
                          "number" == typeof e.maxBitrate &&
                            (t.maxBitrate = e.maxBitrate),
                          "number" == typeof e.maxFramerate &&
                            (t.maxFramerate = e.maxFramerate),
                          "boolean" == typeof e.adaptivePtime &&
                            (t.adaptivePtime = e.adaptivePtime),
                          "string" == typeof e.priority &&
                            (t.priority = e.priority),
                          "string" == typeof e.networkPriority &&
                            (t.networkPriority = e.networkPriority),
                          t
                        );
                      }));
                  const {
                    localId: d,
                    rtpParameters: l,
                    rtpSender: h,
                  } = await this._handler.send({
                    track: e,
                    encodings: c,
                    codecOptions: r,
                    codec: n,
                  });
                  try {
                    u.validateRtpParameters(l);
                    const { id: t } = await this.safeEmitAsPromise("produce", {
                        kind: e.kind,
                        rtpParameters: l,
                        appData: o,
                      }),
                      r = new p.Producer({
                        id: t,
                        localId: d,
                        rtpSender: h,
                        track: e,
                        rtpParameters: l,
                        stopTracks: a,
                        disableTrackOnPause: i,
                        zeroRtpOnPause: s,
                        appData: o,
                      });
                    return (
                      this._producers.set(r.id, r),
                      this._handleProducer(r),
                      this._observer.safeEmit("newproducer", r),
                      r
                    );
                  } catch (e) {
                    throw (this._handler.stopSending(d).catch(() => {}), e);
                  }
                }, "transport.produce()")
                .catch((t) => {
                  if (a)
                    try {
                      e.stop();
                    } catch (e) {}
                  throw t;
                });
            }
            async consume({
              id: e,
              producerId: t,
              kind: r,
              rtpParameters: n,
              appData: a = {},
            }) {
              if (
                (v.debug("consume()"), (n = l.clone(n, void 0)), this._closed)
              )
                throw new d.InvalidStateError("closed");
              if ("recv" !== this._direction)
                throw new d.UnsupportedError("not a receiving Transport");
              if ("string" != typeof e) throw new TypeError("missing id");
              if ("string" != typeof t)
                throw new TypeError("missing producerId");
              if ("audio" !== r && "video" !== r)
                throw new TypeError(`invalid kind '${r}'`);
              if (
                0 === this.listenerCount("connect") &&
                "new" === this._connectionState
              )
                throw new TypeError(
                  'no "connect" listener set into this transport'
                );
              if (a && "object" != typeof a)
                throw new TypeError("if given, appData must be an object");
              return this._awaitQueue.push(async () => {
                if (!u.canReceive(n, this._extendedRtpCapabilities))
                  throw new d.UnsupportedError("cannot consume this Producer");
                const {
                    localId: i,
                    rtpReceiver: s,
                    track: o,
                  } = await this._handler.receive({
                    trackId: e,
                    kind: r,
                    rtpParameters: n,
                  }),
                  c = new h.Consumer({
                    id: e,
                    localId: i,
                    producerId: t,
                    rtpReceiver: s,
                    track: o,
                    rtpParameters: n,
                    appData: a,
                  });
                if (
                  (this._consumers.set(c.id, c),
                  this._handleConsumer(c),
                  !this._probatorConsumerCreated && "video" === r)
                )
                  try {
                    const e = u.generateProbatorRtpParameters(c.rtpParameters);
                    await this._handler.receive({
                      trackId: "probator",
                      kind: "video",
                      rtpParameters: e,
                    }),
                      v.debug("consume() | Consumer for RTP probation created"),
                      (this._probatorConsumerCreated = !0);
                  } catch (e) {
                    v.error(
                      "consume() | failed to create Consumer for RTP probation:%o",
                      e
                    );
                  }
                return this._observer.safeEmit("newconsumer", c), c;
              }, "transport.consume()");
            }
            async produceData({
              ordered: e = !0,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n = "",
              protocol: a = "",
              appData: i = {},
            } = {}) {
              if ((v.debug("produceData()"), "send" !== this._direction))
                throw new d.UnsupportedError("not a sending Transport");
              if (!this._maxSctpMessageSize)
                throw new d.UnsupportedError(
                  "SCTP not enabled by remote Transport"
                );
              if (
                0 === this.listenerCount("connect") &&
                "new" === this._connectionState
              )
                throw new TypeError(
                  'no "connect" listener set into this transport'
                );
              if (0 === this.listenerCount("producedata"))
                throw new TypeError(
                  'no "producedata" listener set into this transport'
                );
              if (i && "object" != typeof i)
                throw new TypeError("if given, appData must be an object");
              return (
                (t || r) && (e = !1),
                this._awaitQueue.push(async () => {
                  const { dataChannel: s, sctpStreamParameters: o } =
                    await this._handler.sendDataChannel({
                      ordered: e,
                      maxPacketLifeTime: t,
                      maxRetransmits: r,
                      label: n,
                      protocol: a,
                    });
                  u.validateSctpStreamParameters(o);
                  const { id: c } = await this.safeEmitAsPromise(
                      "producedata",
                      {
                        sctpStreamParameters: o,
                        label: n,
                        protocol: a,
                        appData: i,
                      }
                    ),
                    d = new m.DataProducer({
                      id: c,
                      dataChannel: s,
                      sctpStreamParameters: o,
                      appData: i,
                    });
                  return (
                    this._dataProducers.set(d.id, d),
                    this._handleDataProducer(d),
                    this._observer.safeEmit("newdataproducer", d),
                    d
                  );
                }, "transport.produceData()")
              );
            }
            async consumeData({
              id: e,
              dataProducerId: t,
              sctpStreamParameters: r,
              label: n = "",
              protocol: a = "",
              appData: i = {},
            }) {
              if (
                (v.debug("consumeData()"),
                (r = l.clone(r, void 0)),
                this._closed)
              )
                throw new d.InvalidStateError("closed");
              if ("recv" !== this._direction)
                throw new d.UnsupportedError("not a receiving Transport");
              if (!this._maxSctpMessageSize)
                throw new d.UnsupportedError(
                  "SCTP not enabled by remote Transport"
                );
              if ("string" != typeof e) throw new TypeError("missing id");
              if ("string" != typeof t)
                throw new TypeError("missing dataProducerId");
              if (
                0 === this.listenerCount("connect") &&
                "new" === this._connectionState
              )
                throw new TypeError(
                  'no "connect" listener set into this transport'
                );
              if (i && "object" != typeof i)
                throw new TypeError("if given, appData must be an object");
              return (
                u.validateSctpStreamParameters(r),
                this._awaitQueue.push(async () => {
                  const { dataChannel: s } =
                      await this._handler.receiveDataChannel({
                        sctpStreamParameters: r,
                        label: n,
                        protocol: a,
                      }),
                    o = new f.DataConsumer({
                      id: e,
                      dataProducerId: t,
                      dataChannel: s,
                      sctpStreamParameters: r,
                      appData: i,
                    });
                  return (
                    this._dataConsumers.set(o.id, o),
                    this._handleDataConsumer(o),
                    this._observer.safeEmit("newdataconsumer", o),
                    o
                  );
                }, "transport.consumeData()")
              );
            }
            _handleHandler() {
              const e = this._handler;
              e.on("@connect", ({ dtlsParameters: e }, t, r) => {
                this._closed
                  ? r(new d.InvalidStateError("closed"))
                  : this.safeEmit("connect", { dtlsParameters: e }, t, r);
              }),
                e.on("@connectionstatechange", (e) => {
                  e !== this._connectionState &&
                    (v.debug("connection state changed to %s", e),
                    (this._connectionState = e),
                    this._closed || this.safeEmit("connectionstatechange", e));
                });
            }
            _handleProducer(e) {
              e.on("@close", () => {
                this._producers.delete(e.id),
                  this._closed ||
                    this._awaitQueue
                      .push(
                        async () => this._handler.stopSending(e.localId),
                        "producer @close event"
                      )
                      .catch((e) => v.warn("producer.close() failed:%o", e));
              }),
                e.on("@replacetrack", (t, r, n) => {
                  this._awaitQueue
                    .push(
                      async () => this._handler.replaceTrack(e.localId, t),
                      "producer @replacetrack event"
                    )
                    .then(r)
                    .catch(n);
                }),
                e.on("@setmaxspatiallayer", (t, r, n) => {
                  this._awaitQueue
                    .push(
                      async () =>
                        this._handler.setMaxSpatialLayer(e.localId, t),
                      "producer @setmaxspatiallayer event"
                    )
                    .then(r)
                    .catch(n);
                }),
                e.on("@setrtpencodingparameters", (t, r, n) => {
                  this._awaitQueue
                    .push(
                      async () =>
                        this._handler.setRtpEncodingParameters(e.localId, t),
                      "producer @setrtpencodingparameters event"
                    )
                    .then(r)
                    .catch(n);
                }),
                e.on("@getstats", (t, r) => {
                  if (this._closed) return r(new d.InvalidStateError("closed"));
                  this._handler.getSenderStats(e.localId).then(t).catch(r);
                });
            }
            _handleConsumer(e) {
              e.on("@close", () => {
                this._consumers.delete(e.id),
                  this._closed ||
                    this._awaitQueue
                      .push(
                        async () => this._handler.stopReceiving(e.localId),
                        "consumer @close event"
                      )
                      .catch(() => {});
              }),
                e.on("@pause", () => {
                  this._awaitQueue
                    .push(
                      async () => this._handler.pauseReceiving(e.localId),
                      "consumer @pause event"
                    )
                    .catch(() => {});
                }),
                e.on("@resume", () => {
                  this._awaitQueue
                    .push(
                      async () => this._handler.resumeReceiving(e.localId),
                      "consumer @resume event"
                    )
                    .catch(() => {});
                }),
                e.on("@getstats", (t, r) => {
                  if (this._closed) return r(new d.InvalidStateError("closed"));
                  this._handler.getReceiverStats(e.localId).then(t).catch(r);
                });
            }
            _handleDataProducer(e) {
              e.on("@close", () => {
                this._dataProducers.delete(e.id);
              });
            }
            _handleDataConsumer(e) {
              e.on("@close", () => {
                this._dataConsumers.delete(e.id);
              });
            }
          }
          t.Transport = _;
        },
        9992: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.InvalidStateError = t.UnsupportedError = void 0);
          class r extends Error {
            constructor(e) {
              super(e),
                (this.name = "UnsupportedError"),
                Error.hasOwnProperty("captureStackTrace")
                  ? Error.captureStackTrace(this, r)
                  : (this.stack = new Error(e).stack);
            }
          }
          t.UnsupportedError = r;
          class n extends Error {
            constructor(e) {
              super(e),
                (this.name = "InvalidStateError"),
                Error.hasOwnProperty("captureStackTrace")
                  ? Error.captureStackTrace(this, n)
                  : (this.stack = new Error(e).stack);
            }
          }
          t.InvalidStateError = n;
        },
        564: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Chrome55 = void 0);
          const s = i(r(766)),
            o = r(8562),
            c = r(9992),
            d = i(r(3347)),
            l = i(r(5280)),
            u = i(r(2267)),
            p = i(r(9875)),
            h = r(9316),
            m = r(7910),
            f = new o.Logger("Chrome55"),
            v = { OS: 1024, MIS: 1024 };
          class _ extends h.HandlerInterface {
            constructor() {
              super(),
                (this._sendStream = new MediaStream()),
                (this._mapSendLocalIdTrack = new Map()),
                (this._nextSendLocalId = 0),
                (this._mapRecvLocalIdInfo = new Map()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            static createFactory() {
              return () => new _();
            }
            get name() {
              return "Chrome55";
            }
            close() {
              if ((f.debug("close()"), this._pc))
                try {
                  this._pc.close();
                } catch (e) {}
            }
            async getNativeRtpCapabilities() {
              f.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
                sdpSemantics: "plan-b",
              });
              try {
                const t = await e.createOffer({
                  offerToReceiveAudio: !0,
                  offerToReceiveVideo: !0,
                });
                try {
                  e.close();
                } catch (e) {}
                const r = s.parse(t.sdp);
                return u.extractRtpCapabilities({ sdpObject: r });
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return f.debug("getNativeSctpCapabilities()"), { numStreams: v };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: a,
              iceServers: i,
              iceTransportPolicy: s,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: d,
            }) {
              f.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new m.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: a,
                  planB: !0,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: l.getSendingRtpParameters("audio", d),
                  video: l.getSendingRtpParameters("video", d),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: l.getSendingRemoteRtpParameters("audio", d),
                  video: l.getSendingRemoteRtpParameters("video", d),
                }),
                n.role &&
                  "auto" !== n.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === n.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: i || [],
                    iceTransportPolicy: s || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "plan-b",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("iceconnectionstatechange", () => {
                  switch (this._pc.iceConnectionState) {
                    case "checking":
                      this.emit("@connectionstatechange", "connecting");
                      break;
                    case "connected":
                    case "completed":
                      this.emit("@connectionstatechange", "connected");
                      break;
                    case "failed":
                      this.emit("@connectionstatechange", "failed");
                      break;
                    case "disconnected":
                      this.emit("@connectionstatechange", "disconnected");
                      break;
                    case "closed":
                      this.emit("@connectionstatechange", "closed");
                  }
                });
            }
            async updateIceServers(e) {
              f.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (f.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              var a;
              this._assertSendDirection(),
                f.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                n &&
                  f.warn(
                    "send() | codec selection is not available in %s handler",
                    this.name
                  ),
                this._sendStream.addTrack(e),
                this._pc.addStream(this._sendStream);
              let i,
                o = await this._pc.createOffer(),
                c = s.parse(o.sdp);
              const h = d.clone(this._sendingRtpParametersByKind[e.kind], {});
              h.codecs = l.reduceCodecs(h.codecs);
              const m = d.clone(
                this._sendingRemoteRtpParametersByKind[e.kind],
                {}
              );
              if (
                ((m.codecs = l.reduceCodecs(m.codecs)),
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (a = this._forcedLocalDtlsRole) && void 0 !== a
                        ? a
                        : "client",
                    localSdpObject: c,
                  })),
                "video" === e.kind &&
                  t &&
                  t.length > 1 &&
                  (f.debug("send() | enabling simulcast"),
                  (c = s.parse(o.sdp)),
                  (i = c.media.find((e) => "video" === e.type)),
                  p.addLegacySimulcast({
                    offerMediaObject: i,
                    track: e,
                    numStreams: t.length,
                  }),
                  (o = { type: "offer", sdp: s.write(c) })),
                f.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  o
                ),
                await this._pc.setLocalDescription(o),
                (c = s.parse(this._pc.localDescription.sdp)),
                (i = c.media.find((t) => t.type === e.kind)),
                (h.rtcp.cname = u.getCname({ offerMediaObject: i })),
                (h.encodings = p.getRtpEncodings({
                  offerMediaObject: i,
                  track: e,
                })),
                t)
              )
                for (let e = 0; e < h.encodings.length; ++e)
                  t[e] && Object.assign(h.encodings[e], t[e]);
              if (
                h.encodings.length > 1 &&
                "video/vp8" === h.codecs[0].mimeType.toLowerCase()
              )
                for (const e of h.encodings) e.scalabilityMode = "S1T3";
              this._remoteSdp.send({
                offerMediaObject: i,
                offerRtpParameters: h,
                answerRtpParameters: m,
                codecOptions: r,
              });
              const v = { type: "answer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "send() | calling pc.setRemoteDescription() [answer:%o]",
                v
              ),
                await this._pc.setRemoteDescription(v);
              const _ = String(this._nextSendLocalId);
              return (
                this._nextSendLocalId++,
                this._mapSendLocalIdTrack.set(_, e),
                { localId: _, rtpParameters: h }
              );
            }
            async stopSending(e) {
              this._assertSendDirection(),
                f.debug("stopSending() [localId:%s]", e);
              const t = this._mapSendLocalIdTrack.get(e);
              if (!t) throw new Error("track not found");
              this._mapSendLocalIdTrack.delete(e),
                this._sendStream.removeTrack(t),
                this._pc.addStream(this._sendStream);
              const r = await this._pc.createOffer();
              f.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              );
              try {
                await this._pc.setLocalDescription(r);
              } catch (e) {
                if (0 === this._sendStream.getTracks().length)
                  return void f.warn(
                    "stopSending() | ignoring expected error due no sending tracks: %s",
                    e.toString()
                  );
                throw e;
              }
              if ("stable" === this._pc.signalingState) return;
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
            }
            async replaceTrack(e, t) {
              throw new c.UnsupportedError("not implemented");
            }
            async setMaxSpatialLayer(e, t) {
              throw new c.UnsupportedError(" not implemented");
            }
            async setRtpEncodingParameters(e, t) {
              throw new c.UnsupportedError("not supported");
            }
            async getSenderStats(e) {
              throw new c.UnsupportedError("not implemented");
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n,
              protocol: a,
            }) {
              var i;
              this._assertSendDirection();
              const o = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmitTime: t,
                maxRetransmits: r,
                protocol: a,
              };
              f.debug("sendDataChannel() [options:%o]", o);
              const c = this._pc.createDataChannel(n, o);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % v.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = s.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (i = this._forcedLocalDtlsRole) && void 0 !== i
                        ? i
                        : "client",
                    localSdpObject: t,
                  })),
                  f.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  n
                ),
                  await this._pc.setRemoteDescription(n),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: c,
                sctpStreamParameters: {
                  streamId: o.id,
                  ordered: o.ordered,
                  maxPacketLifeTime: o.maxPacketLifeTime,
                  maxRetransmits: o.maxRetransmits,
                },
              };
            }
            async receive({ trackId: e, kind: t, rtpParameters: r }) {
              var n;
              this._assertRecvDirection(),
                f.debug("receive() [trackId:%s, kind:%s]", e, t);
              const a = e,
                i = t,
                o = r.rtcp.cname;
              this._remoteSdp.receive({
                mid: i,
                kind: t,
                offerRtpParameters: r,
                streamId: o,
                trackId: e,
              });
              const c = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                c
              ),
                await this._pc.setRemoteDescription(c);
              let d = await this._pc.createAnswer();
              const l = s.parse(d.sdp),
                p = l.media.find((e) => String(e.mid) === i);
              u.applyCodecParameters({
                offerRtpParameters: r,
                answerMediaObject: p,
              }),
                (d = { type: "answer", sdp: s.write(l) }),
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (n = this._forcedLocalDtlsRole) && void 0 !== n
                        ? n
                        : "client",
                    localSdpObject: l,
                  })),
                f.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  d
                ),
                await this._pc.setLocalDescription(d);
              const h = this._pc
                .getRemoteStreams()
                .find((e) => e.id === o)
                .getTrackById(a);
              if (!h) throw new Error("remote track not found");
              return (
                this._mapRecvLocalIdInfo.set(a, { mid: i, rtpParameters: r }),
                { localId: a, track: h }
              );
            }
            async stopReceiving(e) {
              this._assertRecvDirection(),
                f.debug("stopReceiving() [localId:%s]", e);
              const { mid: t, rtpParameters: r } =
                this._mapRecvLocalIdInfo.get(e) || {};
              this._mapRecvLocalIdInfo.delete(e),
                this._remoteSdp.planBStopReceiving({
                  mid: t,
                  offerRtpParameters: r,
                });
              const n = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
              const a = await this._pc.createAnswer();
              f.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                a
              ),
                await this._pc.setLocalDescription(a);
            }
            async pauseReceiving(e) {}
            async resumeReceiving(e) {}
            async getReceiverStats(e) {
              throw new c.UnsupportedError("not implemented");
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              var n;
              this._assertRecvDirection();
              const {
                  streamId: a,
                  ordered: i,
                  maxPacketLifeTime: o,
                  maxRetransmits: c,
                } = e,
                d = {
                  negotiated: !0,
                  id: a,
                  ordered: i,
                  maxPacketLifeTime: o,
                  maxRetransmitTime: o,
                  maxRetransmits: c,
                  protocol: r,
                };
              f.debug("receiveDataChannel() [options:%o]", d);
              const l = this._pc.createDataChannel(t, d);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation({
                  oldDataChannelSpec: !0,
                });
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = s.parse(t.sdp);
                  await this._setupTransport({
                    localDtlsRole:
                      null !== (n = this._forcedLocalDtlsRole) && void 0 !== n
                        ? n
                        : "client",
                    localSdpObject: e,
                  });
                }
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: l };
            }
            async _setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = s.parse(this._pc.localDescription.sdp));
              const r = u.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await this.safeEmitAsPromise("@connect", { dtlsParameters: r }),
                (this._transportReady = !0);
            }
            _assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            _assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Chrome55 = _;
        },
        5697: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Chrome67 = void 0);
          const s = i(r(766)),
            o = r(8562),
            c = i(r(3347)),
            d = i(r(5280)),
            l = i(r(2267)),
            u = i(r(9875)),
            p = r(9316),
            h = r(7910),
            m = new o.Logger("Chrome67"),
            f = { OS: 1024, MIS: 1024 };
          class v extends p.HandlerInterface {
            constructor() {
              super(),
                (this._sendStream = new MediaStream()),
                (this._mapSendLocalIdRtpSender = new Map()),
                (this._nextSendLocalId = 0),
                (this._mapRecvLocalIdInfo = new Map()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            static createFactory() {
              return () => new v();
            }
            get name() {
              return "Chrome67";
            }
            close() {
              if ((m.debug("close()"), this._pc))
                try {
                  this._pc.close();
                } catch (e) {}
            }
            async getNativeRtpCapabilities() {
              m.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
                sdpSemantics: "plan-b",
              });
              try {
                const t = await e.createOffer({
                  offerToReceiveAudio: !0,
                  offerToReceiveVideo: !0,
                });
                try {
                  e.close();
                } catch (e) {}
                const r = s.parse(t.sdp);
                return l.extractRtpCapabilities({ sdpObject: r });
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return m.debug("getNativeSctpCapabilities()"), { numStreams: f };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: a,
              iceServers: i,
              iceTransportPolicy: s,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: l,
            }) {
              m.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new h.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: a,
                  planB: !0,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l),
                  video: d.getSendingRtpParameters("video", l),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l),
                  video: d.getSendingRemoteRtpParameters("video", l),
                }),
                n.role &&
                  "auto" !== n.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === n.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: i || [],
                    iceTransportPolicy: s || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "plan-b",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("iceconnectionstatechange", () => {
                  switch (this._pc.iceConnectionState) {
                    case "checking":
                      this.emit("@connectionstatechange", "connecting");
                      break;
                    case "connected":
                    case "completed":
                      this.emit("@connectionstatechange", "connected");
                      break;
                    case "failed":
                      this.emit("@connectionstatechange", "failed");
                      break;
                    case "disconnected":
                      this.emit("@connectionstatechange", "disconnected");
                      break;
                    case "closed":
                      this.emit("@connectionstatechange", "closed");
                  }
                });
            }
            async updateIceServers(e) {
              m.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (m.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  m.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  m.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  m.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  m.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              var a;
              this._assertSendDirection(),
                m.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                n &&
                  m.warn(
                    "send() | codec selection is not available in %s handler",
                    this.name
                  ),
                this._sendStream.addTrack(e),
                this._pc.addTrack(e, this._sendStream);
              let i,
                o = await this._pc.createOffer(),
                p = s.parse(o.sdp);
              const h = c.clone(this._sendingRtpParametersByKind[e.kind], {});
              h.codecs = d.reduceCodecs(h.codecs);
              const f = c.clone(
                this._sendingRemoteRtpParametersByKind[e.kind],
                {}
              );
              if (
                ((f.codecs = d.reduceCodecs(f.codecs)),
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (a = this._forcedLocalDtlsRole) && void 0 !== a
                        ? a
                        : "client",
                    localSdpObject: p,
                  })),
                "video" === e.kind &&
                  t &&
                  t.length > 1 &&
                  (m.debug("send() | enabling simulcast"),
                  (p = s.parse(o.sdp)),
                  (i = p.media.find((e) => "video" === e.type)),
                  u.addLegacySimulcast({
                    offerMediaObject: i,
                    track: e,
                    numStreams: t.length,
                  }),
                  (o = { type: "offer", sdp: s.write(p) })),
                m.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  o
                ),
                await this._pc.setLocalDescription(o),
                (p = s.parse(this._pc.localDescription.sdp)),
                (i = p.media.find((t) => t.type === e.kind)),
                (h.rtcp.cname = l.getCname({ offerMediaObject: i })),
                (h.encodings = u.getRtpEncodings({
                  offerMediaObject: i,
                  track: e,
                })),
                t)
              )
                for (let e = 0; e < h.encodings.length; ++e)
                  t[e] && Object.assign(h.encodings[e], t[e]);
              if (
                h.encodings.length > 1 &&
                "video/vp8" === h.codecs[0].mimeType.toLowerCase()
              )
                for (const e of h.encodings) e.scalabilityMode = "S1T3";
              this._remoteSdp.send({
                offerMediaObject: i,
                offerRtpParameters: h,
                answerRtpParameters: f,
                codecOptions: r,
              });
              const v = { type: "answer", sdp: this._remoteSdp.getSdp() };
              m.debug(
                "send() | calling pc.setRemoteDescription() [answer:%o]",
                v
              ),
                await this._pc.setRemoteDescription(v);
              const _ = String(this._nextSendLocalId);
              this._nextSendLocalId++;
              const g = this._pc.getSenders().find((t) => t.track === e);
              return (
                this._mapSendLocalIdRtpSender.set(_, g),
                { localId: _, rtpParameters: h, rtpSender: g }
              );
            }
            async stopSending(e) {
              this._assertSendDirection(),
                m.debug("stopSending() [localId:%s]", e);
              const t = this._mapSendLocalIdRtpSender.get(e);
              if (!t) throw new Error("associated RTCRtpSender not found");
              this._pc.removeTrack(t),
                t.track && this._sendStream.removeTrack(t.track),
                this._mapSendLocalIdRtpSender.delete(e);
              const r = await this._pc.createOffer();
              m.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              );
              try {
                await this._pc.setLocalDescription(r);
              } catch (e) {
                if (0 === this._sendStream.getTracks().length)
                  return void m.warn(
                    "stopSending() | ignoring expected error due no sending tracks: %s",
                    e.toString()
                  );
                throw e;
              }
              if ("stable" === this._pc.signalingState) return;
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              m.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
            }
            async replaceTrack(e, t) {
              this._assertSendDirection(),
                t
                  ? m.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : m.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapSendLocalIdRtpSender.get(e);
              if (!r) throw new Error("associated RTCRtpSender not found");
              const n = r.track;
              await r.replaceTrack(t),
                n && this._sendStream.removeTrack(n),
                t && this._sendStream.addTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this._assertSendDirection(),
                m.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapSendLocalIdRtpSender.get(e);
              if (!r) throw new Error("associated RTCRtpSender not found");
              const n = r.getParameters();
              n.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.setParameters(n);
            }
            async setRtpEncodingParameters(e, t) {
              this._assertSendDirection(),
                m.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapSendLocalIdRtpSender.get(e);
              if (!r) throw new Error("associated RTCRtpSender not found");
              const n = r.getParameters();
              n.encodings.forEach((e, r) => {
                n.encodings[r] = { ...e, ...t };
              }),
                await r.setParameters(n);
            }
            async getSenderStats(e) {
              this._assertSendDirection();
              const t = this._mapSendLocalIdRtpSender.get(e);
              if (!t) throw new Error("associated RTCRtpSender not found");
              return t.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n,
              protocol: a,
            }) {
              var i;
              this._assertSendDirection();
              const o = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmitTime: t,
                maxRetransmits: r,
                protocol: a,
              };
              m.debug("sendDataChannel() [options:%o]", o);
              const c = this._pc.createDataChannel(n, o);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % f.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = s.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (i = this._forcedLocalDtlsRole) && void 0 !== i
                        ? i
                        : "client",
                    localSdpObject: t,
                  })),
                  m.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  n
                ),
                  await this._pc.setRemoteDescription(n),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: c,
                sctpStreamParameters: {
                  streamId: o.id,
                  ordered: o.ordered,
                  maxPacketLifeTime: o.maxPacketLifeTime,
                  maxRetransmits: o.maxRetransmits,
                },
              };
            }
            async receive({ trackId: e, kind: t, rtpParameters: r }) {
              var n;
              this._assertRecvDirection(),
                m.debug("receive() [trackId:%s, kind:%s]", e, t);
              const a = e,
                i = t;
              this._remoteSdp.receive({
                mid: i,
                kind: t,
                offerRtpParameters: r,
                streamId: r.rtcp.cname,
                trackId: e,
              });
              const o = { type: "offer", sdp: this._remoteSdp.getSdp() };
              m.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                o
              ),
                await this._pc.setRemoteDescription(o);
              let c = await this._pc.createAnswer();
              const d = s.parse(c.sdp),
                u = d.media.find((e) => String(e.mid) === i);
              l.applyCodecParameters({
                offerRtpParameters: r,
                answerMediaObject: u,
              }),
                (c = { type: "answer", sdp: s.write(d) }),
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (n = this._forcedLocalDtlsRole) && void 0 !== n
                        ? n
                        : "client",
                    localSdpObject: d,
                  })),
                m.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  c
                ),
                await this._pc.setLocalDescription(c);
              const p = this._pc
                .getReceivers()
                .find((e) => e.track && e.track.id === a);
              if (!p) throw new Error("new RTCRtpReceiver not");
              return (
                this._mapRecvLocalIdInfo.set(a, {
                  mid: i,
                  rtpParameters: r,
                  rtpReceiver: p,
                }),
                { localId: a, track: p.track, rtpReceiver: p }
              );
            }
            async stopReceiving(e) {
              this._assertRecvDirection(),
                m.debug("stopReceiving() [localId:%s]", e);
              const { mid: t, rtpParameters: r } =
                this._mapRecvLocalIdInfo.get(e) || {};
              this._mapRecvLocalIdInfo.delete(e),
                this._remoteSdp.planBStopReceiving({
                  mid: t,
                  offerRtpParameters: r,
                });
              const n = { type: "offer", sdp: this._remoteSdp.getSdp() };
              m.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
              const a = await this._pc.createAnswer();
              m.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                a
              ),
                await this._pc.setLocalDescription(a);
            }
            async pauseReceiving(e) {}
            async resumeReceiving(e) {}
            async getReceiverStats(e) {
              this._assertRecvDirection();
              const { rtpReceiver: t } = this._mapRecvLocalIdInfo.get(e) || {};
              if (!t) throw new Error("associated RTCRtpReceiver not found");
              return t.getStats();
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              var n;
              this._assertRecvDirection();
              const {
                  streamId: a,
                  ordered: i,
                  maxPacketLifeTime: o,
                  maxRetransmits: c,
                } = e,
                d = {
                  negotiated: !0,
                  id: a,
                  ordered: i,
                  maxPacketLifeTime: o,
                  maxRetransmitTime: o,
                  maxRetransmits: c,
                  protocol: r,
                };
              m.debug("receiveDataChannel() [options:%o]", d);
              const l = this._pc.createDataChannel(t, d);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation({
                  oldDataChannelSpec: !0,
                });
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = s.parse(t.sdp);
                  await this._setupTransport({
                    localDtlsRole:
                      null !== (n = this._forcedLocalDtlsRole) && void 0 !== n
                        ? n
                        : "client",
                    localSdpObject: e,
                  });
                }
                m.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: l };
            }
            async _setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = s.parse(this._pc.localDescription.sdp));
              const r = l.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await this.safeEmitAsPromise("@connect", { dtlsParameters: r }),
                (this._transportReady = !0);
            }
            _assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            _assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Chrome67 = v;
        },
        5372: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Chrome70 = void 0);
          const s = i(r(766)),
            o = r(8562),
            c = i(r(3347)),
            d = i(r(5280)),
            l = i(r(2267)),
            u = i(r(9072)),
            p = r(9316),
            h = r(7910),
            m = r(2770),
            f = new o.Logger("Chrome70"),
            v = { OS: 1024, MIS: 1024 };
          class _ extends p.HandlerInterface {
            constructor() {
              super(),
                (this._mapMidTransceiver = new Map()),
                (this._sendStream = new MediaStream()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            static createFactory() {
              return () => new _();
            }
            get name() {
              return "Chrome70";
            }
            close() {
              if ((f.debug("close()"), this._pc))
                try {
                  this._pc.close();
                } catch (e) {}
            }
            async getNativeRtpCapabilities() {
              f.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
                sdpSemantics: "unified-plan",
              });
              try {
                e.addTransceiver("audio"), e.addTransceiver("video");
                const t = await e.createOffer();
                try {
                  e.close();
                } catch (e) {}
                const r = s.parse(t.sdp);
                return l.extractRtpCapabilities({ sdpObject: r });
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return f.debug("getNativeSctpCapabilities()"), { numStreams: v };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: a,
              iceServers: i,
              iceTransportPolicy: s,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: l,
            }) {
              f.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new h.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: a,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l),
                  video: d.getSendingRtpParameters("video", l),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l),
                  video: d.getSendingRemoteRtpParameters("video", l),
                }),
                n.role &&
                  "auto" !== n.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === n.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: i || [],
                    iceTransportPolicy: s || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "unified-plan",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("iceconnectionstatechange", () => {
                  switch (this._pc.iceConnectionState) {
                    case "checking":
                      this.emit("@connectionstatechange", "connecting");
                      break;
                    case "connected":
                    case "completed":
                      this.emit("@connectionstatechange", "connected");
                      break;
                    case "failed":
                      this.emit("@connectionstatechange", "failed");
                      break;
                    case "disconnected":
                      this.emit("@connectionstatechange", "disconnected");
                      break;
                    case "closed":
                      this.emit("@connectionstatechange", "closed");
                  }
                });
            }
            async updateIceServers(e) {
              f.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (f.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              var a;
              this._assertSendDirection(),
                f.debug("send() [kind:%s, track.id:%s]", e.kind, e.id);
              const i = c.clone(this._sendingRtpParametersByKind[e.kind], {});
              i.codecs = d.reduceCodecs(i.codecs, n);
              const o = c.clone(
                this._sendingRemoteRtpParametersByKind[e.kind],
                {}
              );
              o.codecs = d.reduceCodecs(o.codecs, n);
              const p = this._remoteSdp.getNextMediaSectionIdx(),
                h = this._pc.addTransceiver(e, {
                  direction: "sendonly",
                  streams: [this._sendStream],
                });
              let v,
                _ = await this._pc.createOffer(),
                g = s.parse(_.sdp);
              this._transportReady ||
                (await this._setupTransport({
                  localDtlsRole:
                    null !== (a = this._forcedLocalDtlsRole) && void 0 !== a
                      ? a
                      : "client",
                  localSdpObject: g,
                })),
                t &&
                  t.length > 1 &&
                  (f.debug("send() | enabling legacy simulcast"),
                  (g = s.parse(_.sdp)),
                  (v = g.media[p.idx]),
                  u.addLegacySimulcast({
                    offerMediaObject: v,
                    numStreams: t.length,
                  }),
                  (_ = { type: "offer", sdp: s.write(g) }));
              let y = !1;
              const b = (0, m.parse)((t || [{}])[0].scalabilityMode);
              if (
                (t &&
                  1 === t.length &&
                  b.spatialLayers > 1 &&
                  "video/vp9" === i.codecs[0].mimeType.toLowerCase() &&
                  (f.debug("send() | enabling legacy simulcast for VP9 SVC"),
                  (y = !0),
                  (g = s.parse(_.sdp)),
                  (v = g.media[p.idx]),
                  u.addLegacySimulcast({
                    offerMediaObject: v,
                    numStreams: b.spatialLayers,
                  }),
                  (_ = { type: "offer", sdp: s.write(g) })),
                f.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  _
                ),
                await this._pc.setLocalDescription(_),
                t)
              ) {
                f.debug("send() | applying given encodings");
                const e = h.sender.getParameters();
                for (let r = 0; r < (e.encodings || []).length; ++r) {
                  const n = e.encodings[r],
                    a = t[r];
                  if (!a) break;
                  e.encodings[r] = Object.assign(n, a);
                }
                await h.sender.setParameters(e);
              }
              const w = h.mid;
              if (
                ((i.mid = w),
                (g = s.parse(this._pc.localDescription.sdp)),
                (v = g.media[p.idx]),
                (i.rtcp.cname = l.getCname({ offerMediaObject: v })),
                (i.encodings = u.getRtpEncodings({ offerMediaObject: v })),
                t)
              )
                for (let e = 0; e < i.encodings.length; ++e)
                  t[e] && Object.assign(i.encodings[e], t[e]);
              if (
                (y && (i.encodings = [i.encodings[0]]),
                i.encodings.length > 1 &&
                  ("video/vp8" === i.codecs[0].mimeType.toLowerCase() ||
                    "video/h264" === i.codecs[0].mimeType.toLowerCase()))
              )
                for (const e of i.encodings) e.scalabilityMode = "S1T3";
              this._remoteSdp.send({
                offerMediaObject: v,
                reuseMid: p.reuseMid,
                offerRtpParameters: i,
                answerRtpParameters: o,
                codecOptions: r,
              });
              const S = { type: "answer", sdp: this._remoteSdp.getSdp() };
              return (
                f.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  S
                ),
                await this._pc.setRemoteDescription(S),
                this._mapMidTransceiver.set(w, h),
                { localId: w, rtpParameters: i, rtpSender: h.sender }
              );
            }
            async stopSending(e) {
              this._assertSendDirection(),
                f.debug("stopSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              t.sender.replaceTrack(null),
                this._pc.removeTrack(t.sender),
                this._remoteSdp.closeMediaSection(t.mid);
              const r = await this._pc.createOffer();
              f.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n),
                this._mapMidTransceiver.delete(e);
            }
            async replaceTrack(e, t) {
              this._assertSendDirection(),
                t
                  ? f.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : f.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              await r.sender.replaceTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this._assertSendDirection(),
                f.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const n = r.sender.getParameters();
              n.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.sender.setParameters(n);
            }
            async setRtpEncodingParameters(e, t) {
              this._assertSendDirection(),
                f.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const n = r.sender.getParameters();
              n.encodings.forEach((e, r) => {
                n.encodings[r] = { ...e, ...t };
              }),
                await r.sender.setParameters(n);
            }
            async getSenderStats(e) {
              this._assertSendDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.sender.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n,
              protocol: a,
            }) {
              var i;
              this._assertSendDirection();
              const o = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmitTime: t,
                maxRetransmits: r,
                protocol: a,
              };
              f.debug("sendDataChannel() [options:%o]", o);
              const c = this._pc.createDataChannel(n, o);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % v.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = s.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (i = this._forcedLocalDtlsRole) && void 0 !== i
                        ? i
                        : "client",
                    localSdpObject: t,
                  })),
                  f.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  n
                ),
                  await this._pc.setRemoteDescription(n),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: c,
                sctpStreamParameters: {
                  streamId: o.id,
                  ordered: o.ordered,
                  maxPacketLifeTime: o.maxPacketLifeTime,
                  maxRetransmits: o.maxRetransmits,
                },
              };
            }
            async receive({ trackId: e, kind: t, rtpParameters: r }) {
              var n;
              this._assertRecvDirection(),
                f.debug("receive() [trackId:%s, kind:%s]", e, t);
              const a = r.mid || String(this._mapMidTransceiver.size);
              this._remoteSdp.receive({
                mid: a,
                kind: t,
                offerRtpParameters: r,
                streamId: r.rtcp.cname,
                trackId: e,
              });
              const i = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                i
              ),
                await this._pc.setRemoteDescription(i);
              let o = await this._pc.createAnswer();
              const c = s.parse(o.sdp),
                d = c.media.find((e) => String(e.mid) === a);
              l.applyCodecParameters({
                offerRtpParameters: r,
                answerMediaObject: d,
              }),
                (o = { type: "answer", sdp: s.write(c) }),
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (n = this._forcedLocalDtlsRole) && void 0 !== n
                        ? n
                        : "client",
                    localSdpObject: c,
                  })),
                f.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  o
                ),
                await this._pc.setLocalDescription(o);
              const u = this._pc.getTransceivers().find((e) => e.mid === a);
              if (!u) throw new Error("new RTCRtpTransceiver not found");
              return (
                this._mapMidTransceiver.set(a, u),
                { localId: a, track: u.receiver.track, rtpReceiver: u.receiver }
              );
            }
            async stopReceiving(e) {
              this._assertRecvDirection(),
                f.debug("stopReceiving() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              this._remoteSdp.closeMediaSection(t.mid);
              const r = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                r
              ),
                await this._pc.setRemoteDescription(r);
              const n = await this._pc.createAnswer();
              f.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n),
                this._mapMidTransceiver.delete(e);
            }
            async pauseReceiving(e) {}
            async resumeReceiving(e) {}
            async getReceiverStats(e) {
              this._assertRecvDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.receiver.getStats();
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              var n;
              this._assertRecvDirection();
              const {
                  streamId: a,
                  ordered: i,
                  maxPacketLifeTime: o,
                  maxRetransmits: c,
                } = e,
                d = {
                  negotiated: !0,
                  id: a,
                  ordered: i,
                  maxPacketLifeTime: o,
                  maxRetransmitTime: o,
                  maxRetransmits: c,
                  protocol: r,
                };
              f.debug("receiveDataChannel() [options:%o]", d);
              const l = this._pc.createDataChannel(t, d);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation();
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = s.parse(t.sdp);
                  await this._setupTransport({
                    localDtlsRole:
                      null !== (n = this._forcedLocalDtlsRole) && void 0 !== n
                        ? n
                        : "client",
                    localSdpObject: e,
                  });
                }
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: l };
            }
            async _setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = s.parse(this._pc.localDescription.sdp));
              const r = l.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await this.safeEmitAsPromise("@connect", { dtlsParameters: r }),
                (this._transportReady = !0);
            }
            _assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            _assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Chrome70 = _;
        },
        6656: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Chrome74 = void 0);
          const s = i(r(766)),
            o = r(8562),
            c = i(r(3347)),
            d = i(r(5280)),
            l = i(r(2267)),
            u = i(r(9072)),
            p = r(9316),
            h = r(7910),
            m = r(2770),
            f = new o.Logger("Chrome74"),
            v = { OS: 1024, MIS: 1024 };
          class _ extends p.HandlerInterface {
            constructor() {
              super(),
                (this._mapMidTransceiver = new Map()),
                (this._sendStream = new MediaStream()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            static createFactory() {
              return () => new _();
            }
            get name() {
              return "Chrome74";
            }
            close() {
              if ((f.debug("close()"), this._pc))
                try {
                  this._pc.close();
                } catch (e) {}
            }
            async getNativeRtpCapabilities() {
              f.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
                sdpSemantics: "unified-plan",
              });
              try {
                e.addTransceiver("audio"), e.addTransceiver("video");
                const t = await e.createOffer();
                try {
                  e.close();
                } catch (e) {}
                const r = s.parse(t.sdp);
                return l.extractRtpCapabilities({ sdpObject: r });
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return f.debug("getNativeSctpCapabilities()"), { numStreams: v };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: a,
              iceServers: i,
              iceTransportPolicy: s,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: l,
            }) {
              f.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new h.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: a,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l),
                  video: d.getSendingRtpParameters("video", l),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l),
                  video: d.getSendingRemoteRtpParameters("video", l),
                }),
                n.role &&
                  "auto" !== n.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === n.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: i || [],
                    iceTransportPolicy: s || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "unified-plan",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("iceconnectionstatechange", () => {
                  switch (this._pc.iceConnectionState) {
                    case "checking":
                      this.emit("@connectionstatechange", "connecting");
                      break;
                    case "connected":
                    case "completed":
                      this.emit("@connectionstatechange", "connected");
                      break;
                    case "failed":
                      this.emit("@connectionstatechange", "failed");
                      break;
                    case "disconnected":
                      this.emit("@connectionstatechange", "disconnected");
                      break;
                    case "closed":
                      this.emit("@connectionstatechange", "closed");
                  }
                });
            }
            async updateIceServers(e) {
              f.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (f.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              var a;
              this._assertSendDirection(),
                f.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                t &&
                  t.length > 1 &&
                  t.forEach((e, t) => {
                    e.rid = `r${t}`;
                  });
              const i = c.clone(this._sendingRtpParametersByKind[e.kind], {});
              i.codecs = d.reduceCodecs(i.codecs, n);
              const o = c.clone(
                this._sendingRemoteRtpParametersByKind[e.kind],
                {}
              );
              o.codecs = d.reduceCodecs(o.codecs, n);
              const p = this._remoteSdp.getNextMediaSectionIdx(),
                h = this._pc.addTransceiver(e, {
                  direction: "sendonly",
                  streams: [this._sendStream],
                  sendEncodings: t,
                });
              let v,
                _ = await this._pc.createOffer(),
                g = s.parse(_.sdp);
              this._transportReady ||
                (await this._setupTransport({
                  localDtlsRole:
                    null !== (a = this._forcedLocalDtlsRole) && void 0 !== a
                      ? a
                      : "client",
                  localSdpObject: g,
                }));
              let y = !1;
              const b = (0, m.parse)((t || [{}])[0].scalabilityMode);
              t &&
                1 === t.length &&
                b.spatialLayers > 1 &&
                "video/vp9" === i.codecs[0].mimeType.toLowerCase() &&
                (f.debug("send() | enabling legacy simulcast for VP9 SVC"),
                (y = !0),
                (g = s.parse(_.sdp)),
                (v = g.media[p.idx]),
                u.addLegacySimulcast({
                  offerMediaObject: v,
                  numStreams: b.spatialLayers,
                }),
                (_ = { type: "offer", sdp: s.write(g) })),
                f.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  _
                ),
                await this._pc.setLocalDescription(_);
              const w = h.mid;
              if (
                ((i.mid = w),
                (g = s.parse(this._pc.localDescription.sdp)),
                (v = g.media[p.idx]),
                (i.rtcp.cname = l.getCname({ offerMediaObject: v })),
                t)
              )
                if (1 === t.length) {
                  let e = u.getRtpEncodings({ offerMediaObject: v });
                  Object.assign(e[0], t[0]),
                    y && (e = [e[0]]),
                    (i.encodings = e);
                } else i.encodings = t;
              else i.encodings = u.getRtpEncodings({ offerMediaObject: v });
              if (
                i.encodings.length > 1 &&
                ("video/vp8" === i.codecs[0].mimeType.toLowerCase() ||
                  "video/h264" === i.codecs[0].mimeType.toLowerCase())
              )
                for (const e of i.encodings) e.scalabilityMode = "S1T3";
              this._remoteSdp.send({
                offerMediaObject: v,
                reuseMid: p.reuseMid,
                offerRtpParameters: i,
                answerRtpParameters: o,
                codecOptions: r,
                extmapAllowMixed: !0,
              });
              const S = { type: "answer", sdp: this._remoteSdp.getSdp() };
              return (
                f.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  S
                ),
                await this._pc.setRemoteDescription(S),
                this._mapMidTransceiver.set(w, h),
                { localId: w, rtpParameters: i, rtpSender: h.sender }
              );
            }
            async stopSending(e) {
              this._assertSendDirection(),
                f.debug("stopSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              t.sender.replaceTrack(null),
                this._pc.removeTrack(t.sender),
                this._remoteSdp.closeMediaSection(t.mid);
              const r = await this._pc.createOffer();
              f.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n),
                this._mapMidTransceiver.delete(e);
            }
            async replaceTrack(e, t) {
              this._assertSendDirection(),
                t
                  ? f.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : f.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              await r.sender.replaceTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this._assertSendDirection(),
                f.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const n = r.sender.getParameters();
              n.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.sender.setParameters(n);
            }
            async setRtpEncodingParameters(e, t) {
              this._assertSendDirection(),
                f.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const n = r.sender.getParameters();
              n.encodings.forEach((e, r) => {
                n.encodings[r] = { ...e, ...t };
              }),
                await r.sender.setParameters(n);
            }
            async getSenderStats(e) {
              this._assertSendDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.sender.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n,
              protocol: a,
            }) {
              var i;
              this._assertSendDirection();
              const o = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmits: r,
                protocol: a,
              };
              f.debug("sendDataChannel() [options:%o]", o);
              const c = this._pc.createDataChannel(n, o);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % v.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = s.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (i = this._forcedLocalDtlsRole) && void 0 !== i
                        ? i
                        : "client",
                    localSdpObject: t,
                  })),
                  f.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  n
                ),
                  await this._pc.setRemoteDescription(n),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: c,
                sctpStreamParameters: {
                  streamId: o.id,
                  ordered: o.ordered,
                  maxPacketLifeTime: o.maxPacketLifeTime,
                  maxRetransmits: o.maxRetransmits,
                },
              };
            }
            async receive({ trackId: e, kind: t, rtpParameters: r }) {
              var n;
              this._assertRecvDirection(),
                f.debug("receive() [trackId:%s, kind:%s]", e, t);
              const a = r.mid || String(this._mapMidTransceiver.size);
              this._remoteSdp.receive({
                mid: a,
                kind: t,
                offerRtpParameters: r,
                streamId: r.rtcp.cname,
                trackId: e,
              });
              const i = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                i
              ),
                await this._pc.setRemoteDescription(i);
              let o = await this._pc.createAnswer();
              const c = s.parse(o.sdp),
                d = c.media.find((e) => String(e.mid) === a);
              l.applyCodecParameters({
                offerRtpParameters: r,
                answerMediaObject: d,
              }),
                (o = { type: "answer", sdp: s.write(c) }),
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (n = this._forcedLocalDtlsRole) && void 0 !== n
                        ? n
                        : "client",
                    localSdpObject: c,
                  })),
                f.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  o
                ),
                await this._pc.setLocalDescription(o);
              const u = this._pc.getTransceivers().find((e) => e.mid === a);
              if (!u) throw new Error("new RTCRtpTransceiver not found");
              return (
                this._mapMidTransceiver.set(a, u),
                { localId: a, track: u.receiver.track, rtpReceiver: u.receiver }
              );
            }
            async stopReceiving(e) {
              this._assertRecvDirection(),
                f.debug("stopReceiving() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              this._remoteSdp.closeMediaSection(t.mid);
              const r = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                r
              ),
                await this._pc.setRemoteDescription(r);
              const n = await this._pc.createAnswer();
              f.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n),
                this._mapMidTransceiver.delete(e);
            }
            async pauseReceiving(e) {
              this._assertRecvDirection(),
                f.debug("pauseReceiving() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              t.direction = "inactive";
              const r = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                r
              ),
                await this._pc.setRemoteDescription(r);
              const n = await this._pc.createAnswer();
              f.debug(
                "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n);
            }
            async resumeReceiving(e) {
              this._assertRecvDirection(),
                f.debug("resumeReceiving() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              t.direction = "recvonly";
              const r = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                r
              ),
                await this._pc.setRemoteDescription(r);
              const n = await this._pc.createAnswer();
              f.debug(
                "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n);
            }
            async getReceiverStats(e) {
              this._assertRecvDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.receiver.getStats();
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              var n;
              this._assertRecvDirection();
              const {
                  streamId: a,
                  ordered: i,
                  maxPacketLifeTime: o,
                  maxRetransmits: c,
                } = e,
                d = {
                  negotiated: !0,
                  id: a,
                  ordered: i,
                  maxPacketLifeTime: o,
                  maxRetransmits: c,
                  protocol: r,
                };
              f.debug("receiveDataChannel() [options:%o]", d);
              const l = this._pc.createDataChannel(t, d);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation();
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = s.parse(t.sdp);
                  await this._setupTransport({
                    localDtlsRole:
                      null !== (n = this._forcedLocalDtlsRole) && void 0 !== n
                        ? n
                        : "client",
                    localSdpObject: e,
                  });
                }
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: l };
            }
            async _setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = s.parse(this._pc.localDescription.sdp));
              const r = l.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await this.safeEmitAsPromise("@connect", { dtlsParameters: r }),
                (this._transportReady = !0);
            }
            _assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            _assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Chrome74 = _;
        },
        7392: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Edge11 = void 0);
          const s = r(8562),
            o = r(9992),
            c = i(r(3347)),
            d = i(r(5280)),
            l = i(r(3635)),
            u = r(9316),
            p = new s.Logger("Edge11");
          class h extends u.HandlerInterface {
            constructor() {
              super(),
                (this._rtpSenders = new Map()),
                (this._rtpReceivers = new Map()),
                (this._nextSendLocalId = 0),
                (this._transportReady = !1);
            }
            static createFactory() {
              return () => new h();
            }
            get name() {
              return "Edge11";
            }
            close() {
              p.debug("close()");
              try {
                this._iceGatherer.close();
              } catch (e) {}
              try {
                this._iceTransport.stop();
              } catch (e) {}
              try {
                this._dtlsTransport.stop();
              } catch (e) {}
              for (const e of this._rtpSenders.values())
                try {
                  e.stop();
                } catch (e) {}
              for (const e of this._rtpReceivers.values())
                try {
                  e.stop();
                } catch (e) {}
            }
            async getNativeRtpCapabilities() {
              return p.debug("getNativeRtpCapabilities()"), l.getCapabilities();
            }
            async getNativeSctpCapabilities() {
              return (
                p.debug("getNativeSctpCapabilities()"),
                { numStreams: { OS: 0, MIS: 0 } }
              );
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: a,
              iceServers: i,
              iceTransportPolicy: s,
              additionalSettings: o,
              proprietaryConstraints: l,
              extendedRtpCapabilities: u,
            }) {
              p.debug("run()"),
                (this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", u),
                  video: d.getSendingRtpParameters("video", u),
                }),
                (this._remoteIceParameters = t),
                (this._remoteIceCandidates = r),
                (this._remoteDtlsParameters = n),
                (this._cname = `CNAME-${c.generateRandomNumber()}`),
                this._setIceGatherer({ iceServers: i, iceTransportPolicy: s }),
                this._setIceTransport(),
                this._setDtlsTransport();
            }
            async updateIceServers(e) {
              throw new o.UnsupportedError("not supported");
            }
            async restartIce(e) {
              if (
                (p.debug("restartIce()"),
                (this._remoteIceParameters = e),
                this._transportReady)
              ) {
                p.debug("restartIce() | calling iceTransport.start()"),
                  this._iceTransport.start(this._iceGatherer, e, "controlling");
                for (const e of this._remoteIceCandidates)
                  this._iceTransport.addRemoteCandidate(e);
                this._iceTransport.addRemoteCandidate({});
              }
            }
            async getTransportStats() {
              return this._iceTransport.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              p.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                this._transportReady ||
                  (await this._setupTransport({ localDtlsRole: "server" })),
                p.debug("send() | calling new RTCRtpSender()");
              const a = new RTCRtpSender(e, this._dtlsTransport),
                i = c.clone(this._sendingRtpParametersByKind[e.kind], {});
              i.codecs = d.reduceCodecs(i.codecs, n);
              const s = i.codecs.some((e) => /.+\/rtx$/i.test(e.mimeType));
              t || (t = [{}]);
              for (const e of t)
                (e.ssrc = c.generateRandomNumber()),
                  s && (e.rtx = { ssrc: c.generateRandomNumber() });
              (i.encodings = t),
                (i.rtcp = { cname: this._cname, reducedSize: !0, mux: !0 });
              const o = l.mangleRtpParameters(i);
              p.debug("send() | calling rtpSender.send() [params:%o]", o),
                await a.send(o);
              const u = String(this._nextSendLocalId);
              return (
                this._nextSendLocalId++,
                this._rtpSenders.set(u, a),
                { localId: u, rtpParameters: i, rtpSender: a }
              );
            }
            async stopSending(e) {
              p.debug("stopSending() [localId:%s]", e);
              const t = this._rtpSenders.get(e);
              if (!t) throw new Error("RTCRtpSender not found");
              this._rtpSenders.delete(e);
              try {
                p.debug("stopSending() | calling rtpSender.stop()"), t.stop();
              } catch (e) {
                throw (
                  (p.warn("stopSending() | rtpSender.stop() failed:%o", e), e)
                );
              }
            }
            async replaceTrack(e, t) {
              t
                ? p.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                : p.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._rtpSenders.get(e);
              if (!r) throw new Error("RTCRtpSender not found");
              r.setTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              p.debug(
                "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                e,
                t
              );
              const r = this._rtpSenders.get(e);
              if (!r) throw new Error("RTCRtpSender not found");
              const n = r.getParameters();
              n.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.setParameters(n);
            }
            async setRtpEncodingParameters(e, t) {
              p.debug(
                "setRtpEncodingParameters() [localId:%s, params:%o]",
                e,
                t
              );
              const r = this._rtpSenders.get(e);
              if (!r) throw new Error("RTCRtpSender not found");
              const n = r.getParameters();
              n.encodings.forEach((e, r) => {
                n.encodings[r] = { ...e, ...t };
              }),
                await r.setParameters(n);
            }
            async getSenderStats(e) {
              const t = this._rtpSenders.get(e);
              if (!t) throw new Error("RTCRtpSender not found");
              return t.getStats();
            }
            async sendDataChannel(e) {
              throw new o.UnsupportedError("not implemented");
            }
            async receive({ trackId: e, kind: t, rtpParameters: r }) {
              p.debug("receive() [trackId:%s, kind:%s]", e, t),
                this._transportReady ||
                  (await this._setupTransport({ localDtlsRole: "server" })),
                p.debug("receive() | calling new RTCRtpReceiver()");
              const n = new RTCRtpReceiver(this._dtlsTransport, t);
              n.addEventListener("error", (e) => {
                p.error('rtpReceiver "error" event [event:%o]', e);
              });
              const a = l.mangleRtpParameters(r);
              p.debug(
                "receive() | calling rtpReceiver.receive() [params:%o]",
                a
              ),
                await n.receive(a);
              const i = e;
              return (
                this._rtpReceivers.set(i, n),
                { localId: i, track: n.track, rtpReceiver: n }
              );
            }
            async stopReceiving(e) {
              p.debug("stopReceiving() [localId:%s]", e);
              const t = this._rtpReceivers.get(e);
              if (!t) throw new Error("RTCRtpReceiver not found");
              this._rtpReceivers.delete(e);
              try {
                p.debug("stopReceiving() | calling rtpReceiver.stop()"),
                  t.stop();
              } catch (e) {
                p.warn("stopReceiving() | rtpReceiver.stop() failed:%o", e);
              }
            }
            async pauseReceiving(e) {}
            async resumeReceiving(e) {}
            async getReceiverStats(e) {
              const t = this._rtpReceivers.get(e);
              if (!t) throw new Error("RTCRtpReceiver not found");
              return t.getStats();
            }
            async receiveDataChannel(e) {
              throw new o.UnsupportedError("not implemented");
            }
            _setIceGatherer({ iceServers: e, iceTransportPolicy: t }) {
              const r = new RTCIceGatherer({
                iceServers: e || [],
                gatherPolicy: t || "all",
              });
              r.addEventListener("error", (e) => {
                p.error('iceGatherer "error" event [event:%o]', e);
              });
              try {
                r.gather();
              } catch (e) {
                p.debug(
                  "_setIceGatherer() | iceGatherer.gather() failed: %s",
                  e.toString()
                );
              }
              this._iceGatherer = r;
            }
            _setIceTransport() {
              const e = new RTCIceTransport(this._iceGatherer);
              e.addEventListener("statechange", () => {
                switch (e.state) {
                  case "checking":
                    this.emit("@connectionstatechange", "connecting");
                    break;
                  case "connected":
                  case "completed":
                    this.emit("@connectionstatechange", "connected");
                    break;
                  case "failed":
                    this.emit("@connectionstatechange", "failed");
                    break;
                  case "disconnected":
                    this.emit("@connectionstatechange", "disconnected");
                    break;
                  case "closed":
                    this.emit("@connectionstatechange", "closed");
                }
              }),
                e.addEventListener("icestatechange", () => {
                  switch (e.state) {
                    case "checking":
                      this.emit("@connectionstatechange", "connecting");
                      break;
                    case "connected":
                    case "completed":
                      this.emit("@connectionstatechange", "connected");
                      break;
                    case "failed":
                      this.emit("@connectionstatechange", "failed");
                      break;
                    case "disconnected":
                      this.emit("@connectionstatechange", "disconnected");
                      break;
                    case "closed":
                      this.emit("@connectionstatechange", "closed");
                  }
                }),
                e.addEventListener("candidatepairchange", (e) => {
                  p.debug(
                    'iceTransport "candidatepairchange" event [pair:%o]',
                    e.pair
                  );
                }),
                (this._iceTransport = e);
            }
            _setDtlsTransport() {
              const e = new RTCDtlsTransport(this._iceTransport);
              e.addEventListener("statechange", () => {
                p.debug(
                  'dtlsTransport "statechange" event [state:%s]',
                  e.state
                );
              }),
                e.addEventListener("dtlsstatechange", () => {
                  p.debug(
                    'dtlsTransport "dtlsstatechange" event [state:%s]',
                    e.state
                  ),
                    "closed" === e.state &&
                      this.emit("@connectionstatechange", "closed");
                }),
                e.addEventListener("error", (e) => {
                  p.error('dtlsTransport "error" event [event:%o]', e);
                }),
                (this._dtlsTransport = e);
            }
            async _setupTransport({ localDtlsRole: e }) {
              p.debug("_setupTransport()");
              const t = this._dtlsTransport.getLocalParameters();
              (t.role = e),
                await this.safeEmitAsPromise("@connect", { dtlsParameters: t }),
                this._iceTransport.start(
                  this._iceGatherer,
                  this._remoteIceParameters,
                  "controlling"
                );
              for (const e of this._remoteIceCandidates)
                this._iceTransport.addRemoteCandidate(e);
              this._iceTransport.addRemoteCandidate({}),
                (this._remoteDtlsParameters.fingerprints =
                  this._remoteDtlsParameters.fingerprints.filter(
                    (e) =>
                      "sha-256" === e.algorithm ||
                      "sha-384" === e.algorithm ||
                      "sha-512" === e.algorithm
                  )),
                this._dtlsTransport.start(this._remoteDtlsParameters),
                (this._transportReady = !0);
            }
          }
          t.Edge11 = h;
        },
        1419: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Firefox60 = void 0);
          const s = i(r(766)),
            o = r(8562),
            c = r(9992),
            d = i(r(3347)),
            l = i(r(5280)),
            u = i(r(2267)),
            p = i(r(9072)),
            h = r(9316),
            m = r(7910),
            f = new o.Logger("Firefox60"),
            v = { OS: 16, MIS: 2048 };
          class _ extends h.HandlerInterface {
            constructor() {
              super(),
                (this._mapMidTransceiver = new Map()),
                (this._sendStream = new MediaStream()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            static createFactory() {
              return () => new _();
            }
            get name() {
              return "Firefox60";
            }
            close() {
              if ((f.debug("close()"), this._pc))
                try {
                  this._pc.close();
                } catch (e) {}
            }
            async getNativeRtpCapabilities() {
              f.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                }),
                t = document.createElement("canvas");
              t.getContext("2d");
              const r = t.captureStream().getVideoTracks()[0];
              try {
                e.addTransceiver("audio", { direction: "sendrecv" });
                const n = e.addTransceiver(r, { direction: "sendrecv" }),
                  a = n.sender.getParameters(),
                  i = [
                    { rid: "r0", maxBitrate: 1e5 },
                    { rid: "r1", maxBitrate: 5e5 },
                  ];
                (a.encodings = i), await n.sender.setParameters(a);
                const o = await e.createOffer();
                try {
                  t.remove();
                } catch (e) {}
                try {
                  r.stop();
                } catch (e) {}
                try {
                  e.close();
                } catch (e) {}
                const c = s.parse(o.sdp);
                return u.extractRtpCapabilities({ sdpObject: c });
              } catch (n) {
                try {
                  t.remove();
                } catch (e) {}
                try {
                  r.stop();
                } catch (e) {}
                try {
                  e.close();
                } catch (e) {}
                throw n;
              }
            }
            async getNativeSctpCapabilities() {
              return f.debug("getNativeSctpCapabilities()"), { numStreams: v };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: a,
              iceServers: i,
              iceTransportPolicy: s,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: d,
            }) {
              f.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new m.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: a,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: l.getSendingRtpParameters("audio", d),
                  video: l.getSendingRtpParameters("video", d),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: l.getSendingRemoteRtpParameters("audio", d),
                  video: l.getSendingRemoteRtpParameters("video", d),
                }),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: i || [],
                    iceTransportPolicy: s || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("iceconnectionstatechange", () => {
                  switch (this._pc.iceConnectionState) {
                    case "checking":
                      this.emit("@connectionstatechange", "connecting");
                      break;
                    case "connected":
                    case "completed":
                      this.emit("@connectionstatechange", "connected");
                      break;
                    case "failed":
                      this.emit("@connectionstatechange", "failed");
                      break;
                    case "disconnected":
                      this.emit("@connectionstatechange", "disconnected");
                      break;
                    case "closed":
                      this.emit("@connectionstatechange", "closed");
                  }
                });
            }
            async updateIceServers(e) {
              throw new c.UnsupportedError("not supported");
            }
            async restartIce(e) {
              if (
                (f.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              this._assertSendDirection(),
                f.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                t &&
                  (t = d.clone(t, [])).length > 1 &&
                  (t.forEach((e, t) => {
                    e.rid = `r${t}`;
                  }),
                  t.reverse());
              const a = d.clone(this._sendingRtpParametersByKind[e.kind], {});
              a.codecs = l.reduceCodecs(a.codecs, n);
              const i = d.clone(
                this._sendingRemoteRtpParametersByKind[e.kind],
                {}
              );
              i.codecs = l.reduceCodecs(i.codecs, n);
              const o = this._pc.addTransceiver(e, {
                direction: "sendonly",
                streams: [this._sendStream],
              });
              if (t) {
                const e = o.sender.getParameters();
                (e.encodings = t), await o.sender.setParameters(e);
              }
              const c = await this._pc.createOffer();
              let h = s.parse(c.sdp);
              this._transportReady ||
                (await this._setupTransport({
                  localDtlsRole: "client",
                  localSdpObject: h,
                })),
                f.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  c
                ),
                await this._pc.setLocalDescription(c);
              const m = o.mid;
              (a.mid = m), (h = s.parse(this._pc.localDescription.sdp));
              const v = h.media[h.media.length - 1];
              if (((a.rtcp.cname = u.getCname({ offerMediaObject: v })), t))
                if (1 === t.length) {
                  const e = p.getRtpEncodings({ offerMediaObject: v });
                  Object.assign(e[0], t[0]), (a.encodings = e);
                } else a.encodings = t.reverse();
              else a.encodings = p.getRtpEncodings({ offerMediaObject: v });
              if (
                a.encodings.length > 1 &&
                ("video/vp8" === a.codecs[0].mimeType.toLowerCase() ||
                  "video/h264" === a.codecs[0].mimeType.toLowerCase())
              )
                for (const e of a.encodings) e.scalabilityMode = "S1T3";
              this._remoteSdp.send({
                offerMediaObject: v,
                offerRtpParameters: a,
                answerRtpParameters: i,
                codecOptions: r,
                extmapAllowMixed: !0,
              });
              const _ = { type: "answer", sdp: this._remoteSdp.getSdp() };
              return (
                f.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  _
                ),
                await this._pc.setRemoteDescription(_),
                this._mapMidTransceiver.set(m, o),
                { localId: m, rtpParameters: a, rtpSender: o.sender }
              );
            }
            async stopSending(e) {
              f.debug("stopSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated transceiver not found");
              t.sender.replaceTrack(null),
                this._pc.removeTrack(t.sender),
                this._remoteSdp.disableMediaSection(t.mid);
              const r = await this._pc.createOffer();
              f.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n),
                this._mapMidTransceiver.delete(e);
            }
            async replaceTrack(e, t) {
              this._assertSendDirection(),
                t
                  ? f.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : f.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              await r.sender.replaceTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this._assertSendDirection(),
                f.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated transceiver not found");
              const n = r.sender.getParameters();
              (t = n.encodings.length - 1 - t),
                n.encodings.forEach((e, r) => {
                  e.active = r >= t;
                }),
                await r.sender.setParameters(n);
            }
            async setRtpEncodingParameters(e, t) {
              this._assertSendDirection(),
                f.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const n = r.sender.getParameters();
              n.encodings.forEach((e, r) => {
                n.encodings[r] = { ...e, ...t };
              }),
                await r.sender.setParameters(n);
            }
            async getSenderStats(e) {
              this._assertSendDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.sender.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n,
              protocol: a,
            }) {
              this._assertSendDirection();
              const i = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmits: r,
                protocol: a,
              };
              f.debug("sendDataChannel() [options:%o]", i);
              const o = this._pc.createDataChannel(n, i);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % v.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = s.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole: "client",
                    localSdpObject: t,
                  })),
                  f.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  n
                ),
                  await this._pc.setRemoteDescription(n),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: o,
                sctpStreamParameters: {
                  streamId: i.id,
                  ordered: i.ordered,
                  maxPacketLifeTime: i.maxPacketLifeTime,
                  maxRetransmits: i.maxRetransmits,
                },
              };
            }
            async receive({ trackId: e, kind: t, rtpParameters: r }) {
              this._assertRecvDirection(),
                f.debug("receive() [trackId:%s, kind:%s]", e, t);
              const n = r.mid || String(this._mapMidTransceiver.size);
              this._remoteSdp.receive({
                mid: n,
                kind: t,
                offerRtpParameters: r,
                streamId: r.rtcp.cname,
                trackId: e,
              });
              const a = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a);
              let i = await this._pc.createAnswer();
              const o = s.parse(i.sdp),
                c = o.media.find((e) => String(e.mid) === n);
              u.applyCodecParameters({
                offerRtpParameters: r,
                answerMediaObject: c,
              }),
                (i = { type: "answer", sdp: s.write(o) }),
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole: "client",
                    localSdpObject: o,
                  })),
                f.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  i
                ),
                await this._pc.setLocalDescription(i);
              const d = this._pc.getTransceivers().find((e) => e.mid === n);
              if (!d) throw new Error("new RTCRtpTransceiver not found");
              return (
                this._mapMidTransceiver.set(n, d),
                { localId: n, track: d.receiver.track, rtpReceiver: d.receiver }
              );
            }
            async stopReceiving(e) {
              this._assertRecvDirection(),
                f.debug("stopReceiving() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              this._remoteSdp.closeMediaSection(t.mid);
              const r = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                r
              ),
                await this._pc.setRemoteDescription(r);
              const n = await this._pc.createAnswer();
              f.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n),
                this._mapMidTransceiver.delete(e);
            }
            async pauseReceiving(e) {
              this._assertRecvDirection(),
                f.debug("pauseReceiving() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              t.direction = "inactive";
              const r = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                r
              ),
                await this._pc.setRemoteDescription(r);
              const n = await this._pc.createAnswer();
              f.debug(
                "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n);
            }
            async resumeReceiving(e) {
              this._assertRecvDirection(),
                f.debug("resumeReceiving() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              t.direction = "recvonly";
              const r = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                r
              ),
                await this._pc.setRemoteDescription(r);
              const n = await this._pc.createAnswer();
              f.debug(
                "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n);
            }
            async getReceiverStats(e) {
              this._assertRecvDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.receiver.getStats();
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              this._assertRecvDirection();
              const {
                  streamId: n,
                  ordered: a,
                  maxPacketLifeTime: i,
                  maxRetransmits: o,
                } = e,
                c = {
                  negotiated: !0,
                  id: n,
                  ordered: a,
                  maxPacketLifeTime: i,
                  maxRetransmits: o,
                  protocol: r,
                };
              f.debug("receiveDataChannel() [options:%o]", c);
              const d = this._pc.createDataChannel(t, c);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation();
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = s.parse(t.sdp);
                  await this._setupTransport({
                    localDtlsRole: "client",
                    localSdpObject: e,
                  });
                }
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: d };
            }
            async _setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = s.parse(this._pc.localDescription.sdp));
              const r = u.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await this.safeEmitAsPromise("@connect", { dtlsParameters: r }),
                (this._transportReady = !0);
            }
            _assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            _assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Firefox60 = _;
        },
        9316: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.HandlerInterface = void 0);
          const n = r(4493);
          class a extends n.EnhancedEventEmitter {
            constructor() {
              super();
            }
          }
          t.HandlerInterface = a;
        },
        4770: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.ReactNative = void 0);
          const s = i(r(766)),
            o = r(8562),
            c = r(9992),
            d = i(r(3347)),
            l = i(r(5280)),
            u = i(r(2267)),
            p = i(r(9875)),
            h = r(9316),
            m = r(7910),
            f = new o.Logger("ReactNative"),
            v = { OS: 1024, MIS: 1024 };
          class _ extends h.HandlerInterface {
            constructor() {
              super(),
                (this._sendStream = new MediaStream()),
                (this._mapSendLocalIdTrack = new Map()),
                (this._nextSendLocalId = 0),
                (this._mapRecvLocalIdInfo = new Map()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            static createFactory() {
              return () => new _();
            }
            get name() {
              return "ReactNative";
            }
            close() {
              if ((f.debug("close()"), this._sendStream.release(!1), this._pc))
                try {
                  this._pc.close();
                } catch (e) {}
            }
            async getNativeRtpCapabilities() {
              f.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
                sdpSemantics: "plan-b",
              });
              try {
                const t = await e.createOffer({
                  offerToReceiveAudio: !0,
                  offerToReceiveVideo: !0,
                });
                try {
                  e.close();
                } catch (e) {}
                const r = s.parse(t.sdp);
                return u.extractRtpCapabilities({ sdpObject: r });
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return f.debug("getNativeSctpCapabilities()"), { numStreams: v };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: a,
              iceServers: i,
              iceTransportPolicy: s,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: d,
            }) {
              f.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new m.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: a,
                  planB: !0,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: l.getSendingRtpParameters("audio", d),
                  video: l.getSendingRtpParameters("video", d),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: l.getSendingRemoteRtpParameters("audio", d),
                  video: l.getSendingRemoteRtpParameters("video", d),
                }),
                n.role &&
                  "auto" !== n.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === n.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: i || [],
                    iceTransportPolicy: s || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "plan-b",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("iceconnectionstatechange", () => {
                  switch (this._pc.iceConnectionState) {
                    case "checking":
                      this.emit("@connectionstatechange", "connecting");
                      break;
                    case "connected":
                    case "completed":
                      this.emit("@connectionstatechange", "connected");
                      break;
                    case "failed":
                      this.emit("@connectionstatechange", "failed");
                      break;
                    case "disconnected":
                      this.emit("@connectionstatechange", "disconnected");
                      break;
                    case "closed":
                      this.emit("@connectionstatechange", "closed");
                  }
                });
            }
            async updateIceServers(e) {
              f.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (f.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              var a;
              this._assertSendDirection(),
                f.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                n &&
                  f.warn(
                    "send() | codec selection is not available in %s handler",
                    this.name
                  ),
                this._sendStream.addTrack(e),
                this._pc.addStream(this._sendStream);
              let i,
                o = await this._pc.createOffer(),
                c = s.parse(o.sdp);
              const h = d.clone(this._sendingRtpParametersByKind[e.kind], {});
              h.codecs = l.reduceCodecs(h.codecs);
              const m = d.clone(
                this._sendingRemoteRtpParametersByKind[e.kind],
                {}
              );
              if (
                ((m.codecs = l.reduceCodecs(m.codecs)),
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (a = this._forcedLocalDtlsRole) && void 0 !== a
                        ? a
                        : "client",
                    localSdpObject: c,
                  })),
                "video" === e.kind &&
                  t &&
                  t.length > 1 &&
                  (f.debug("send() | enabling simulcast"),
                  (c = s.parse(o.sdp)),
                  (i = c.media.find((e) => "video" === e.type)),
                  p.addLegacySimulcast({
                    offerMediaObject: i,
                    track: e,
                    numStreams: t.length,
                  }),
                  (o = { type: "offer", sdp: s.write(c) })),
                f.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  o
                ),
                await this._pc.setLocalDescription(o),
                (c = s.parse(this._pc.localDescription.sdp)),
                (i = c.media.find((t) => t.type === e.kind)),
                (h.rtcp.cname = u.getCname({ offerMediaObject: i })),
                (h.encodings = p.getRtpEncodings({
                  offerMediaObject: i,
                  track: e,
                })),
                t)
              )
                for (let e = 0; e < h.encodings.length; ++e)
                  t[e] && Object.assign(h.encodings[e], t[e]);
              if (
                h.encodings.length > 1 &&
                ("video/vp8" === h.codecs[0].mimeType.toLowerCase() ||
                  "video/h264" === h.codecs[0].mimeType.toLowerCase())
              )
                for (const e of h.encodings) e.scalabilityMode = "S1T3";
              this._remoteSdp.send({
                offerMediaObject: i,
                offerRtpParameters: h,
                answerRtpParameters: m,
                codecOptions: r,
              });
              const v = { type: "answer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "send() | calling pc.setRemoteDescription() [answer:%o]",
                v
              ),
                await this._pc.setRemoteDescription(v);
              const _ = String(this._nextSendLocalId);
              return (
                this._nextSendLocalId++,
                this._mapSendLocalIdTrack.set(_, e),
                { localId: _, rtpParameters: h }
              );
            }
            async stopSending(e) {
              this._assertSendDirection(),
                f.debug("stopSending() [localId:%s]", e);
              const t = this._mapSendLocalIdTrack.get(e);
              if (!t) throw new Error("track not found");
              this._mapSendLocalIdTrack.delete(e),
                this._sendStream.removeTrack(t),
                this._pc.addStream(this._sendStream);
              const r = await this._pc.createOffer();
              f.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              );
              try {
                await this._pc.setLocalDescription(r);
              } catch (e) {
                if (0 === this._sendStream.getTracks().length)
                  return void f.warn(
                    "stopSending() | ignoring expected error due no sending tracks: %s",
                    e.toString()
                  );
                throw e;
              }
              if ("stable" === this._pc.signalingState) return;
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
            }
            async replaceTrack(e, t) {
              throw new c.UnsupportedError("not implemented");
            }
            async setMaxSpatialLayer(e, t) {
              throw new c.UnsupportedError("not implemented");
            }
            async setRtpEncodingParameters(e, t) {
              throw new c.UnsupportedError("not implemented");
            }
            async getSenderStats(e) {
              throw new c.UnsupportedError("not implemented");
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n,
              protocol: a,
            }) {
              var i;
              this._assertSendDirection();
              const o = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmitTime: t,
                maxRetransmits: r,
                protocol: a,
              };
              f.debug("sendDataChannel() [options:%o]", o);
              const c = this._pc.createDataChannel(n, o);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % v.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = s.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (i = this._forcedLocalDtlsRole) && void 0 !== i
                        ? i
                        : "client",
                    localSdpObject: t,
                  })),
                  f.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  n
                ),
                  await this._pc.setRemoteDescription(n),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: c,
                sctpStreamParameters: {
                  streamId: o.id,
                  ordered: o.ordered,
                  maxPacketLifeTime: o.maxPacketLifeTime,
                  maxRetransmits: o.maxRetransmits,
                },
              };
            }
            async receive({ trackId: e, kind: t, rtpParameters: r }) {
              var n;
              this._assertRecvDirection(),
                f.debug("receive() [trackId:%s, kind:%s]", e, t);
              const a = e,
                i = t;
              let o = r.rtcp.cname;
              f.debug(
                "receive() | forcing a random remote streamId to avoid well known bug in react-native-webrtc"
              ),
                (o += `-hack-${d.generateRandomNumber()}`),
                this._remoteSdp.receive({
                  mid: i,
                  kind: t,
                  offerRtpParameters: r,
                  streamId: o,
                  trackId: e,
                });
              const c = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                c
              ),
                await this._pc.setRemoteDescription(c);
              let l = await this._pc.createAnswer();
              const p = s.parse(l.sdp),
                h = p.media.find((e) => String(e.mid) === i);
              u.applyCodecParameters({
                offerRtpParameters: r,
                answerMediaObject: h,
              }),
                (l = { type: "answer", sdp: s.write(p) }),
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (n = this._forcedLocalDtlsRole) && void 0 !== n
                        ? n
                        : "client",
                    localSdpObject: p,
                  })),
                f.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  l
                ),
                await this._pc.setLocalDescription(l);
              const m = this._pc
                .getRemoteStreams()
                .find((e) => e.id === o)
                .getTrackById(a);
              if (!m) throw new Error("remote track not found");
              return (
                this._mapRecvLocalIdInfo.set(a, { mid: i, rtpParameters: r }),
                { localId: a, track: m }
              );
            }
            async stopReceiving(e) {
              this._assertRecvDirection(),
                f.debug("stopReceiving() [localId:%s]", e);
              const { mid: t, rtpParameters: r } =
                this._mapRecvLocalIdInfo.get(e) || {};
              this._mapRecvLocalIdInfo.delete(e),
                this._remoteSdp.planBStopReceiving({
                  mid: t,
                  offerRtpParameters: r,
                });
              const n = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
              const a = await this._pc.createAnswer();
              f.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                a
              ),
                await this._pc.setLocalDescription(a);
            }
            async pauseReceiving(e) {}
            async resumeReceiving(e) {}
            async getReceiverStats(e) {
              throw new c.UnsupportedError("not implemented");
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              var n;
              this._assertRecvDirection();
              const {
                  streamId: a,
                  ordered: i,
                  maxPacketLifeTime: o,
                  maxRetransmits: c,
                } = e,
                d = {
                  negotiated: !0,
                  id: a,
                  ordered: i,
                  maxPacketLifeTime: o,
                  maxRetransmitTime: o,
                  maxRetransmits: c,
                  protocol: r,
                };
              f.debug("receiveDataChannel() [options:%o]", d);
              const l = this._pc.createDataChannel(t, d);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation({
                  oldDataChannelSpec: !0,
                });
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = s.parse(t.sdp);
                  await this._setupTransport({
                    localDtlsRole:
                      null !== (n = this._forcedLocalDtlsRole) && void 0 !== n
                        ? n
                        : "client",
                    localSdpObject: e,
                  });
                }
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: l };
            }
            async _setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = s.parse(this._pc.localDescription.sdp));
              const r = u.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await this.safeEmitAsPromise("@connect", { dtlsParameters: r }),
                (this._transportReady = !0);
            }
            _assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            _assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.ReactNative = _;
        },
        2205: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Safari11 = void 0);
          const s = i(r(766)),
            o = r(8562),
            c = i(r(3347)),
            d = i(r(5280)),
            l = i(r(2267)),
            u = i(r(9875)),
            p = r(9316),
            h = r(7910),
            m = new o.Logger("Safari11"),
            f = { OS: 1024, MIS: 1024 };
          class v extends p.HandlerInterface {
            constructor() {
              super(),
                (this._sendStream = new MediaStream()),
                (this._mapSendLocalIdRtpSender = new Map()),
                (this._nextSendLocalId = 0),
                (this._mapRecvLocalIdInfo = new Map()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            static createFactory() {
              return () => new v();
            }
            get name() {
              return "Safari11";
            }
            close() {
              if ((m.debug("close()"), this._pc))
                try {
                  this._pc.close();
                } catch (e) {}
            }
            async getNativeRtpCapabilities() {
              m.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
                sdpSemantics: "plan-b",
              });
              try {
                const t = await e.createOffer({
                  offerToReceiveAudio: !0,
                  offerToReceiveVideo: !0,
                });
                try {
                  e.close();
                } catch (e) {}
                const r = s.parse(t.sdp);
                return l.extractRtpCapabilities({ sdpObject: r });
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return m.debug("getNativeSctpCapabilities()"), { numStreams: f };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: a,
              iceServers: i,
              iceTransportPolicy: s,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: l,
            }) {
              m.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new h.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: a,
                  planB: !0,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l),
                  video: d.getSendingRtpParameters("video", l),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l),
                  video: d.getSendingRemoteRtpParameters("video", l),
                }),
                n.role &&
                  "auto" !== n.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === n.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: i || [],
                    iceTransportPolicy: s || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("iceconnectionstatechange", () => {
                  switch (this._pc.iceConnectionState) {
                    case "checking":
                      this.emit("@connectionstatechange", "connecting");
                      break;
                    case "connected":
                    case "completed":
                      this.emit("@connectionstatechange", "connected");
                      break;
                    case "failed":
                      this.emit("@connectionstatechange", "failed");
                      break;
                    case "disconnected":
                      this.emit("@connectionstatechange", "disconnected");
                      break;
                    case "closed":
                      this.emit("@connectionstatechange", "closed");
                  }
                });
            }
            async updateIceServers(e) {
              m.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (m.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  m.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  m.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  m.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  m.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              var a;
              this._assertSendDirection(),
                m.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                n &&
                  m.warn(
                    "send() | codec selection is not available in %s handler",
                    this.name
                  ),
                this._sendStream.addTrack(e),
                this._pc.addTrack(e, this._sendStream);
              let i,
                o = await this._pc.createOffer(),
                p = s.parse(o.sdp);
              const h = c.clone(this._sendingRtpParametersByKind[e.kind], {});
              h.codecs = d.reduceCodecs(h.codecs);
              const f = c.clone(
                this._sendingRemoteRtpParametersByKind[e.kind],
                {}
              );
              if (
                ((f.codecs = d.reduceCodecs(f.codecs)),
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (a = this._forcedLocalDtlsRole) && void 0 !== a
                        ? a
                        : "client",
                    localSdpObject: p,
                  })),
                "video" === e.kind &&
                  t &&
                  t.length > 1 &&
                  (m.debug("send() | enabling simulcast"),
                  (p = s.parse(o.sdp)),
                  (i = p.media.find((e) => "video" === e.type)),
                  u.addLegacySimulcast({
                    offerMediaObject: i,
                    track: e,
                    numStreams: t.length,
                  }),
                  (o = { type: "offer", sdp: s.write(p) })),
                m.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  o
                ),
                await this._pc.setLocalDescription(o),
                (p = s.parse(this._pc.localDescription.sdp)),
                (i = p.media.find((t) => t.type === e.kind)),
                (h.rtcp.cname = l.getCname({ offerMediaObject: i })),
                (h.encodings = u.getRtpEncodings({
                  offerMediaObject: i,
                  track: e,
                })),
                t)
              )
                for (let e = 0; e < h.encodings.length; ++e)
                  t[e] && Object.assign(h.encodings[e], t[e]);
              if (
                h.encodings.length > 1 &&
                "video/vp8" === h.codecs[0].mimeType.toLowerCase()
              )
                for (const e of h.encodings) e.scalabilityMode = "S1T3";
              this._remoteSdp.send({
                offerMediaObject: i,
                offerRtpParameters: h,
                answerRtpParameters: f,
                codecOptions: r,
              });
              const v = { type: "answer", sdp: this._remoteSdp.getSdp() };
              m.debug(
                "send() | calling pc.setRemoteDescription() [answer:%o]",
                v
              ),
                await this._pc.setRemoteDescription(v);
              const _ = String(this._nextSendLocalId);
              this._nextSendLocalId++;
              const g = this._pc.getSenders().find((t) => t.track === e);
              return (
                this._mapSendLocalIdRtpSender.set(_, g),
                { localId: _, rtpParameters: h, rtpSender: g }
              );
            }
            async stopSending(e) {
              this._assertSendDirection();
              const t = this._mapSendLocalIdRtpSender.get(e);
              if (!t) throw new Error("associated RTCRtpSender not found");
              t.track && this._sendStream.removeTrack(t.track),
                this._mapSendLocalIdRtpSender.delete(e);
              const r = await this._pc.createOffer();
              m.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              );
              try {
                await this._pc.setLocalDescription(r);
              } catch (e) {
                if (0 === this._sendStream.getTracks().length)
                  return void m.warn(
                    "stopSending() | ignoring expected error due no sending tracks: %s",
                    e.toString()
                  );
                throw e;
              }
              if ("stable" === this._pc.signalingState) return;
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              m.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
            }
            async replaceTrack(e, t) {
              this._assertSendDirection(),
                t
                  ? m.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : m.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapSendLocalIdRtpSender.get(e);
              if (!r) throw new Error("associated RTCRtpSender not found");
              const n = r.track;
              await r.replaceTrack(t),
                n && this._sendStream.removeTrack(n),
                t && this._sendStream.addTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this._assertSendDirection(),
                m.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapSendLocalIdRtpSender.get(e);
              if (!r) throw new Error("associated RTCRtpSender not found");
              const n = r.getParameters();
              n.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.setParameters(n);
            }
            async setRtpEncodingParameters(e, t) {
              this._assertSendDirection(),
                m.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapSendLocalIdRtpSender.get(e);
              if (!r) throw new Error("associated RTCRtpSender not found");
              const n = r.getParameters();
              n.encodings.forEach((e, r) => {
                n.encodings[r] = { ...e, ...t };
              }),
                await r.setParameters(n);
            }
            async getSenderStats(e) {
              this._assertSendDirection();
              const t = this._mapSendLocalIdRtpSender.get(e);
              if (!t) throw new Error("associated RTCRtpSender not found");
              return t.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n,
              protocol: a,
            }) {
              var i;
              this._assertSendDirection();
              const o = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmits: r,
                protocol: a,
              };
              m.debug("sendDataChannel() [options:%o]", o);
              const c = this._pc.createDataChannel(n, o);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % f.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = s.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (i = this._forcedLocalDtlsRole) && void 0 !== i
                        ? i
                        : "client",
                    localSdpObject: t,
                  })),
                  m.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  n
                ),
                  await this._pc.setRemoteDescription(n),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: c,
                sctpStreamParameters: {
                  streamId: o.id,
                  ordered: o.ordered,
                  maxPacketLifeTime: o.maxPacketLifeTime,
                  maxRetransmits: o.maxRetransmits,
                },
              };
            }
            async receive({ trackId: e, kind: t, rtpParameters: r }) {
              var n;
              this._assertRecvDirection(),
                m.debug("receive() [trackId:%s, kind:%s]", e, t);
              const a = e,
                i = t;
              this._remoteSdp.receive({
                mid: i,
                kind: t,
                offerRtpParameters: r,
                streamId: r.rtcp.cname,
                trackId: e,
              });
              const o = { type: "offer", sdp: this._remoteSdp.getSdp() };
              m.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                o
              ),
                await this._pc.setRemoteDescription(o);
              let c = await this._pc.createAnswer();
              const d = s.parse(c.sdp),
                u = d.media.find((e) => String(e.mid) === i);
              l.applyCodecParameters({
                offerRtpParameters: r,
                answerMediaObject: u,
              }),
                (c = { type: "answer", sdp: s.write(d) }),
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (n = this._forcedLocalDtlsRole) && void 0 !== n
                        ? n
                        : "client",
                    localSdpObject: d,
                  })),
                m.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  c
                ),
                await this._pc.setLocalDescription(c);
              const p = this._pc
                .getReceivers()
                .find((e) => e.track && e.track.id === a);
              if (!p) throw new Error("new RTCRtpReceiver not");
              return (
                this._mapRecvLocalIdInfo.set(a, {
                  mid: i,
                  rtpParameters: r,
                  rtpReceiver: p,
                }),
                { localId: a, track: p.track, rtpReceiver: p }
              );
            }
            async stopReceiving(e) {
              this._assertRecvDirection(),
                m.debug("stopReceiving() [localId:%s]", e);
              const { mid: t, rtpParameters: r } =
                this._mapRecvLocalIdInfo.get(e) || {};
              this._mapRecvLocalIdInfo.delete(e),
                this._remoteSdp.planBStopReceiving({
                  mid: t,
                  offerRtpParameters: r,
                });
              const n = { type: "offer", sdp: this._remoteSdp.getSdp() };
              m.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
              const a = await this._pc.createAnswer();
              m.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                a
              ),
                await this._pc.setLocalDescription(a);
            }
            async getReceiverStats(e) {
              this._assertRecvDirection();
              const { rtpReceiver: t } = this._mapRecvLocalIdInfo.get(e) || {};
              if (!t) throw new Error("associated RTCRtpReceiver not found");
              return t.getStats();
            }
            async pauseReceiving(e) {}
            async resumeReceiving(e) {}
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              var n;
              this._assertRecvDirection();
              const {
                  streamId: a,
                  ordered: i,
                  maxPacketLifeTime: o,
                  maxRetransmits: c,
                } = e,
                d = {
                  negotiated: !0,
                  id: a,
                  ordered: i,
                  maxPacketLifeTime: o,
                  maxRetransmits: c,
                  protocol: r,
                };
              m.debug("receiveDataChannel() [options:%o]", d);
              const l = this._pc.createDataChannel(t, d);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation({
                  oldDataChannelSpec: !0,
                });
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = s.parse(t.sdp);
                  await this._setupTransport({
                    localDtlsRole:
                      null !== (n = this._forcedLocalDtlsRole) && void 0 !== n
                        ? n
                        : "client",
                    localSdpObject: e,
                  });
                }
                m.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: l };
            }
            async _setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = s.parse(this._pc.localDescription.sdp));
              const r = l.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await this.safeEmitAsPromise("@connect", { dtlsParameters: r }),
                (this._transportReady = !0);
            }
            _assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            _assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Safari11 = v;
        },
        9862: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Safari12 = void 0);
          const s = i(r(766)),
            o = r(8562),
            c = i(r(3347)),
            d = i(r(5280)),
            l = i(r(2267)),
            u = i(r(9072)),
            p = r(9316),
            h = r(7910),
            m = new o.Logger("Safari12"),
            f = { OS: 1024, MIS: 1024 };
          class v extends p.HandlerInterface {
            constructor() {
              super(),
                (this._mapMidTransceiver = new Map()),
                (this._sendStream = new MediaStream()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            static createFactory() {
              return () => new v();
            }
            get name() {
              return "Safari12";
            }
            close() {
              if ((m.debug("close()"), this._pc))
                try {
                  this._pc.close();
                } catch (e) {}
            }
            async getNativeRtpCapabilities() {
              m.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
              });
              try {
                e.addTransceiver("audio"), e.addTransceiver("video");
                const t = await e.createOffer();
                try {
                  e.close();
                } catch (e) {}
                const r = s.parse(t.sdp);
                return l.extractRtpCapabilities({ sdpObject: r });
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return m.debug("getNativeSctpCapabilities()"), { numStreams: f };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: a,
              iceServers: i,
              iceTransportPolicy: s,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: l,
            }) {
              m.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new h.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: a,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l),
                  video: d.getSendingRtpParameters("video", l),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l),
                  video: d.getSendingRemoteRtpParameters("video", l),
                }),
                n.role &&
                  "auto" !== n.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === n.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: i || [],
                    iceTransportPolicy: s || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("iceconnectionstatechange", () => {
                  switch (this._pc.iceConnectionState) {
                    case "checking":
                      this.emit("@connectionstatechange", "connecting");
                      break;
                    case "connected":
                    case "completed":
                      this.emit("@connectionstatechange", "connected");
                      break;
                    case "failed":
                      this.emit("@connectionstatechange", "failed");
                      break;
                    case "disconnected":
                      this.emit("@connectionstatechange", "disconnected");
                      break;
                    case "closed":
                      this.emit("@connectionstatechange", "closed");
                  }
                });
            }
            async updateIceServers(e) {
              m.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (m.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  m.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  m.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  m.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  m.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              var a;
              this._assertSendDirection(),
                m.debug("send() [kind:%s, track.id:%s]", e.kind, e.id);
              const i = c.clone(this._sendingRtpParametersByKind[e.kind], {});
              i.codecs = d.reduceCodecs(i.codecs, n);
              const o = c.clone(
                this._sendingRemoteRtpParametersByKind[e.kind],
                {}
              );
              o.codecs = d.reduceCodecs(o.codecs, n);
              const p = this._remoteSdp.getNextMediaSectionIdx(),
                h = this._pc.addTransceiver(e, {
                  direction: "sendonly",
                  streams: [this._sendStream],
                });
              let f,
                v = await this._pc.createOffer(),
                _ = s.parse(v.sdp);
              this._transportReady ||
                (await this._setupTransport({
                  localDtlsRole:
                    null !== (a = this._forcedLocalDtlsRole) && void 0 !== a
                      ? a
                      : "client",
                  localSdpObject: _,
                })),
                t &&
                  t.length > 1 &&
                  (m.debug("send() | enabling legacy simulcast"),
                  (_ = s.parse(v.sdp)),
                  (f = _.media[p.idx]),
                  u.addLegacySimulcast({
                    offerMediaObject: f,
                    numStreams: t.length,
                  }),
                  (v = { type: "offer", sdp: s.write(_) })),
                m.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  v
                ),
                await this._pc.setLocalDescription(v);
              const g = h.mid;
              if (
                ((i.mid = g),
                (_ = s.parse(this._pc.localDescription.sdp)),
                (f = _.media[p.idx]),
                (i.rtcp.cname = l.getCname({ offerMediaObject: f })),
                (i.encodings = u.getRtpEncodings({ offerMediaObject: f })),
                t)
              )
                for (let e = 0; e < i.encodings.length; ++e)
                  t[e] && Object.assign(i.encodings[e], t[e]);
              if (
                i.encodings.length > 1 &&
                ("video/vp8" === i.codecs[0].mimeType.toLowerCase() ||
                  "video/h264" === i.codecs[0].mimeType.toLowerCase())
              )
                for (const e of i.encodings) e.scalabilityMode = "S1T3";
              this._remoteSdp.send({
                offerMediaObject: f,
                reuseMid: p.reuseMid,
                offerRtpParameters: i,
                answerRtpParameters: o,
                codecOptions: r,
              });
              const y = { type: "answer", sdp: this._remoteSdp.getSdp() };
              return (
                m.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  y
                ),
                await this._pc.setRemoteDescription(y),
                this._mapMidTransceiver.set(g, h),
                { localId: g, rtpParameters: i, rtpSender: h.sender }
              );
            }
            async stopSending(e) {
              this._assertSendDirection(),
                m.debug("stopSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              t.sender.replaceTrack(null),
                this._pc.removeTrack(t.sender),
                this._remoteSdp.closeMediaSection(t.mid);
              const r = await this._pc.createOffer();
              m.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              m.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n),
                this._mapMidTransceiver.delete(e);
            }
            async replaceTrack(e, t) {
              this._assertSendDirection(),
                t
                  ? m.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : m.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              await r.sender.replaceTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this._assertSendDirection(),
                m.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const n = r.sender.getParameters();
              n.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.sender.setParameters(n);
            }
            async setRtpEncodingParameters(e, t) {
              this._assertSendDirection(),
                m.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const n = r.sender.getParameters();
              n.encodings.forEach((e, r) => {
                n.encodings[r] = { ...e, ...t };
              }),
                await r.sender.setParameters(n);
            }
            async getSenderStats(e) {
              this._assertSendDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.sender.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n,
              protocol: a,
            }) {
              var i;
              this._assertSendDirection();
              const o = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmits: r,
                protocol: a,
              };
              m.debug("sendDataChannel() [options:%o]", o);
              const c = this._pc.createDataChannel(n, o);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % f.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = s.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (i = this._forcedLocalDtlsRole) && void 0 !== i
                        ? i
                        : "client",
                    localSdpObject: t,
                  })),
                  m.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  n
                ),
                  await this._pc.setRemoteDescription(n),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: c,
                sctpStreamParameters: {
                  streamId: o.id,
                  ordered: o.ordered,
                  maxPacketLifeTime: o.maxPacketLifeTime,
                  maxRetransmits: o.maxRetransmits,
                },
              };
            }
            async receive({ trackId: e, kind: t, rtpParameters: r }) {
              var n;
              this._assertRecvDirection(),
                m.debug("receive() [trackId:%s, kind:%s]", e, t);
              const a = r.mid || String(this._mapMidTransceiver.size);
              this._remoteSdp.receive({
                mid: a,
                kind: t,
                offerRtpParameters: r,
                streamId: r.rtcp.cname,
                trackId: e,
              });
              const i = { type: "offer", sdp: this._remoteSdp.getSdp() };
              m.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                i
              ),
                await this._pc.setRemoteDescription(i);
              let o = await this._pc.createAnswer();
              const c = s.parse(o.sdp),
                d = c.media.find((e) => String(e.mid) === a);
              l.applyCodecParameters({
                offerRtpParameters: r,
                answerMediaObject: d,
              }),
                (o = { type: "answer", sdp: s.write(c) }),
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (n = this._forcedLocalDtlsRole) && void 0 !== n
                        ? n
                        : "client",
                    localSdpObject: c,
                  })),
                m.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  o
                ),
                await this._pc.setLocalDescription(o);
              const u = this._pc.getTransceivers().find((e) => e.mid === a);
              if (!u) throw new Error("new RTCRtpTransceiver not found");
              return (
                this._mapMidTransceiver.set(a, u),
                { localId: a, track: u.receiver.track, rtpReceiver: u.receiver }
              );
            }
            async stopReceiving(e) {
              this._assertRecvDirection(),
                m.debug("stopReceiving() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              this._remoteSdp.closeMediaSection(t.mid);
              const r = { type: "offer", sdp: this._remoteSdp.getSdp() };
              m.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                r
              ),
                await this._pc.setRemoteDescription(r);
              const n = await this._pc.createAnswer();
              m.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n),
                this._mapMidTransceiver.delete(e);
            }
            async pauseReceiving(e) {
              this._assertRecvDirection(),
                m.debug("pauseReceiving() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              t.direction = "inactive";
              const r = { type: "offer", sdp: this._remoteSdp.getSdp() };
              m.debug(
                "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                r
              ),
                await this._pc.setRemoteDescription(r);
              const n = await this._pc.createAnswer();
              m.debug(
                "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n);
            }
            async resumeReceiving(e) {
              this._assertRecvDirection(),
                m.debug("resumeReceiving() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              t.direction = "recvonly";
              const r = { type: "offer", sdp: this._remoteSdp.getSdp() };
              m.debug(
                "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                r
              ),
                await this._pc.setRemoteDescription(r);
              const n = await this._pc.createAnswer();
              m.debug(
                "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n);
            }
            async getReceiverStats(e) {
              this._assertRecvDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.receiver.getStats();
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              var n;
              this._assertRecvDirection();
              const {
                  streamId: a,
                  ordered: i,
                  maxPacketLifeTime: o,
                  maxRetransmits: c,
                } = e,
                d = {
                  negotiated: !0,
                  id: a,
                  ordered: i,
                  maxPacketLifeTime: o,
                  maxRetransmits: c,
                  protocol: r,
                };
              m.debug("receiveDataChannel() [options:%o]", d);
              const l = this._pc.createDataChannel(t, d);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation();
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = s.parse(t.sdp);
                  await this._setupTransport({
                    localDtlsRole:
                      null !== (n = this._forcedLocalDtlsRole) && void 0 !== n
                        ? n
                        : "client",
                    localSdpObject: e,
                  });
                }
                m.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: l };
            }
            async _setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = s.parse(this._pc.localDescription.sdp));
              const r = l.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await this.safeEmitAsPromise("@connect", { dtlsParameters: r }),
                (this._transportReady = !0);
            }
            _assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            _assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Safari12 = v;
        },
        3635: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.mangleRtpParameters = t.getCapabilities = void 0);
          const s = i(r(3347));
          (t.getCapabilities = function () {
            const e = RTCRtpReceiver.getCapabilities(),
              t = s.clone(e, {});
            for (const e of t.codecs) {
              if (
                ((e.channels = e.numChannels),
                delete e.numChannels,
                (e.mimeType = e.mimeType || `${e.kind}/${e.name}`),
                e.parameters)
              ) {
                const t = e.parameters;
                t.apt && (t.apt = Number(t.apt)),
                  t["packetization-mode"] &&
                    (t["packetization-mode"] = Number(t["packetization-mode"]));
              }
              for (const t of e.rtcpFeedback || [])
                t.parameter || (t.parameter = "");
            }
            return t;
          }),
            (t.mangleRtpParameters = function (e) {
              const t = s.clone(e, {});
              t.mid && ((t.muxId = t.mid), delete t.mid);
              for (const e of t.codecs)
                e.channels && ((e.numChannels = e.channels), delete e.channels),
                  e.mimeType && !e.name && (e.name = e.mimeType.split("/")[1]),
                  delete e.mimeType;
              return t;
            });
        },
        6698: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.OfferMediaSection =
              t.AnswerMediaSection =
              t.MediaSection =
                void 0);
          const s = i(r(3347));
          class o {
            constructor({
              iceParameters: e,
              iceCandidates: t,
              dtlsParameters: r,
              planB: n = !1,
            }) {
              if (
                ((this._mediaObject = {}),
                (this._planB = n),
                e && this.setIceParameters(e),
                t)
              ) {
                this._mediaObject.candidates = [];
                for (const e of t) {
                  const t = { component: 1 };
                  (t.foundation = e.foundation),
                    (t.ip = e.ip),
                    (t.port = e.port),
                    (t.priority = e.priority),
                    (t.transport = e.protocol),
                    (t.type = e.type),
                    e.tcpType && (t.tcptype = e.tcpType),
                    this._mediaObject.candidates.push(t);
                }
                (this._mediaObject.endOfCandidates = "end-of-candidates"),
                  (this._mediaObject.iceOptions = "renomination");
              }
              r && this.setDtlsRole(r.role);
            }
            get mid() {
              return String(this._mediaObject.mid);
            }
            get closed() {
              return 0 === this._mediaObject.port;
            }
            getObject() {
              return this._mediaObject;
            }
            setIceParameters(e) {
              (this._mediaObject.iceUfrag = e.usernameFragment),
                (this._mediaObject.icePwd = e.password);
            }
            disable() {
              (this._mediaObject.direction = "inactive"),
                delete this._mediaObject.ext,
                delete this._mediaObject.ssrcs,
                delete this._mediaObject.ssrcGroups,
                delete this._mediaObject.simulcast,
                delete this._mediaObject.simulcast_03,
                delete this._mediaObject.rids;
            }
            close() {
              (this._mediaObject.direction = "inactive"),
                (this._mediaObject.port = 0),
                delete this._mediaObject.ext,
                delete this._mediaObject.ssrcs,
                delete this._mediaObject.ssrcGroups,
                delete this._mediaObject.simulcast,
                delete this._mediaObject.simulcast_03,
                delete this._mediaObject.rids,
                delete this._mediaObject.extmapAllowMixed;
            }
          }
          t.MediaSection = o;
          t.AnswerMediaSection = class extends o {
            constructor({
              iceParameters: e,
              iceCandidates: t,
              dtlsParameters: r,
              sctpParameters: n,
              plainRtpParameters: a,
              planB: i = !1,
              offerMediaObject: o,
              offerRtpParameters: d,
              answerRtpParameters: l,
              codecOptions: u,
              extmapAllowMixed: p = !1,
            }) {
              switch (
                (super({
                  iceParameters: e,
                  iceCandidates: t,
                  dtlsParameters: r,
                  planB: i,
                }),
                (this._mediaObject.mid = String(o.mid)),
                (this._mediaObject.type = o.type),
                (this._mediaObject.protocol = o.protocol),
                a
                  ? ((this._mediaObject.connection = {
                      ip: a.ip,
                      version: a.ipVersion,
                    }),
                    (this._mediaObject.port = a.port))
                  : ((this._mediaObject.connection = {
                      ip: "127.0.0.1",
                      version: 4,
                    }),
                    (this._mediaObject.port = 7)),
                o.type)
              ) {
                case "audio":
                case "video":
                  (this._mediaObject.direction = "recvonly"),
                    (this._mediaObject.rtp = []),
                    (this._mediaObject.rtcpFb = []),
                    (this._mediaObject.fmtp = []);
                  for (const e of l.codecs) {
                    const t = {
                      payload: e.payloadType,
                      codec: c(e),
                      rate: e.clockRate,
                    };
                    e.channels > 1 && (t.encoding = e.channels),
                      this._mediaObject.rtp.push(t);
                    const r = s.clone(e.parameters, {});
                    if (u) {
                      const {
                          opusStereo: t,
                          opusFec: n,
                          opusDtx: a,
                          opusMaxPlaybackRate: i,
                          opusMaxAverageBitrate: s,
                          opusPtime: o,
                          videoGoogleStartBitrate: c,
                          videoGoogleMaxBitrate: l,
                          videoGoogleMinBitrate: p,
                        } = u,
                        h = d.codecs.find(
                          (t) => t.payloadType === e.payloadType
                        );
                      switch (e.mimeType.toLowerCase()) {
                        case "audio/opus":
                          void 0 !== t &&
                            ((h.parameters["sprop-stereo"] = t ? 1 : 0),
                            (r.stereo = t ? 1 : 0)),
                            void 0 !== n &&
                              ((h.parameters.useinbandfec = n ? 1 : 0),
                              (r.useinbandfec = n ? 1 : 0)),
                            void 0 !== a &&
                              ((h.parameters.usedtx = a ? 1 : 0),
                              (r.usedtx = a ? 1 : 0)),
                            void 0 !== i && (r.maxplaybackrate = i),
                            void 0 !== s && (r.maxaveragebitrate = s),
                            void 0 !== o &&
                              ((h.parameters.ptime = o), (r.ptime = o));
                          break;
                        case "video/vp8":
                        case "video/vp9":
                        case "video/h264":
                        case "video/h265":
                          void 0 !== c && (r["x-google-start-bitrate"] = c),
                            void 0 !== l && (r["x-google-max-bitrate"] = l),
                            void 0 !== p && (r["x-google-min-bitrate"] = p);
                      }
                    }
                    const n = { payload: e.payloadType, config: "" };
                    for (const e of Object.keys(r))
                      n.config && (n.config += ";"),
                        (n.config += `${e}=${r[e]}`);
                    n.config && this._mediaObject.fmtp.push(n);
                    for (const t of e.rtcpFeedback)
                      this._mediaObject.rtcpFb.push({
                        payload: e.payloadType,
                        type: t.type,
                        subtype: t.parameter,
                      });
                  }
                  (this._mediaObject.payloads = l.codecs
                    .map((e) => e.payloadType)
                    .join(" ")),
                    (this._mediaObject.ext = []);
                  for (const e of l.headerExtensions) {
                    (o.ext || []).some((t) => t.uri === e.uri) &&
                      this._mediaObject.ext.push({ uri: e.uri, value: e.id });
                  }
                  if (
                    (p &&
                      "extmap-allow-mixed" === o.extmapAllowMixed &&
                      (this._mediaObject.extmapAllowMixed =
                        "extmap-allow-mixed"),
                    o.simulcast)
                  ) {
                    (this._mediaObject.simulcast = {
                      dir1: "recv",
                      list1: o.simulcast.list1,
                    }),
                      (this._mediaObject.rids = []);
                    for (const e of o.rids || [])
                      "send" === e.direction &&
                        this._mediaObject.rids.push({
                          id: e.id,
                          direction: "recv",
                        });
                  } else if (o.simulcast_03) {
                    (this._mediaObject.simulcast_03 = {
                      value: o.simulcast_03.value.replace(/send/g, "recv"),
                    }),
                      (this._mediaObject.rids = []);
                    for (const e of o.rids || [])
                      "send" === e.direction &&
                        this._mediaObject.rids.push({
                          id: e.id,
                          direction: "recv",
                        });
                  }
                  (this._mediaObject.rtcpMux = "rtcp-mux"),
                    (this._mediaObject.rtcpRsize = "rtcp-rsize"),
                    this._planB &&
                      "video" === this._mediaObject.type &&
                      (this._mediaObject.xGoogleFlag = "conference");
                  break;
                case "application":
                  "number" == typeof o.sctpPort
                    ? ((this._mediaObject.payloads = "webrtc-datachannel"),
                      (this._mediaObject.sctpPort = n.port),
                      (this._mediaObject.maxMessageSize = n.maxMessageSize))
                    : o.sctpmap &&
                      ((this._mediaObject.payloads = n.port),
                      (this._mediaObject.sctpmap = {
                        app: "webrtc-datachannel",
                        sctpmapNumber: n.port,
                        maxMessageSize: n.maxMessageSize,
                      }));
              }
            }
            setDtlsRole(e) {
              switch (e) {
                case "client":
                  this._mediaObject.setup = "active";
                  break;
                case "server":
                  this._mediaObject.setup = "passive";
                  break;
                case "auto":
                  this._mediaObject.setup = "actpass";
              }
            }
          };
          function c(e) {
            const t = new RegExp("^(audio|video)/(.+)", "i").exec(e.mimeType);
            if (!t) throw new TypeError("invalid codec.mimeType");
            return t[2];
          }
          t.OfferMediaSection = class extends o {
            constructor({
              iceParameters: e,
              iceCandidates: t,
              dtlsParameters: r,
              sctpParameters: n,
              plainRtpParameters: a,
              planB: i = !1,
              mid: s,
              kind: o,
              offerRtpParameters: d,
              streamId: l,
              trackId: u,
              oldDataChannelSpec: p = !1,
            }) {
              switch (
                (super({
                  iceParameters: e,
                  iceCandidates: t,
                  dtlsParameters: r,
                  planB: i,
                }),
                (this._mediaObject.mid = String(s)),
                (this._mediaObject.type = o),
                a
                  ? ((this._mediaObject.connection = {
                      ip: a.ip,
                      version: a.ipVersion,
                    }),
                    (this._mediaObject.protocol = "RTP/AVP"),
                    (this._mediaObject.port = a.port))
                  : ((this._mediaObject.connection = {
                      ip: "127.0.0.1",
                      version: 4,
                    }),
                    (this._mediaObject.protocol = n
                      ? "UDP/DTLS/SCTP"
                      : "UDP/TLS/RTP/SAVPF"),
                    (this._mediaObject.port = 7)),
                o)
              ) {
                case "audio":
                case "video": {
                  (this._mediaObject.direction = "sendonly"),
                    (this._mediaObject.rtp = []),
                    (this._mediaObject.rtcpFb = []),
                    (this._mediaObject.fmtp = []),
                    this._planB ||
                      (this._mediaObject.msid = `${l || "-"} ${u}`);
                  for (const e of d.codecs) {
                    const t = {
                      payload: e.payloadType,
                      codec: c(e),
                      rate: e.clockRate,
                    };
                    e.channels > 1 && (t.encoding = e.channels),
                      this._mediaObject.rtp.push(t);
                    const r = { payload: e.payloadType, config: "" };
                    for (const t of Object.keys(e.parameters))
                      r.config && (r.config += ";"),
                        (r.config += `${t}=${e.parameters[t]}`);
                    r.config && this._mediaObject.fmtp.push(r);
                    for (const t of e.rtcpFeedback)
                      this._mediaObject.rtcpFb.push({
                        payload: e.payloadType,
                        type: t.type,
                        subtype: t.parameter,
                      });
                  }
                  (this._mediaObject.payloads = d.codecs
                    .map((e) => e.payloadType)
                    .join(" ")),
                    (this._mediaObject.ext = []);
                  for (const e of d.headerExtensions)
                    this._mediaObject.ext.push({ uri: e.uri, value: e.id });
                  (this._mediaObject.rtcpMux = "rtcp-mux"),
                    (this._mediaObject.rtcpRsize = "rtcp-rsize");
                  const e = d.encodings[0],
                    t = e.ssrc,
                    r = e.rtx && e.rtx.ssrc ? e.rtx.ssrc : void 0;
                  (this._mediaObject.ssrcs = []),
                    (this._mediaObject.ssrcGroups = []),
                    d.rtcp.cname &&
                      this._mediaObject.ssrcs.push({
                        id: t,
                        attribute: "cname",
                        value: d.rtcp.cname,
                      }),
                    this._planB &&
                      this._mediaObject.ssrcs.push({
                        id: t,
                        attribute: "msid",
                        value: `${l || "-"} ${u}`,
                      }),
                    r &&
                      (d.rtcp.cname &&
                        this._mediaObject.ssrcs.push({
                          id: r,
                          attribute: "cname",
                          value: d.rtcp.cname,
                        }),
                      this._planB &&
                        this._mediaObject.ssrcs.push({
                          id: r,
                          attribute: "msid",
                          value: `${l || "-"} ${u}`,
                        }),
                      this._mediaObject.ssrcGroups.push({
                        semantics: "FID",
                        ssrcs: `${t} ${r}`,
                      }));
                  break;
                }
                case "application":
                  p
                    ? ((this._mediaObject.payloads = n.port),
                      (this._mediaObject.sctpmap = {
                        app: "webrtc-datachannel",
                        sctpmapNumber: n.port,
                        maxMessageSize: n.maxMessageSize,
                      }))
                    : ((this._mediaObject.payloads = "webrtc-datachannel"),
                      (this._mediaObject.sctpPort = n.port),
                      (this._mediaObject.maxMessageSize = n.maxMessageSize));
              }
            }
            setDtlsRole(e) {
              this._mediaObject.setup = "actpass";
            }
            planBReceive({ offerRtpParameters: e, streamId: t, trackId: r }) {
              const n = e.encodings[0],
                a = n.ssrc,
                i = n.rtx && n.rtx.ssrc ? n.rtx.ssrc : void 0,
                s = this._mediaObject.payloads.split(" ");
              for (const t of e.codecs) {
                if (s.includes(String(t.payloadType))) continue;
                const e = {
                  payload: t.payloadType,
                  codec: c(t),
                  rate: t.clockRate,
                };
                t.channels > 1 && (e.encoding = t.channels),
                  this._mediaObject.rtp.push(e);
                const r = { payload: t.payloadType, config: "" };
                for (const e of Object.keys(t.parameters))
                  r.config && (r.config += ";"),
                    (r.config += `${e}=${t.parameters[e]}`);
                r.config && this._mediaObject.fmtp.push(r);
                for (const e of t.rtcpFeedback)
                  this._mediaObject.rtcpFb.push({
                    payload: t.payloadType,
                    type: e.type,
                    subtype: e.parameter,
                  });
              }
              (this._mediaObject.payloads += ` ${e.codecs
                .filter(
                  (e) => !this._mediaObject.payloads.includes(e.payloadType)
                )
                .map((e) => e.payloadType)
                .join(" ")}`),
                (this._mediaObject.payloads =
                  this._mediaObject.payloads.trim()),
                e.rtcp.cname &&
                  this._mediaObject.ssrcs.push({
                    id: a,
                    attribute: "cname",
                    value: e.rtcp.cname,
                  }),
                this._mediaObject.ssrcs.push({
                  id: a,
                  attribute: "msid",
                  value: `${t || "-"} ${r}`,
                }),
                i &&
                  (e.rtcp.cname &&
                    this._mediaObject.ssrcs.push({
                      id: i,
                      attribute: "cname",
                      value: e.rtcp.cname,
                    }),
                  this._mediaObject.ssrcs.push({
                    id: i,
                    attribute: "msid",
                    value: `${t || "-"} ${r}`,
                  }),
                  this._mediaObject.ssrcGroups.push({
                    semantics: "FID",
                    ssrcs: `${a} ${i}`,
                  }));
            }
            planBStopReceiving({ offerRtpParameters: e }) {
              const t = e.encodings[0],
                r = t.ssrc,
                n = t.rtx && t.rtx.ssrc ? t.rtx.ssrc : void 0;
              (this._mediaObject.ssrcs = this._mediaObject.ssrcs.filter(
                (e) => e.id !== r && e.id !== n
              )),
                n &&
                  (this._mediaObject.ssrcGroups =
                    this._mediaObject.ssrcGroups.filter(
                      (e) => e.ssrcs !== `${r} ${n}`
                    ));
            }
          };
        },
        7910: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.RemoteSdp = void 0);
          const s = i(r(766)),
            o = r(8562),
            c = r(6698),
            d = new o.Logger("RemoteSdp");
          t.RemoteSdp = class {
            constructor({
              iceParameters: e,
              iceCandidates: t,
              dtlsParameters: r,
              sctpParameters: n,
              plainRtpParameters: a,
              planB: i = !1,
            }) {
              if (
                ((this._mediaSections = []),
                (this._midToIndex = new Map()),
                (this._iceParameters = e),
                (this._iceCandidates = t),
                (this._dtlsParameters = r),
                (this._sctpParameters = n),
                (this._plainRtpParameters = a),
                (this._planB = i),
                (this._sdpObject = {
                  version: 0,
                  origin: {
                    address: "0.0.0.0",
                    ipVer: 4,
                    netType: "IN",
                    sessionId: 1e4,
                    sessionVersion: 0,
                    username: "mediasoup-client",
                  },
                  name: "-",
                  timing: { start: 0, stop: 0 },
                  media: [],
                }),
                e && e.iceLite && (this._sdpObject.icelite = "ice-lite"),
                r)
              ) {
                this._sdpObject.msidSemantic = { semantic: "WMS", token: "*" };
                const e = this._dtlsParameters.fingerprints.length;
                (this._sdpObject.fingerprint = {
                  type: r.fingerprints[e - 1].algorithm,
                  hash: r.fingerprints[e - 1].value,
                }),
                  (this._sdpObject.groups = [{ type: "BUNDLE", mids: "" }]);
              }
              a &&
                ((this._sdpObject.origin.address = a.ip),
                (this._sdpObject.origin.ipVer = a.ipVersion));
            }
            updateIceParameters(e) {
              d.debug("updateIceParameters() [iceParameters:%o]", e),
                (this._iceParameters = e),
                (this._sdpObject.icelite = e.iceLite ? "ice-lite" : void 0);
              for (const t of this._mediaSections) t.setIceParameters(e);
            }
            updateDtlsRole(e) {
              d.debug("updateDtlsRole() [role:%s]", e),
                (this._dtlsParameters.role = e);
              for (const t of this._mediaSections) t.setDtlsRole(e);
            }
            getNextMediaSectionIdx() {
              for (let e = 0; e < this._mediaSections.length; ++e) {
                const t = this._mediaSections[e];
                if (t.closed) return { idx: e, reuseMid: t.mid };
              }
              return { idx: this._mediaSections.length };
            }
            send({
              offerMediaObject: e,
              reuseMid: t,
              offerRtpParameters: r,
              answerRtpParameters: n,
              codecOptions: a,
              extmapAllowMixed: i = !1,
            }) {
              const s = new c.AnswerMediaSection({
                iceParameters: this._iceParameters,
                iceCandidates: this._iceCandidates,
                dtlsParameters: this._dtlsParameters,
                plainRtpParameters: this._plainRtpParameters,
                planB: this._planB,
                offerMediaObject: e,
                offerRtpParameters: r,
                answerRtpParameters: n,
                codecOptions: a,
                extmapAllowMixed: i,
              });
              t
                ? this._replaceMediaSection(s, t)
                : this._midToIndex.has(s.mid)
                ? this._replaceMediaSection(s)
                : this._addMediaSection(s);
            }
            receive({
              mid: e,
              kind: t,
              offerRtpParameters: r,
              streamId: n,
              trackId: a,
            }) {
              const i = this._midToIndex.get(e);
              let s;
              if ((void 0 !== i && (s = this._mediaSections[i]), s))
                s.planBReceive({
                  offerRtpParameters: r,
                  streamId: n,
                  trackId: a,
                }),
                  this._replaceMediaSection(s);
              else {
                s = new c.OfferMediaSection({
                  iceParameters: this._iceParameters,
                  iceCandidates: this._iceCandidates,
                  dtlsParameters: this._dtlsParameters,
                  plainRtpParameters: this._plainRtpParameters,
                  planB: this._planB,
                  mid: e,
                  kind: t,
                  offerRtpParameters: r,
                  streamId: n,
                  trackId: a,
                });
                const i = this._mediaSections.find((e) => e.closed);
                i
                  ? this._replaceMediaSection(s, i.mid)
                  : this._addMediaSection(s);
              }
            }
            disableMediaSection(e) {
              const t = this._midToIndex.get(e);
              if (void 0 === t)
                throw new Error(`no media section found with mid '${e}'`);
              this._mediaSections[t].disable();
            }
            closeMediaSection(e) {
              const t = this._midToIndex.get(e);
              if (void 0 === t)
                throw new Error(`no media section found with mid '${e}'`);
              const r = this._mediaSections[t];
              if (e === this._firstMid)
                return (
                  d.debug(
                    "closeMediaSection() | cannot close first media section, disabling it instead [mid:%s]",
                    e
                  ),
                  void this.disableMediaSection(e)
                );
              r.close(), this._regenerateBundleMids();
            }
            planBStopReceiving({ mid: e, offerRtpParameters: t }) {
              const r = this._midToIndex.get(e);
              if (void 0 === r)
                throw new Error(`no media section found with mid '${e}'`);
              const n = this._mediaSections[r];
              n.planBStopReceiving({ offerRtpParameters: t }),
                this._replaceMediaSection(n);
            }
            sendSctpAssociation({ offerMediaObject: e }) {
              const t = new c.AnswerMediaSection({
                iceParameters: this._iceParameters,
                iceCandidates: this._iceCandidates,
                dtlsParameters: this._dtlsParameters,
                sctpParameters: this._sctpParameters,
                plainRtpParameters: this._plainRtpParameters,
                offerMediaObject: e,
              });
              this._addMediaSection(t);
            }
            receiveSctpAssociation({ oldDataChannelSpec: e = !1 } = {}) {
              const t = new c.OfferMediaSection({
                iceParameters: this._iceParameters,
                iceCandidates: this._iceCandidates,
                dtlsParameters: this._dtlsParameters,
                sctpParameters: this._sctpParameters,
                plainRtpParameters: this._plainRtpParameters,
                mid: "datachannel",
                kind: "application",
                oldDataChannelSpec: e,
              });
              this._addMediaSection(t);
            }
            getSdp() {
              return (
                this._sdpObject.origin.sessionVersion++,
                s.write(this._sdpObject)
              );
            }
            _addMediaSection(e) {
              this._firstMid || (this._firstMid = e.mid),
                this._mediaSections.push(e),
                this._midToIndex.set(e.mid, this._mediaSections.length - 1),
                this._sdpObject.media.push(e.getObject()),
                this._regenerateBundleMids();
            }
            _replaceMediaSection(e, t) {
              if ("string" == typeof t) {
                const r = this._midToIndex.get(t);
                if (void 0 === r)
                  throw new Error(`no media section found for reuseMid '${t}'`);
                const n = this._mediaSections[r];
                (this._mediaSections[r] = e),
                  this._midToIndex.delete(n.mid),
                  this._midToIndex.set(e.mid, r),
                  (this._sdpObject.media[r] = e.getObject()),
                  this._regenerateBundleMids();
              } else {
                const t = this._midToIndex.get(e.mid);
                if (void 0 === t)
                  throw new Error(`no media section found with mid '${e.mid}'`);
                (this._mediaSections[t] = e),
                  (this._sdpObject.media[t] = e.getObject());
              }
            }
            _regenerateBundleMids() {
              this._dtlsParameters &&
                (this._sdpObject.groups[0].mids = this._mediaSections
                  .filter((e) => !e.closed)
                  .map((e) => e.mid)
                  .join(" "));
            }
          };
        },
        2267: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.applyCodecParameters =
              t.getCname =
              t.extractDtlsParameters =
              t.extractRtpCapabilities =
                void 0);
          const s = i(r(766));
          (t.extractRtpCapabilities = function ({ sdpObject: e }) {
            const t = new Map(),
              r = [];
            let n = !1,
              a = !1;
            for (const i of e.media) {
              const e = i.type;
              switch (e) {
                case "audio":
                  if (n) continue;
                  n = !0;
                  break;
                case "video":
                  if (a) continue;
                  a = !0;
                  break;
                default:
                  continue;
              }
              for (const r of i.rtp) {
                const n = {
                  kind: e,
                  mimeType: `${e}/${r.codec}`,
                  preferredPayloadType: r.payload,
                  clockRate: r.rate,
                  channels: r.encoding,
                  parameters: {},
                  rtcpFeedback: [],
                };
                t.set(n.preferredPayloadType, n);
              }
              for (const e of i.fmtp || []) {
                const r = s.parseParams(e.config),
                  n = t.get(e.payload);
                n &&
                  (r &&
                    r.hasOwnProperty("profile-level-id") &&
                    (r["profile-level-id"] = String(r["profile-level-id"])),
                  (n.parameters = r));
              }
              for (const e of i.rtcpFb || []) {
                const r = t.get(e.payload);
                if (!r) continue;
                const n = { type: e.type, parameter: e.subtype };
                n.parameter || delete n.parameter, r.rtcpFeedback.push(n);
              }
              for (const t of i.ext || []) {
                if (t["encrypt-uri"]) continue;
                const n = { kind: e, uri: t.uri, preferredId: t.value };
                r.push(n);
              }
            }
            return { codecs: Array.from(t.values()), headerExtensions: r };
          }),
            (t.extractDtlsParameters = function ({ sdpObject: e }) {
              const t = (e.media || []).find((e) => e.iceUfrag && 0 !== e.port);
              if (!t) throw new Error("no active media section found");
              const r = t.fingerprint || e.fingerprint;
              let n;
              switch (t.setup) {
                case "active":
                  n = "client";
                  break;
                case "passive":
                  n = "server";
                  break;
                case "actpass":
                  n = "auto";
              }
              return {
                role: n,
                fingerprints: [{ algorithm: r.type, value: r.hash }],
              };
            }),
            (t.getCname = function ({ offerMediaObject: e }) {
              const t = (e.ssrcs || []).find((e) => "cname" === e.attribute);
              return t ? t.value : "";
            }),
            (t.applyCodecParameters = function ({
              offerRtpParameters: e,
              answerMediaObject: t,
            }) {
              for (const r of e.codecs) {
                const e = r.mimeType.toLowerCase();
                if ("audio/opus" !== e) continue;
                if (!(t.rtp || []).find((e) => e.payload === r.payloadType))
                  continue;
                t.fmtp = t.fmtp || [];
                let n = t.fmtp.find((e) => e.payload === r.payloadType);
                n ||
                  ((n = { payload: r.payloadType, config: "" }),
                  t.fmtp.push(n));
                const a = s.parseParams(n.config);
                switch (e) {
                  case "audio/opus": {
                    const e = r.parameters["sprop-stereo"];
                    void 0 !== e && (a.stereo = e ? 1 : 0);
                    break;
                  }
                }
                n.config = "";
                for (const e of Object.keys(a))
                  n.config && (n.config += ";"), (n.config += `${e}=${a[e]}`);
              }
            });
        },
        9875: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.addLegacySimulcast = t.getRtpEncodings = void 0),
            (t.getRtpEncodings = function ({ offerMediaObject: e, track: t }) {
              let r;
              const n = new Set();
              for (const a of e.ssrcs || []) {
                if ("msid" !== a.attribute) continue;
                if (a.value.split(" ")[1] === t.id) {
                  const e = a.id;
                  n.add(e), r || (r = e);
                }
              }
              if (0 === n.size)
                throw new Error(
                  `a=ssrc line with msid information not found [track.id:${t.id}]`
                );
              const a = new Map();
              for (const t of e.ssrcGroups || []) {
                if ("FID" !== t.semantics) continue;
                let [e, r] = t.ssrcs.split(/\s+/);
                (e = Number(e)),
                  (r = Number(r)),
                  n.has(e) && (n.delete(e), n.delete(r), a.set(e, r));
              }
              for (const e of n) a.set(e, null);
              const i = [];
              for (const [e, t] of a) {
                const r = { ssrc: e };
                t && (r.rtx = { ssrc: t }), i.push(r);
              }
              return i;
            }),
            (t.addLegacySimulcast = function ({
              offerMediaObject: e,
              track: t,
              numStreams: r,
            }) {
              if (r <= 1)
                throw new TypeError("numStreams must be greater than 1");
              let n, a, i;
              if (
                !(e.ssrcs || []).find((e) => {
                  if ("msid" !== e.attribute) return !1;
                  return (
                    e.value.split(" ")[1] === t.id &&
                    ((n = e.id), (i = e.value.split(" ")[0]), !0)
                  );
                })
              )
                throw new Error(
                  `a=ssrc line with msid information not found [track.id:${t.id}]`
                );
              (e.ssrcGroups || []).some((e) => {
                if ("FID" !== e.semantics) return !1;
                const t = e.ssrcs.split(/\s+/);
                return Number(t[0]) === n && ((a = Number(t[1])), !0);
              });
              const s = e.ssrcs.find(
                (e) => "cname" === e.attribute && e.id === n
              );
              if (!s)
                throw new Error(
                  `a=ssrc line with cname information not found [track.id:${t.id}]`
                );
              const o = s.value,
                c = [],
                d = [];
              for (let e = 0; e < r; ++e) c.push(n + e), a && d.push(a + e);
              (e.ssrcGroups = e.ssrcGroups || []),
                (e.ssrcs = e.ssrcs || []),
                e.ssrcGroups.push({ semantics: "SIM", ssrcs: c.join(" ") });
              for (let r = 0; r < c.length; ++r) {
                const n = c[r];
                e.ssrcs.push({ id: n, attribute: "cname", value: o }),
                  e.ssrcs.push({
                    id: n,
                    attribute: "msid",
                    value: `${i} ${t.id}`,
                  });
              }
              for (let r = 0; r < d.length; ++r) {
                const n = c[r],
                  a = d[r];
                e.ssrcs.push({ id: a, attribute: "cname", value: o }),
                  e.ssrcs.push({
                    id: a,
                    attribute: "msid",
                    value: `${i} ${t.id}`,
                  }),
                  e.ssrcGroups.push({ semantics: "FID", ssrcs: `${n} ${a}` });
              }
            });
        },
        9072: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.addLegacySimulcast = t.getRtpEncodings = void 0),
            (t.getRtpEncodings = function ({ offerMediaObject: e }) {
              const t = new Set();
              for (const r of e.ssrcs || []) {
                const e = r.id;
                t.add(e);
              }
              if (0 === t.size) throw new Error("no a=ssrc lines found");
              const r = new Map();
              for (const n of e.ssrcGroups || []) {
                if ("FID" !== n.semantics) continue;
                let [e, a] = n.ssrcs.split(/\s+/);
                (e = Number(e)),
                  (a = Number(a)),
                  t.has(e) && (t.delete(e), t.delete(a), r.set(e, a));
              }
              for (const e of t) r.set(e, null);
              const n = [];
              for (const [e, t] of r) {
                const r = { ssrc: e };
                t && (r.rtx = { ssrc: t }), n.push(r);
              }
              return n;
            }),
            (t.addLegacySimulcast = function ({
              offerMediaObject: e,
              numStreams: t,
            }) {
              if (t <= 1)
                throw new TypeError("numStreams must be greater than 1");
              const r = (e.ssrcs || []).find((e) => "msid" === e.attribute);
              if (!r)
                throw new Error("a=ssrc line with msid information not found");
              const [n, a] = r.value.split(" "),
                i = r.id;
              let s;
              (e.ssrcGroups || []).some((e) => {
                if ("FID" !== e.semantics) return !1;
                const t = e.ssrcs.split(/\s+/);
                return Number(t[0]) === i && ((s = Number(t[1])), !0);
              });
              const o = e.ssrcs.find((e) => "cname" === e.attribute);
              if (!o)
                throw new Error("a=ssrc line with cname information not found");
              const c = o.value,
                d = [],
                l = [];
              for (let e = 0; e < t; ++e) d.push(i + e), s && l.push(s + e);
              (e.ssrcGroups = []),
                (e.ssrcs = []),
                e.ssrcGroups.push({ semantics: "SIM", ssrcs: d.join(" ") });
              for (let t = 0; t < d.length; ++t) {
                const r = d[t];
                e.ssrcs.push({ id: r, attribute: "cname", value: c }),
                  e.ssrcs.push({
                    id: r,
                    attribute: "msid",
                    value: `${n} ${a}`,
                  });
              }
              for (let t = 0; t < l.length; ++t) {
                const r = d[t],
                  i = l[t];
                e.ssrcs.push({ id: i, attribute: "cname", value: c }),
                  e.ssrcs.push({
                    id: i,
                    attribute: "msid",
                    value: `${n} ${a}`,
                  }),
                  e.ssrcGroups.push({ semantics: "FID", ssrcs: `${r} ${i}` });
              }
            });
        },
        960: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              },
            s =
              (this && this.__importDefault) ||
              function (e) {
                return e && e.__esModule ? e : { default: e };
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.debug =
              t.parseScalabilityMode =
              t.detectDevice =
              t.Device =
              t.version =
              t.types =
                void 0);
          const o = s(r(1227));
          t.debug = o.default;
          const c = r(3120);
          Object.defineProperty(t, "Device", {
            enumerable: !0,
            get: function () {
              return c.Device;
            },
          }),
            Object.defineProperty(t, "detectDevice", {
              enumerable: !0,
              get: function () {
                return c.detectDevice;
              },
            });
          const d = i(r(53));
          (t.types = d), (t.version = "3.6.47");
          var l = r(2770);
          Object.defineProperty(t, "parseScalabilityMode", {
            enumerable: !0,
            get: function () {
              return l.parse;
            },
          });
        },
        5280: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.canReceive =
              t.canSend =
              t.generateProbatorRtpParameters =
              t.reduceCodecs =
              t.getSendingRemoteRtpParameters =
              t.getSendingRtpParameters =
              t.getRecvRtpCapabilities =
              t.getExtendedRtpCapabilities =
              t.validateSctpStreamParameters =
              t.validateSctpParameters =
              t.validateNumSctpStreams =
              t.validateSctpCapabilities =
              t.validateRtcpParameters =
              t.validateRtpEncodingParameters =
              t.validateRtpHeaderExtensionParameters =
              t.validateRtpCodecParameters =
              t.validateRtpParameters =
              t.validateRtpHeaderExtension =
              t.validateRtcpFeedback =
              t.validateRtpCodecCapability =
              t.validateRtpCapabilities =
                void 0);
          const s = i(r(7855)),
            o = i(r(3347));
          function c(e) {
            const t = new RegExp("^(audio|video)/(.+)", "i");
            if ("object" != typeof e)
              throw new TypeError("codec is not an object");
            if (!e.mimeType || "string" != typeof e.mimeType)
              throw new TypeError("missing codec.mimeType");
            const r = t.exec(e.mimeType);
            if (!r) throw new TypeError("invalid codec.mimeType");
            if (
              ((e.kind = r[1].toLowerCase()),
              e.preferredPayloadType &&
                "number" != typeof e.preferredPayloadType)
            )
              throw new TypeError("invalid codec.preferredPayloadType");
            if ("number" != typeof e.clockRate)
              throw new TypeError("missing codec.clockRate");
            "audio" === e.kind
              ? "number" != typeof e.channels && (e.channels = 1)
              : delete e.channels,
              (e.parameters && "object" == typeof e.parameters) ||
                (e.parameters = {});
            for (const t of Object.keys(e.parameters)) {
              let r = e.parameters[t];
              if (
                (void 0 === r && ((e.parameters[t] = ""), (r = "")),
                "string" != typeof r && "number" != typeof r)
              )
                throw new TypeError(
                  `invalid codec parameter [key:${t}s, value:${r}]`
                );
              if ("apt" === t && "number" != typeof r)
                throw new TypeError("invalid codec apt parameter");
            }
            (e.rtcpFeedback && Array.isArray(e.rtcpFeedback)) ||
              (e.rtcpFeedback = []);
            for (const t of e.rtcpFeedback) d(t);
          }
          function d(e) {
            if ("object" != typeof e)
              throw new TypeError("fb is not an object");
            if (!e.type || "string" != typeof e.type)
              throw new TypeError("missing fb.type");
            (e.parameter && "string" == typeof e.parameter) ||
              (e.parameter = "");
          }
          function l(e) {
            if ("object" != typeof e)
              throw new TypeError("ext is not an object");
            if ("audio" !== e.kind && "video" !== e.kind)
              throw new TypeError("invalid ext.kind");
            if (!e.uri || "string" != typeof e.uri)
              throw new TypeError("missing ext.uri");
            if ("number" != typeof e.preferredId)
              throw new TypeError("missing ext.preferredId");
            if (e.preferredEncrypt && "boolean" != typeof e.preferredEncrypt)
              throw new TypeError("invalid ext.preferredEncrypt");
            if (
              (e.preferredEncrypt || (e.preferredEncrypt = !1),
              e.direction && "string" != typeof e.direction)
            )
              throw new TypeError("invalid ext.direction");
            e.direction || (e.direction = "sendrecv");
          }
          function u(e) {
            if ("object" != typeof e)
              throw new TypeError("params is not an object");
            if (e.mid && "string" != typeof e.mid)
              throw new TypeError("params.mid is not a string");
            if (!Array.isArray(e.codecs))
              throw new TypeError("missing params.codecs");
            for (const t of e.codecs) p(t);
            if (e.headerExtensions && !Array.isArray(e.headerExtensions))
              throw new TypeError("params.headerExtensions is not an array");
            e.headerExtensions || (e.headerExtensions = []);
            for (const t of e.headerExtensions) h(t);
            if (e.encodings && !Array.isArray(e.encodings))
              throw new TypeError("params.encodings is not an array");
            e.encodings || (e.encodings = []);
            for (const t of e.encodings) m(t);
            if (e.rtcp && "object" != typeof e.rtcp)
              throw new TypeError("params.rtcp is not an object");
            e.rtcp || (e.rtcp = {}), f(e.rtcp);
          }
          function p(e) {
            const t = new RegExp("^(audio|video)/(.+)", "i");
            if ("object" != typeof e)
              throw new TypeError("codec is not an object");
            if (!e.mimeType || "string" != typeof e.mimeType)
              throw new TypeError("missing codec.mimeType");
            const r = t.exec(e.mimeType);
            if (!r) throw new TypeError("invalid codec.mimeType");
            if ("number" != typeof e.payloadType)
              throw new TypeError("missing codec.payloadType");
            if ("number" != typeof e.clockRate)
              throw new TypeError("missing codec.clockRate");
            "audio" === r[1].toLowerCase()
              ? "number" != typeof e.channels && (e.channels = 1)
              : delete e.channels,
              (e.parameters && "object" == typeof e.parameters) ||
                (e.parameters = {});
            for (const t of Object.keys(e.parameters)) {
              let r = e.parameters[t];
              if (
                (void 0 === r && ((e.parameters[t] = ""), (r = "")),
                "string" != typeof r && "number" != typeof r)
              )
                throw new TypeError(
                  `invalid codec parameter [key:${t}s, value:${r}]`
                );
              if ("apt" === t && "number" != typeof r)
                throw new TypeError("invalid codec apt parameter");
            }
            (e.rtcpFeedback && Array.isArray(e.rtcpFeedback)) ||
              (e.rtcpFeedback = []);
            for (const t of e.rtcpFeedback) d(t);
          }
          function h(e) {
            if ("object" != typeof e)
              throw new TypeError("ext is not an object");
            if (!e.uri || "string" != typeof e.uri)
              throw new TypeError("missing ext.uri");
            if ("number" != typeof e.id) throw new TypeError("missing ext.id");
            if (e.encrypt && "boolean" != typeof e.encrypt)
              throw new TypeError("invalid ext.encrypt");
            e.encrypt || (e.encrypt = !1),
              (e.parameters && "object" == typeof e.parameters) ||
                (e.parameters = {});
            for (const t of Object.keys(e.parameters)) {
              let r = e.parameters[t];
              if (
                (void 0 === r && ((e.parameters[t] = ""), (r = "")),
                "string" != typeof r && "number" != typeof r)
              )
                throw new TypeError("invalid header extension parameter");
            }
          }
          function m(e) {
            if ("object" != typeof e)
              throw new TypeError("encoding is not an object");
            if (e.ssrc && "number" != typeof e.ssrc)
              throw new TypeError("invalid encoding.ssrc");
            if (e.rid && "string" != typeof e.rid)
              throw new TypeError("invalid encoding.rid");
            if (e.rtx && "object" != typeof e.rtx)
              throw new TypeError("invalid encoding.rtx");
            if (e.rtx && "number" != typeof e.rtx.ssrc)
              throw new TypeError("missing encoding.rtx.ssrc");
            if (
              ((e.dtx && "boolean" == typeof e.dtx) || (e.dtx = !1),
              e.scalabilityMode && "string" != typeof e.scalabilityMode)
            )
              throw new TypeError("invalid encoding.scalabilityMode");
          }
          function f(e) {
            if ("object" != typeof e)
              throw new TypeError("rtcp is not an object");
            if (e.cname && "string" != typeof e.cname)
              throw new TypeError("invalid rtcp.cname");
            (e.reducedSize && "boolean" == typeof e.reducedSize) ||
              (e.reducedSize = !0);
          }
          function v(e) {
            if ("object" != typeof e)
              throw new TypeError("numStreams is not an object");
            if ("number" != typeof e.OS)
              throw new TypeError("missing numStreams.OS");
            if ("number" != typeof e.MIS)
              throw new TypeError("missing numStreams.MIS");
          }
          function _(e) {
            return !!e && /.+\/rtx$/i.test(e.mimeType);
          }
          function g(e, t, { strict: r = !1, modify: n = !1 } = {}) {
            const a = e.mimeType.toLowerCase();
            if (a !== t.mimeType.toLowerCase()) return !1;
            if (e.clockRate !== t.clockRate) return !1;
            if (e.channels !== t.channels) return !1;
            switch (a) {
              case "video/h264":
                if (r) {
                  if (
                    (e.parameters["packetization-mode"] || 0) !==
                    (t.parameters["packetization-mode"] || 0)
                  )
                    return !1;
                  if (!s.isSameProfile(e.parameters, t.parameters)) return !1;
                  let r;
                  try {
                    r = s.generateProfileLevelIdForAnswer(
                      e.parameters,
                      t.parameters
                    );
                  } catch (e) {
                    return !1;
                  }
                  n &&
                    (r
                      ? ((e.parameters["profile-level-id"] = r),
                        (t.parameters["profile-level-id"] = r))
                      : (delete e.parameters["profile-level-id"],
                        delete t.parameters["profile-level-id"]));
                }
                break;
              case "video/vp9":
                if (r) {
                  if (
                    (e.parameters["profile-id"] || 0) !==
                    (t.parameters["profile-id"] || 0)
                  )
                    return !1;
                }
            }
            return !0;
          }
          function y(e, t) {
            return (!e.kind || !t.kind || e.kind === t.kind) && e.uri === t.uri;
          }
          function b(e, t) {
            const r = [];
            for (const n of e.rtcpFeedback || []) {
              const e = (t.rtcpFeedback || []).find(
                (e) =>
                  e.type === n.type &&
                  (e.parameter === n.parameter ||
                    (!e.parameter && !n.parameter))
              );
              e && r.push(e);
            }
            return r;
          }
          (t.validateRtpCapabilities = function (e) {
            if ("object" != typeof e)
              throw new TypeError("caps is not an object");
            if (e.codecs && !Array.isArray(e.codecs))
              throw new TypeError("caps.codecs is not an array");
            e.codecs || (e.codecs = []);
            for (const t of e.codecs) c(t);
            if (e.headerExtensions && !Array.isArray(e.headerExtensions))
              throw new TypeError("caps.headerExtensions is not an array");
            e.headerExtensions || (e.headerExtensions = []);
            for (const t of e.headerExtensions) l(t);
          }),
            (t.validateRtpCodecCapability = c),
            (t.validateRtcpFeedback = d),
            (t.validateRtpHeaderExtension = l),
            (t.validateRtpParameters = u),
            (t.validateRtpCodecParameters = p),
            (t.validateRtpHeaderExtensionParameters = h),
            (t.validateRtpEncodingParameters = m),
            (t.validateRtcpParameters = f),
            (t.validateSctpCapabilities = function (e) {
              if ("object" != typeof e)
                throw new TypeError("caps is not an object");
              if (!e.numStreams || "object" != typeof e.numStreams)
                throw new TypeError("missing caps.numStreams");
              v(e.numStreams);
            }),
            (t.validateNumSctpStreams = v),
            (t.validateSctpParameters = function (e) {
              if ("object" != typeof e)
                throw new TypeError("params is not an object");
              if ("number" != typeof e.port)
                throw new TypeError("missing params.port");
              if ("number" != typeof e.OS)
                throw new TypeError("missing params.OS");
              if ("number" != typeof e.MIS)
                throw new TypeError("missing params.MIS");
              if ("number" != typeof e.maxMessageSize)
                throw new TypeError("missing params.maxMessageSize");
            }),
            (t.validateSctpStreamParameters = function (e) {
              if ("object" != typeof e)
                throw new TypeError("params is not an object");
              if ("number" != typeof e.streamId)
                throw new TypeError("missing params.streamId");
              let t = !1;
              if (
                ("boolean" == typeof e.ordered ? (t = !0) : (e.ordered = !0),
                e.maxPacketLifeTime && "number" != typeof e.maxPacketLifeTime)
              )
                throw new TypeError("invalid params.maxPacketLifeTime");
              if (e.maxRetransmits && "number" != typeof e.maxRetransmits)
                throw new TypeError("invalid params.maxRetransmits");
              if (e.maxPacketLifeTime && e.maxRetransmits)
                throw new TypeError(
                  "cannot provide both maxPacketLifeTime and maxRetransmits"
                );
              if (t && e.ordered && (e.maxPacketLifeTime || e.maxRetransmits))
                throw new TypeError(
                  "cannot be ordered with maxPacketLifeTime or maxRetransmits"
                );
              if (
                (t ||
                  (!e.maxPacketLifeTime && !e.maxRetransmits) ||
                  (e.ordered = !1),
                e.label && "string" != typeof e.label)
              )
                throw new TypeError("invalid params.label");
              if (e.protocol && "string" != typeof e.protocol)
                throw new TypeError("invalid params.protocol");
            }),
            (t.getExtendedRtpCapabilities = function (e, t) {
              const r = { codecs: [], headerExtensions: [] };
              for (const n of t.codecs || []) {
                if (_(n)) continue;
                const t = (e.codecs || []).find((e) =>
                  g(e, n, { strict: !0, modify: !0 })
                );
                if (!t) continue;
                const a = {
                  mimeType: t.mimeType,
                  kind: t.kind,
                  clockRate: t.clockRate,
                  channels: t.channels,
                  localPayloadType: t.preferredPayloadType,
                  localRtxPayloadType: void 0,
                  remotePayloadType: n.preferredPayloadType,
                  remoteRtxPayloadType: void 0,
                  localParameters: t.parameters,
                  remoteParameters: n.parameters,
                  rtcpFeedback: b(t, n),
                };
                r.codecs.push(a);
              }
              for (const n of r.codecs) {
                const r = e.codecs.find(
                    (e) => _(e) && e.parameters.apt === n.localPayloadType
                  ),
                  a = t.codecs.find(
                    (e) => _(e) && e.parameters.apt === n.remotePayloadType
                  );
                r &&
                  a &&
                  ((n.localRtxPayloadType = r.preferredPayloadType),
                  (n.remoteRtxPayloadType = a.preferredPayloadType));
              }
              for (const n of t.headerExtensions) {
                const t = e.headerExtensions.find((e) => y(e, n));
                if (!t) continue;
                const a = {
                  kind: n.kind,
                  uri: n.uri,
                  sendId: t.preferredId,
                  recvId: n.preferredId,
                  encrypt: t.preferredEncrypt,
                  direction: "sendrecv",
                };
                switch (n.direction) {
                  case "sendrecv":
                    a.direction = "sendrecv";
                    break;
                  case "recvonly":
                    a.direction = "sendonly";
                    break;
                  case "sendonly":
                    a.direction = "recvonly";
                    break;
                  case "inactive":
                    a.direction = "inactive";
                }
                r.headerExtensions.push(a);
              }
              return r;
            }),
            (t.getRecvRtpCapabilities = function (e) {
              const t = { codecs: [], headerExtensions: [] };
              for (const r of e.codecs) {
                const e = {
                  mimeType: r.mimeType,
                  kind: r.kind,
                  preferredPayloadType: r.remotePayloadType,
                  clockRate: r.clockRate,
                  channels: r.channels,
                  parameters: r.localParameters,
                  rtcpFeedback: r.rtcpFeedback,
                };
                if ((t.codecs.push(e), !r.remoteRtxPayloadType)) continue;
                const n = {
                  mimeType: `${r.kind}/rtx`,
                  kind: r.kind,
                  preferredPayloadType: r.remoteRtxPayloadType,
                  clockRate: r.clockRate,
                  parameters: { apt: r.remotePayloadType },
                  rtcpFeedback: [],
                };
                t.codecs.push(n);
              }
              for (const r of e.headerExtensions) {
                if ("sendrecv" !== r.direction && "recvonly" !== r.direction)
                  continue;
                const e = {
                  kind: r.kind,
                  uri: r.uri,
                  preferredId: r.recvId,
                  preferredEncrypt: r.encrypt,
                  direction: r.direction,
                };
                t.headerExtensions.push(e);
              }
              return t;
            }),
            (t.getSendingRtpParameters = function (e, t) {
              const r = {
                mid: void 0,
                codecs: [],
                headerExtensions: [],
                encodings: [],
                rtcp: {},
              };
              for (const n of t.codecs) {
                if (n.kind !== e) continue;
                const t = {
                  mimeType: n.mimeType,
                  payloadType: n.localPayloadType,
                  clockRate: n.clockRate,
                  channels: n.channels,
                  parameters: n.localParameters,
                  rtcpFeedback: n.rtcpFeedback,
                };
                if ((r.codecs.push(t), n.localRtxPayloadType)) {
                  const e = {
                    mimeType: `${n.kind}/rtx`,
                    payloadType: n.localRtxPayloadType,
                    clockRate: n.clockRate,
                    parameters: { apt: n.localPayloadType },
                    rtcpFeedback: [],
                  };
                  r.codecs.push(e);
                }
              }
              for (const n of t.headerExtensions) {
                if (
                  (n.kind && n.kind !== e) ||
                  ("sendrecv" !== n.direction && "sendonly" !== n.direction)
                )
                  continue;
                const t = {
                  uri: n.uri,
                  id: n.sendId,
                  encrypt: n.encrypt,
                  parameters: {},
                };
                r.headerExtensions.push(t);
              }
              return r;
            }),
            (t.getSendingRemoteRtpParameters = function (e, t) {
              const r = {
                mid: void 0,
                codecs: [],
                headerExtensions: [],
                encodings: [],
                rtcp: {},
              };
              for (const n of t.codecs) {
                if (n.kind !== e) continue;
                const t = {
                  mimeType: n.mimeType,
                  payloadType: n.localPayloadType,
                  clockRate: n.clockRate,
                  channels: n.channels,
                  parameters: n.remoteParameters,
                  rtcpFeedback: n.rtcpFeedback,
                };
                if ((r.codecs.push(t), n.localRtxPayloadType)) {
                  const e = {
                    mimeType: `${n.kind}/rtx`,
                    payloadType: n.localRtxPayloadType,
                    clockRate: n.clockRate,
                    parameters: { apt: n.localPayloadType },
                    rtcpFeedback: [],
                  };
                  r.codecs.push(e);
                }
              }
              for (const n of t.headerExtensions) {
                if (
                  (n.kind && n.kind !== e) ||
                  ("sendrecv" !== n.direction && "sendonly" !== n.direction)
                )
                  continue;
                const t = {
                  uri: n.uri,
                  id: n.sendId,
                  encrypt: n.encrypt,
                  parameters: {},
                };
                r.headerExtensions.push(t);
              }
              if (
                r.headerExtensions.some(
                  (e) =>
                    "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01" ===
                    e.uri
                )
              )
                for (const e of r.codecs)
                  e.rtcpFeedback = (e.rtcpFeedback || []).filter(
                    (e) => "goog-remb" !== e.type
                  );
              else if (
                r.headerExtensions.some(
                  (e) =>
                    "http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time" ===
                    e.uri
                )
              )
                for (const e of r.codecs)
                  e.rtcpFeedback = (e.rtcpFeedback || []).filter(
                    (e) => "transport-cc" !== e.type
                  );
              else
                for (const e of r.codecs)
                  e.rtcpFeedback = (e.rtcpFeedback || []).filter(
                    (e) => "transport-cc" !== e.type && "goog-remb" !== e.type
                  );
              return r;
            }),
            (t.reduceCodecs = function (e, t) {
              const r = [];
              if (t) {
                for (let n = 0; n < e.length; ++n)
                  if (g(e[n], t)) {
                    r.push(e[n]), _(e[n + 1]) && r.push(e[n + 1]);
                    break;
                  }
                if (0 === r.length)
                  throw new TypeError("no matching codec found");
              } else r.push(e[0]), _(e[1]) && r.push(e[1]);
              return r;
            }),
            (t.generateProbatorRtpParameters = function (e) {
              u((e = o.clone(e, {})));
              const t = {
                mid: "probator",
                codecs: [],
                headerExtensions: [],
                encodings: [{ ssrc: 1234 }],
                rtcp: { cname: "probator" },
              };
              return (
                t.codecs.push(e.codecs[0]),
                (t.codecs[0].payloadType = 127),
                (t.headerExtensions = e.headerExtensions),
                t
              );
            }),
            (t.canSend = function (e, t) {
              return t.codecs.some((t) => t.kind === e);
            }),
            (t.canReceive = function (e, t) {
              if ((u(e), 0 === e.codecs.length)) return !1;
              const r = e.codecs[0];
              return t.codecs.some(
                (e) => e.remotePayloadType === r.payloadType
              );
            });
        },
        2770: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.parse = void 0);
          const r = new RegExp("^[LS]([1-9]\\d{0,1})T([1-9]\\d{0,1})");
          t.parse = function (e) {
            const t = r.exec(e || "");
            return t
              ? { spatialLayers: Number(t[1]), temporalLayers: Number(t[2]) }
              : { spatialLayers: 1, temporalLayers: 1 };
          };
        },
        53: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__exportStar) ||
              function (e, t) {
                for (var r in e)
                  "default" === r ||
                    Object.prototype.hasOwnProperty.call(t, r) ||
                    n(t, e, r);
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            a(r(3120), t),
            a(r(5202), t),
            a(r(6569), t),
            a(r(9514), t),
            a(r(5504), t),
            a(r(1623), t),
            a(r(4879), t),
            a(r(7669), t),
            a(r(9316), t),
            a(r(9992), t);
        },
        3347: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.generateRandomNumber = t.clone = void 0),
            (t.clone = function (e, t) {
              return void 0 === e ? t : JSON.parse(JSON.stringify(e));
            }),
            (t.generateRandomNumber = function () {
              return Math.round(1e7 * Math.random());
            });
        },
        7824: (e) => {
          var t = 1e3,
            r = 60 * t,
            n = 60 * r,
            a = 24 * n,
            i = 7 * a,
            s = 365.25 * a;
          function o(e, t, r, n) {
            var a = t >= 1.5 * r;
            return Math.round(e / r) + " " + n + (a ? "s" : "");
          }
          e.exports = function (e, c) {
            c = c || {};
            var d = typeof e;
            if ("string" === d && e.length > 0)
              return (function (e) {
                if ((e = String(e)).length > 100) return;
                var o =
                  /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
                    e
                  );
                if (!o) return;
                var c = parseFloat(o[1]);
                switch ((o[2] || "ms").toLowerCase()) {
                  case "years":
                  case "year":
                  case "yrs":
                  case "yr":
                  case "y":
                    return c * s;
                  case "weeks":
                  case "week":
                  case "w":
                    return c * i;
                  case "days":
                  case "day":
                  case "d":
                    return c * a;
                  case "hours":
                  case "hour":
                  case "hrs":
                  case "hr":
                  case "h":
                    return c * n;
                  case "minutes":
                  case "minute":
                  case "mins":
                  case "min":
                  case "m":
                    return c * r;
                  case "seconds":
                  case "second":
                  case "secs":
                  case "sec":
                  case "s":
                    return c * t;
                  case "milliseconds":
                  case "millisecond":
                  case "msecs":
                  case "msec":
                  case "ms":
                    return c;
                  default:
                    return;
                }
              })(e);
            if ("number" === d && isFinite(e))
              return c.long
                ? (function (e) {
                    var i = Math.abs(e);
                    if (i >= a) return o(e, i, a, "day");
                    if (i >= n) return o(e, i, n, "hour");
                    if (i >= r) return o(e, i, r, "minute");
                    if (i >= t) return o(e, i, t, "second");
                    return e + " ms";
                  })(e)
                : (function (e) {
                    var i = Math.abs(e);
                    if (i >= a) return Math.round(e / a) + "d";
                    if (i >= n) return Math.round(e / n) + "h";
                    if (i >= r) return Math.round(e / r) + "m";
                    if (i >= t) return Math.round(e / t) + "s";
                    return e + "ms";
                  })(e);
            throw new Error(
              "val is not a non-empty string or a valid number. val=" +
                JSON.stringify(e)
            );
          };
        },
        7576: (e, t, r) => {
          const { EventEmitter: n } = r(7187),
            a = r(3417);
          e.exports = class extends n {
            constructor(e) {
              super(),
                this.setMaxListeners(1 / 0),
                (this._logger = e || new a("EnhancedEventEmitter"));
            }
            safeEmit(e, ...t) {
              try {
                this.emit(e, ...t);
              } catch (t) {
                this._logger.error(
                  "safeEmit() | event listener threw an error [event:%s]:%o",
                  e,
                  t
                );
              }
            }
            async safeEmitAsPromise(e, ...t) {
              return new Promise((r, n) => {
                this.safeEmit(e, ...t, r, n);
              });
            }
          };
        },
        3417: (e, t, r) => {
          const n = r(1227),
            a = "protoo-client";
          e.exports = class {
            constructor(e) {
              e
                ? ((this._debug = n(`${a}:${e}`)),
                  (this._warn = n(`${a}:WARN:${e}`)),
                  (this._error = n(`${a}:ERROR:${e}`)))
                : ((this._debug = n(a)),
                  (this._warn = n(`${a}:WARN`)),
                  (this._error = n(`${a}:ERROR`))),
                (this._debug.log = console.info.bind(console)),
                (this._warn.log = console.warn.bind(console)),
                (this._error.log = console.error.bind(console));
            }
            get debug() {
              return this._debug;
            }
            get warn() {
              return this._warn;
            }
            get error() {
              return this._error;
            }
          };
        },
        6508: (e, t, r) => {
          const n = r(3417),
            { generateRandomNumber: a } = r(5654),
            i = new n("Message");
          e.exports = class {
            static parse(e) {
              let t;
              const r = {};
              try {
                t = JSON.parse(e);
              } catch (e) {
                return void i.error("parse() | invalid JSON: %s", e);
              }
              if ("object" == typeof t && !Array.isArray(t)) {
                if (t.request) {
                  if (((r.request = !0), "string" != typeof t.method))
                    return void i.error(
                      "parse() | missing/invalid method field"
                    );
                  if ("number" != typeof t.id)
                    return void i.error("parse() | missing/invalid id field");
                  (r.id = t.id), (r.method = t.method), (r.data = t.data || {});
                } else if (t.response) {
                  if (((r.response = !0), "number" != typeof t.id))
                    return void i.error("parse() | missing/invalid id field");
                  (r.id = t.id),
                    t.ok
                      ? ((r.ok = !0), (r.data = t.data || {}))
                      : ((r.ok = !1),
                        (r.errorCode = t.errorCode),
                        (r.errorReason = t.errorReason));
                } else {
                  if (!t.notification)
                    return void i.error(
                      "parse() | missing request/response field"
                    );
                  if (((r.notification = !0), "string" != typeof t.method))
                    return void i.error(
                      "parse() | missing/invalid method field"
                    );
                  (r.method = t.method), (r.data = t.data || {});
                }
                return r;
              }
              i.error("parse() | not an object");
            }
            static createRequest(e, t) {
              return { request: !0, id: a(), method: e, data: t || {} };
            }
            static createSuccessResponse(e, t) {
              return { response: !0, id: e.id, ok: !0, data: t || {} };
            }
            static createErrorResponse(e, t, r) {
              return {
                response: !0,
                id: e.id,
                ok: !1,
                errorCode: t,
                errorReason: r,
              };
            }
            static createNotification(e, t) {
              return { notification: !0, method: e, data: t || {} };
            }
          };
        },
        7502: (e, t, r) => {
          const n = r(3417),
            a = r(7576),
            i = r(6508),
            s = new n("Peer");
          e.exports = class extends a {
            constructor(e) {
              super(s),
                s.debug("constructor()"),
                (this._closed = !1),
                (this._transport = e),
                (this._connected = !1),
                (this._data = {}),
                (this._sents = new Map()),
                this._handleTransport();
            }
            get closed() {
              return this._closed;
            }
            get connected() {
              return this._connected;
            }
            get data() {
              return this._data;
            }
            set data(e) {
              throw new Error("cannot override data object");
            }
            close() {
              if (!this._closed) {
                s.debug("close()"),
                  (this._closed = !0),
                  (this._connected = !1),
                  this._transport.close();
                for (const e of this._sents.values()) e.close();
                this.safeEmit("close");
              }
            }
            async request(e, t) {
              const r = i.createRequest(e, t);
              return (
                this._logger.debug("request() [method:%s, id:%s]", e, r.id),
                await this._transport.send(r),
                new Promise((e, t) => {
                  const n = 1500 * (15 + 0.1 * this._sents.size),
                    a = {
                      id: r.id,
                      method: r.method,
                      resolve: (t) => {
                        this._sents.delete(r.id) &&
                          (clearTimeout(a.timer), e(t));
                      },
                      reject: (e) => {
                        this._sents.delete(r.id) &&
                          (clearTimeout(a.timer), t(e));
                      },
                      timer: setTimeout(() => {
                        this._sents.delete(r.id) &&
                          t(new Error("request timeout"));
                      }, n),
                      close: () => {
                        clearTimeout(a.timer), t(new Error("peer closed"));
                      },
                    };
                  this._sents.set(r.id, a);
                })
              );
            }
            async notify(e, t) {
              const r = i.createNotification(e, t);
              this._logger.debug("notify() [method:%s]", e),
                await this._transport.send(r);
            }
            _handleTransport() {
              if (this._transport.closed)
                return (
                  (this._closed = !0),
                  void setTimeout(() => {
                    this._closed ||
                      ((this._connected = !1), this.safeEmit("close"));
                  })
                );
              this._transport.on("open", () => {
                this._closed ||
                  (s.debug('emit "open"'),
                  (this._connected = !0),
                  this.safeEmit("open"));
              }),
                this._transport.on("disconnected", () => {
                  this._closed ||
                    (s.debug('emit "disconnected"'),
                    (this._connected = !1),
                    this.safeEmit("disconnected"));
                }),
                this._transport.on("failed", (e) => {
                  this._closed ||
                    (s.debug('emit "failed" [currentAttempt:%s]', e),
                    (this._connected = !1),
                    this.safeEmit("failed", e));
                }),
                this._transport.on("close", () => {
                  this._closed ||
                    ((this._closed = !0),
                    s.debug('emit "close"'),
                    (this._connected = !1),
                    this.safeEmit("close"));
                }),
                this._transport.on("message", (e) => {
                  e.request
                    ? this._handleRequest(e)
                    : e.response
                    ? this._handleResponse(e)
                    : e.notification && this._handleNotification(e);
                });
            }
            _handleRequest(e) {
              try {
                this.emit(
                  "request",
                  e,
                  (t) => {
                    const r = i.createSuccessResponse(e, t);
                    this._transport.send(r).catch(() => {});
                  },
                  (t, r) => {
                    t instanceof Error
                      ? ((r = t.message), (t = 500))
                      : "number" == typeof t &&
                        r instanceof Error &&
                        (r = r.message);
                    const n = i.createErrorResponse(e, t, r);
                    this._transport.send(n).catch(() => {});
                  }
                );
              } catch (t) {
                const r = i.createErrorResponse(e, 500, String(t));
                this._transport.send(r).catch(() => {});
              }
            }
            _handleResponse(e) {
              const t = this._sents.get(e.id);
              if (t)
                if (e.ok) t.resolve(e.data);
                else {
                  const r = new Error(e.errorReason);
                  (r.code = e.errorCode), t.reject(r);
                }
              else
                s.error(
                  "received response does not match any sent request [id:%s]",
                  e.id
                );
            }
            _handleNotification(e) {
              this.safeEmit("notification", e);
            }
          };
        },
        9293: (e, t, r) => {
          const { version: n } = r(7002),
            a = r(7502),
            i = r(2165);
          (t._z = a), (t.qo = i);
        },
        2165: (e, t, r) => {
          const n = r(5840).w3cwebsocket,
            a = r(9353),
            i = r(3417),
            s = r(7576),
            o = r(6508),
            c = { retries: 10, factor: 2, minTimeout: 1e3, maxTimeout: 8e3 },
            d = new i("WebSocketTransport");
          e.exports = class extends s {
            constructor(e, t) {
              super(d),
                d.debug("constructor() [url:%s, options:%o]", e, t),
                (this._closed = !1),
                (this._url = e),
                (this._options = t || {}),
                (this._ws = null),
                this._runWebSocket();
            }
            get closed() {
              return this._closed;
            }
            close() {
              if (!this._closed) {
                d.debug("close()"), (this._closed = !0), this.safeEmit("close");
                try {
                  (this._ws.onopen = null),
                    (this._ws.onclose = null),
                    (this._ws.onerror = null),
                    (this._ws.onmessage = null),
                    this._ws.close();
                } catch (e) {
                  d.error("close() | error closing the WebSocket: %o", e);
                }
              }
            }
            async send(e) {
              if (this._closed) throw new Error("transport closed");
              try {
                this._ws.send(JSON.stringify(e));
              } catch (e) {
                throw (d.warn("send() failed:%o", e), e);
              }
            }
            _runWebSocket() {
              const e = a.operation(this._options.retry || c);
              let t = !1;
              e.attempt((r) => {
                this._closed
                  ? e.stop()
                  : (d.debug("_runWebSocket() [currentAttempt:%s]", r),
                    (this._ws = new n(
                      this._url,
                      "protoo",
                      this._options.origin,
                      this._options.headers,
                      this._options.requestOptions,
                      this._options.clientConfig
                    )),
                    (this._ws.onopen = () => {
                      this._closed || ((t = !0), this.safeEmit("open"));
                    }),
                    (this._ws.onclose = (n) => {
                      if (!this._closed) {
                        if (
                          (d.warn(
                            'WebSocket "close" event [wasClean:%s, code:%s, reason:"%s"]',
                            n.wasClean,
                            n.code,
                            n.reason
                          ),
                          4e3 !== n.code)
                        ) {
                          if (t) {
                            if (
                              (e.stop(),
                              this.safeEmit("disconnected"),
                              this._closed)
                            )
                              return;
                            return void this._runWebSocket();
                          }
                          if ((this.safeEmit("failed", r), this._closed))
                            return;
                          if (e.retry(!0)) return;
                        }
                        (this._closed = !0), this.safeEmit("close");
                      }
                    }),
                    (this._ws.onerror = () => {
                      this._closed || d.error('WebSocket "error" event');
                    }),
                    (this._ws.onmessage = (e) => {
                      if (this._closed) return;
                      const t = o.parse(e.data);
                      t &&
                        (0 !== this.listenerCount("message")
                          ? this.safeEmit("message", t)
                          : d.error(
                              'no listeners for WebSocket "message" event, ignoring received message'
                            ));
                    }));
              });
            }
          };
        },
        5654: (e, t) => {
          t.generateRandomNumber = function () {
            return Math.round(1e7 * Math.random());
          };
        },
        3196: (e) => {
          "use strict";
          e.exports = function (e) {
            var t,
              r,
              n = "",
              a = (e = (function (e) {
                return (
                  e || (e = {}),
                  {
                    length: e.length || 8,
                    numeric: "boolean" != typeof e.numeric || e.numeric,
                    letters: "boolean" != typeof e.letters || e.letters,
                    special: "boolean" == typeof e.special && e.special,
                    exclude: Array.isArray(e.exclude) ? e.exclude : [],
                  }
                );
              })(e)).length,
              i =
                (e.exclude,
                (function (e) {
                  var t = "";
                  e.numeric && (t += "0123456789"),
                    e.letters &&
                      (t +=
                        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"),
                    e.special && (t += "!$%^&*()_+|~-=`{}[]:;<>?,./");
                  for (var r = 0; r <= e.exclude.length; r++)
                    t = t.replace(e.exclude[r], "");
                  return t;
                })(e));
            for (t = 1; t <= a; t++)
              n += i.substring(
                (r = Math.floor(Math.random() * i.length)),
                r + 1
              );
            return n;
          };
        },
        5666: (e) => {
          var t = (function (e) {
            "use strict";
            var t,
              r = Object.prototype,
              n = r.hasOwnProperty,
              a = "function" == typeof Symbol ? Symbol : {},
              i = a.iterator || "@@iterator",
              s = a.asyncIterator || "@@asyncIterator",
              o = a.toStringTag || "@@toStringTag";
            function c(e, t, r) {
              return (
                Object.defineProperty(e, t, {
                  value: r,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                }),
                e[t]
              );
            }
            try {
              c({}, "");
            } catch (e) {
              c = function (e, t, r) {
                return (e[t] = r);
              };
            }
            function d(e, t, r, n) {
              var a = t && t.prototype instanceof v ? t : v,
                i = Object.create(a.prototype),
                s = new C(n || []);
              return (
                (i._invoke = (function (e, t, r) {
                  var n = u;
                  return function (a, i) {
                    if (n === h)
                      throw new Error("Generator is already running");
                    if (n === m) {
                      if ("throw" === a) throw i;
                      return O();
                    }
                    for (r.method = a, r.arg = i; ; ) {
                      var s = r.delegate;
                      if (s) {
                        var o = E(s, r);
                        if (o) {
                          if (o === f) continue;
                          return o;
                        }
                      }
                      if ("next" === r.method) r.sent = r._sent = r.arg;
                      else if ("throw" === r.method) {
                        if (n === u) throw ((n = m), r.arg);
                        r.dispatchException(r.arg);
                      } else "return" === r.method && r.abrupt("return", r.arg);
                      n = h;
                      var c = l(e, t, r);
                      if ("normal" === c.type) {
                        if (((n = r.done ? m : p), c.arg === f)) continue;
                        return { value: c.arg, done: r.done };
                      }
                      "throw" === c.type &&
                        ((n = m), (r.method = "throw"), (r.arg = c.arg));
                    }
                  };
                })(e, r, s)),
                i
              );
            }
            function l(e, t, r) {
              try {
                return { type: "normal", arg: e.call(t, r) };
              } catch (e) {
                return { type: "throw", arg: e };
              }
            }
            e.wrap = d;
            var u = "suspendedStart",
              p = "suspendedYield",
              h = "executing",
              m = "completed",
              f = {};
            function v() {}
            function _() {}
            function g() {}
            var y = {};
            c(y, i, function () {
              return this;
            });
            var b = Object.getPrototypeOf,
              w = b && b(b(x([])));
            w && w !== r && n.call(w, i) && (y = w);
            var S = (g.prototype = v.prototype = Object.create(y));
            function k(e) {
              ["next", "throw", "return"].forEach(function (t) {
                c(e, t, function (e) {
                  return this._invoke(t, e);
                });
              });
            }
            function R(e, t) {
              function r(a, i, s, o) {
                var c = l(e[a], e, i);
                if ("throw" !== c.type) {
                  var d = c.arg,
                    u = d.value;
                  return u && "object" == typeof u && n.call(u, "__await")
                    ? t.resolve(u.__await).then(
                        function (e) {
                          r("next", e, s, o);
                        },
                        function (e) {
                          r("throw", e, s, o);
                        }
                      )
                    : t.resolve(u).then(
                        function (e) {
                          (d.value = e), s(d);
                        },
                        function (e) {
                          return r("throw", e, s, o);
                        }
                      );
                }
                o(c.arg);
              }
              var a;
              this._invoke = function (e, n) {
                function i() {
                  return new t(function (t, a) {
                    r(e, n, t, a);
                  });
                }
                return (a = a ? a.then(i, i) : i());
              };
            }
            function E(e, r) {
              var n = e.iterator[r.method];
              if (n === t) {
                if (((r.delegate = null), "throw" === r.method)) {
                  if (
                    e.iterator.return &&
                    ((r.method = "return"),
                    (r.arg = t),
                    E(e, r),
                    "throw" === r.method)
                  )
                    return f;
                  (r.method = "throw"),
                    (r.arg = new TypeError(
                      "The iterator does not provide a 'throw' method"
                    ));
                }
                return f;
              }
              var a = l(n, e.iterator, r.arg);
              if ("throw" === a.type)
                return (
                  (r.method = "throw"), (r.arg = a.arg), (r.delegate = null), f
                );
              var i = a.arg;
              return i
                ? i.done
                  ? ((r[e.resultName] = i.value),
                    (r.next = e.nextLoc),
                    "return" !== r.method && ((r.method = "next"), (r.arg = t)),
                    (r.delegate = null),
                    f)
                  : i
                : ((r.method = "throw"),
                  (r.arg = new TypeError("iterator result is not an object")),
                  (r.delegate = null),
                  f);
            }
            function T(e) {
              var t = { tryLoc: e[0] };
              1 in e && (t.catchLoc = e[1]),
                2 in e && ((t.finallyLoc = e[2]), (t.afterLoc = e[3])),
                this.tryEntries.push(t);
            }
            function P(e) {
              var t = e.completion || {};
              (t.type = "normal"), delete t.arg, (e.completion = t);
            }
            function C(e) {
              (this.tryEntries = [{ tryLoc: "root" }]),
                e.forEach(T, this),
                this.reset(!0);
            }
            function x(e) {
              if (e) {
                var r = e[i];
                if (r) return r.call(e);
                if ("function" == typeof e.next) return e;
                if (!isNaN(e.length)) {
                  var a = -1,
                    s = function r() {
                      for (; ++a < e.length; )
                        if (n.call(e, a))
                          return (r.value = e[a]), (r.done = !1), r;
                      return (r.value = t), (r.done = !0), r;
                    };
                  return (s.next = s);
                }
              }
              return { next: O };
            }
            function O() {
              return { value: t, done: !0 };
            }
            return (
              (_.prototype = g),
              c(S, "constructor", g),
              c(g, "constructor", _),
              (_.displayName = c(g, o, "GeneratorFunction")),
              (e.isGeneratorFunction = function (e) {
                var t = "function" == typeof e && e.constructor;
                return (
                  !!t &&
                  (t === _ || "GeneratorFunction" === (t.displayName || t.name))
                );
              }),
              (e.mark = function (e) {
                return (
                  Object.setPrototypeOf
                    ? Object.setPrototypeOf(e, g)
                    : ((e.__proto__ = g), c(e, o, "GeneratorFunction")),
                  (e.prototype = Object.create(S)),
                  e
                );
              }),
              (e.awrap = function (e) {
                return { __await: e };
              }),
              k(R.prototype),
              c(R.prototype, s, function () {
                return this;
              }),
              (e.AsyncIterator = R),
              (e.async = function (t, r, n, a, i) {
                void 0 === i && (i = Promise);
                var s = new R(d(t, r, n, a), i);
                return e.isGeneratorFunction(r)
                  ? s
                  : s.next().then(function (e) {
                      return e.done ? e.value : s.next();
                    });
              }),
              k(S),
              c(S, o, "Generator"),
              c(S, i, function () {
                return this;
              }),
              c(S, "toString", function () {
                return "[object Generator]";
              }),
              (e.keys = function (e) {
                var t = [];
                for (var r in e) t.push(r);
                return (
                  t.reverse(),
                  function r() {
                    for (; t.length; ) {
                      var n = t.pop();
                      if (n in e) return (r.value = n), (r.done = !1), r;
                    }
                    return (r.done = !0), r;
                  }
                );
              }),
              (e.values = x),
              (C.prototype = {
                constructor: C,
                reset: function (e) {
                  if (
                    ((this.prev = 0),
                    (this.next = 0),
                    (this.sent = this._sent = t),
                    (this.done = !1),
                    (this.delegate = null),
                    (this.method = "next"),
                    (this.arg = t),
                    this.tryEntries.forEach(P),
                    !e)
                  )
                    for (var r in this)
                      "t" === r.charAt(0) &&
                        n.call(this, r) &&
                        !isNaN(+r.slice(1)) &&
                        (this[r] = t);
                },
                stop: function () {
                  this.done = !0;
                  var e = this.tryEntries[0].completion;
                  if ("throw" === e.type) throw e.arg;
                  return this.rval;
                },
                dispatchException: function (e) {
                  if (this.done) throw e;
                  var r = this;
                  function a(n, a) {
                    return (
                      (o.type = "throw"),
                      (o.arg = e),
                      (r.next = n),
                      a && ((r.method = "next"), (r.arg = t)),
                      !!a
                    );
                  }
                  for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                    var s = this.tryEntries[i],
                      o = s.completion;
                    if ("root" === s.tryLoc) return a("end");
                    if (s.tryLoc <= this.prev) {
                      var c = n.call(s, "catchLoc"),
                        d = n.call(s, "finallyLoc");
                      if (c && d) {
                        if (this.prev < s.catchLoc) return a(s.catchLoc, !0);
                        if (this.prev < s.finallyLoc) return a(s.finallyLoc);
                      } else if (c) {
                        if (this.prev < s.catchLoc) return a(s.catchLoc, !0);
                      } else {
                        if (!d)
                          throw new Error(
                            "try statement without catch or finally"
                          );
                        if (this.prev < s.finallyLoc) return a(s.finallyLoc);
                      }
                    }
                  }
                },
                abrupt: function (e, t) {
                  for (var r = this.tryEntries.length - 1; r >= 0; --r) {
                    var a = this.tryEntries[r];
                    if (
                      a.tryLoc <= this.prev &&
                      n.call(a, "finallyLoc") &&
                      this.prev < a.finallyLoc
                    ) {
                      var i = a;
                      break;
                    }
                  }
                  i &&
                    ("break" === e || "continue" === e) &&
                    i.tryLoc <= t &&
                    t <= i.finallyLoc &&
                    (i = null);
                  var s = i ? i.completion : {};
                  return (
                    (s.type = e),
                    (s.arg = t),
                    i
                      ? ((this.method = "next"), (this.next = i.finallyLoc), f)
                      : this.complete(s)
                  );
                },
                complete: function (e, t) {
                  if ("throw" === e.type) throw e.arg;
                  return (
                    "break" === e.type || "continue" === e.type
                      ? (this.next = e.arg)
                      : "return" === e.type
                      ? ((this.rval = this.arg = e.arg),
                        (this.method = "return"),
                        (this.next = "end"))
                      : "normal" === e.type && t && (this.next = t),
                    f
                  );
                },
                finish: function (e) {
                  for (var t = this.tryEntries.length - 1; t >= 0; --t) {
                    var r = this.tryEntries[t];
                    if (r.finallyLoc === e)
                      return this.complete(r.completion, r.afterLoc), P(r), f;
                  }
                },
                catch: function (e) {
                  for (var t = this.tryEntries.length - 1; t >= 0; --t) {
                    var r = this.tryEntries[t];
                    if (r.tryLoc === e) {
                      var n = r.completion;
                      if ("throw" === n.type) {
                        var a = n.arg;
                        P(r);
                      }
                      return a;
                    }
                  }
                  throw new Error("illegal catch attempt");
                },
                delegateYield: function (e, r, n) {
                  return (
                    (this.delegate = {
                      iterator: x(e),
                      resultName: r,
                      nextLoc: n,
                    }),
                    "next" === this.method && (this.arg = t),
                    f
                  );
                },
              }),
              e
            );
          })(e.exports);
          try {
            regeneratorRuntime = t;
          } catch (e) {
            "object" == typeof globalThis
              ? (globalThis.regeneratorRuntime = t)
              : Function("r", "regeneratorRuntime = r")(t);
          }
        },
        9353: (e, t, r) => {
          e.exports = r(1846);
        },
        1846: (e, t, r) => {
          var n = r(1960);
          (t.operation = function (e) {
            var r = t.timeouts(e);
            return new n(r, {
              forever: e && e.forever,
              unref: e && e.unref,
              maxRetryTime: e && e.maxRetryTime,
            });
          }),
            (t.timeouts = function (e) {
              if (e instanceof Array) return [].concat(e);
              var t = {
                retries: 10,
                factor: 2,
                minTimeout: 1e3,
                maxTimeout: 1 / 0,
                randomize: !1,
              };
              for (var r in e) t[r] = e[r];
              if (t.minTimeout > t.maxTimeout)
                throw new Error("minTimeout is greater than maxTimeout");
              for (var n = [], a = 0; a < t.retries; a++)
                n.push(this.createTimeout(a, t));
              return (
                e && e.forever && !n.length && n.push(this.createTimeout(a, t)),
                n.sort(function (e, t) {
                  return e - t;
                }),
                n
              );
            }),
            (t.createTimeout = function (e, t) {
              var r = t.randomize ? Math.random() + 1 : 1,
                n = Math.round(r * t.minTimeout * Math.pow(t.factor, e));
              return (n = Math.min(n, t.maxTimeout));
            }),
            (t.wrap = function (e, r, n) {
              if ((r instanceof Array && ((n = r), (r = null)), !n))
                for (var a in ((n = []), e))
                  "function" == typeof e[a] && n.push(a);
              for (var i = 0; i < n.length; i++) {
                var s = n[i],
                  o = e[s];
                (e[s] = function (n) {
                  var a = t.operation(r),
                    i = Array.prototype.slice.call(arguments, 1),
                    s = i.pop();
                  i.push(function (e) {
                    a.retry(e) ||
                      (e && (arguments[0] = a.mainError()),
                      s.apply(this, arguments));
                  }),
                    a.attempt(function () {
                      n.apply(e, i);
                    });
                }.bind(e, o)),
                  (e[s].options = r);
              }
            });
        },
        1960: (e) => {
          function t(e, t) {
            "boolean" == typeof t && (t = { forever: t }),
              (this._originalTimeouts = JSON.parse(JSON.stringify(e))),
              (this._timeouts = e),
              (this._options = t || {}),
              (this._maxRetryTime = (t && t.maxRetryTime) || 1 / 0),
              (this._fn = null),
              (this._errors = []),
              (this._attempts = 1),
              (this._operationTimeout = null),
              (this._operationTimeoutCb = null),
              (this._timeout = null),
              (this._operationStart = null),
              this._options.forever &&
                (this._cachedTimeouts = this._timeouts.slice(0));
          }
          (e.exports = t),
            (t.prototype.reset = function () {
              (this._attempts = 1), (this._timeouts = this._originalTimeouts);
            }),
            (t.prototype.stop = function () {
              this._timeout && clearTimeout(this._timeout),
                (this._timeouts = []),
                (this._cachedTimeouts = null);
            }),
            (t.prototype.retry = function (e) {
              if ((this._timeout && clearTimeout(this._timeout), !e)) return !1;
              var t = new Date().getTime();
              if (e && t - this._operationStart >= this._maxRetryTime)
                return (
                  this._errors.unshift(
                    new Error("RetryOperation timeout occurred")
                  ),
                  !1
                );
              this._errors.push(e);
              var r = this._timeouts.shift();
              if (void 0 === r) {
                if (!this._cachedTimeouts) return !1;
                this._errors.splice(
                  this._errors.length - 1,
                  this._errors.length
                ),
                  (this._timeouts = this._cachedTimeouts.slice(0)),
                  (r = this._timeouts.shift());
              }
              var n = this,
                a = setTimeout(function () {
                  n._attempts++,
                    n._operationTimeoutCb &&
                      ((n._timeout = setTimeout(function () {
                        n._operationTimeoutCb(n._attempts);
                      }, n._operationTimeout)),
                      n._options.unref && n._timeout.unref()),
                    n._fn(n._attempts);
                }, r);
              return this._options.unref && a.unref(), !0;
            }),
            (t.prototype.attempt = function (e, t) {
              (this._fn = e),
                t &&
                  (t.timeout && (this._operationTimeout = t.timeout),
                  t.cb && (this._operationTimeoutCb = t.cb));
              var r = this;
              this._operationTimeoutCb &&
                (this._timeout = setTimeout(function () {
                  r._operationTimeoutCb();
                }, r._operationTimeout)),
                (this._operationStart = new Date().getTime()),
                this._fn(this._attempts);
            }),
            (t.prototype.try = function (e) {
              console.log("Using RetryOperation.try() is deprecated"),
                this.attempt(e);
            }),
            (t.prototype.start = function (e) {
              console.log("Using RetryOperation.start() is deprecated"),
                this.attempt(e);
            }),
            (t.prototype.start = t.prototype.try),
            (t.prototype.errors = function () {
              return this._errors;
            }),
            (t.prototype.attempts = function () {
              return this._attempts;
            }),
            (t.prototype.mainError = function () {
              if (0 === this._errors.length) return null;
              for (
                var e = {}, t = null, r = 0, n = 0;
                n < this._errors.length;
                n++
              ) {
                var a = this._errors[n],
                  i = a.message,
                  s = (e[i] || 0) + 1;
                (e[i] = s), s >= r && ((t = a), (r = s));
              }
              return t;
            });
        },
        6692: (e) => {
          var t = (e.exports = {
            v: [{ name: "version", reg: /^(\d*)$/ }],
            o: [
              {
                name: "origin",
                reg: /^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/,
                names: [
                  "username",
                  "sessionId",
                  "sessionVersion",
                  "netType",
                  "ipVer",
                  "address",
                ],
                format: "%s %s %d %s IP%d %s",
              },
            ],
            s: [{ name: "name" }],
            i: [{ name: "description" }],
            u: [{ name: "uri" }],
            e: [{ name: "email" }],
            p: [{ name: "phone" }],
            z: [{ name: "timezones" }],
            r: [{ name: "repeats" }],
            t: [
              {
                name: "timing",
                reg: /^(\d*) (\d*)/,
                names: ["start", "stop"],
                format: "%d %d",
              },
            ],
            c: [
              {
                name: "connection",
                reg: /^IN IP(\d) (\S*)/,
                names: ["version", "ip"],
                format: "IN IP%d %s",
              },
            ],
            b: [
              {
                push: "bandwidth",
                reg: /^(TIAS|AS|CT|RR|RS):(\d*)/,
                names: ["type", "limit"],
                format: "%s:%s",
              },
            ],
            m: [
              {
                reg: /^(\w*) (\d*) ([\w/]*)(?: (.*))?/,
                names: ["type", "port", "protocol", "payloads"],
                format: "%s %d %s %s",
              },
            ],
            a: [
              {
                push: "rtp",
                reg: /^rtpmap:(\d*) ([\w\-.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/,
                names: ["payload", "codec", "rate", "encoding"],
                format: function (e) {
                  return e.encoding
                    ? "rtpmap:%d %s/%s/%s"
                    : e.rate
                    ? "rtpmap:%d %s/%s"
                    : "rtpmap:%d %s";
                },
              },
              {
                push: "fmtp",
                reg: /^fmtp:(\d*) ([\S| ]*)/,
                names: ["payload", "config"],
                format: "fmtp:%d %s",
              },
              { name: "control", reg: /^control:(.*)/, format: "control:%s" },
              {
                name: "rtcp",
                reg: /^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/,
                names: ["port", "netType", "ipVer", "address"],
                format: function (e) {
                  return null != e.address ? "rtcp:%d %s IP%d %s" : "rtcp:%d";
                },
              },
              {
                push: "rtcpFbTrrInt",
                reg: /^rtcp-fb:(\*|\d*) trr-int (\d*)/,
                names: ["payload", "value"],
                format: "rtcp-fb:%s trr-int %d",
              },
              {
                push: "rtcpFb",
                reg: /^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/,
                names: ["payload", "type", "subtype"],
                format: function (e) {
                  return null != e.subtype
                    ? "rtcp-fb:%s %s %s"
                    : "rtcp-fb:%s %s";
                },
              },
              {
                push: "ext",
                reg: /^extmap:(\d+)(?:\/(\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\S*)(?: (\S*))?/,
                names: ["value", "direction", "encrypt-uri", "uri", "config"],
                format: function (e) {
                  return (
                    "extmap:%d" +
                    (e.direction ? "/%s" : "%v") +
                    (e["encrypt-uri"] ? " %s" : "%v") +
                    " %s" +
                    (e.config ? " %s" : "")
                  );
                },
              },
              { name: "extmapAllowMixed", reg: /^(extmap-allow-mixed)/ },
              {
                push: "crypto",
                reg: /^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/,
                names: ["id", "suite", "config", "sessionConfig"],
                format: function (e) {
                  return null != e.sessionConfig
                    ? "crypto:%d %s %s %s"
                    : "crypto:%d %s %s";
                },
              },
              { name: "setup", reg: /^setup:(\w*)/, format: "setup:%s" },
              {
                name: "connectionType",
                reg: /^connection:(new|existing)/,
                format: "connection:%s",
              },
              { name: "mid", reg: /^mid:([^\s]*)/, format: "mid:%s" },
              { name: "msid", reg: /^msid:(.*)/, format: "msid:%s" },
              {
                name: "ptime",
                reg: /^ptime:(\d*(?:\.\d*)*)/,
                format: "ptime:%d",
              },
              {
                name: "maxptime",
                reg: /^maxptime:(\d*(?:\.\d*)*)/,
                format: "maxptime:%d",
              },
              {
                name: "direction",
                reg: /^(sendrecv|recvonly|sendonly|inactive)/,
              },
              { name: "icelite", reg: /^(ice-lite)/ },
              {
                name: "iceUfrag",
                reg: /^ice-ufrag:(\S*)/,
                format: "ice-ufrag:%s",
              },
              { name: "icePwd", reg: /^ice-pwd:(\S*)/, format: "ice-pwd:%s" },
              {
                name: "fingerprint",
                reg: /^fingerprint:(\S*) (\S*)/,
                names: ["type", "hash"],
                format: "fingerprint:%s %s",
              },
              {
                push: "candidates",
                reg: /^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/,
                names: [
                  "foundation",
                  "component",
                  "transport",
                  "priority",
                  "ip",
                  "port",
                  "type",
                  "raddr",
                  "rport",
                  "tcptype",
                  "generation",
                  "network-id",
                  "network-cost",
                ],
                format: function (e) {
                  var t = "candidate:%s %d %s %d %s %d typ %s";
                  return (
                    (t += null != e.raddr ? " raddr %s rport %d" : "%v%v"),
                    (t += null != e.tcptype ? " tcptype %s" : "%v"),
                    null != e.generation && (t += " generation %d"),
                    (t += null != e["network-id"] ? " network-id %d" : "%v"),
                    (t += null != e["network-cost"] ? " network-cost %d" : "%v")
                  );
                },
              },
              { name: "endOfCandidates", reg: /^(end-of-candidates)/ },
              {
                name: "remoteCandidates",
                reg: /^remote-candidates:(.*)/,
                format: "remote-candidates:%s",
              },
              {
                name: "iceOptions",
                reg: /^ice-options:(\S*)/,
                format: "ice-options:%s",
              },
              {
                push: "ssrcs",
                reg: /^ssrc:(\d*) ([\w_-]*)(?::(.*))?/,
                names: ["id", "attribute", "value"],
                format: function (e) {
                  var t = "ssrc:%d";
                  return (
                    null != e.attribute &&
                      ((t += " %s"), null != e.value && (t += ":%s")),
                    t
                  );
                },
              },
              {
                push: "ssrcGroups",
                reg: /^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/,
                names: ["semantics", "ssrcs"],
                format: "ssrc-group:%s %s",
              },
              {
                name: "msidSemantic",
                reg: /^msid-semantic:\s?(\w*) (\S*)/,
                names: ["semantic", "token"],
                format: "msid-semantic: %s %s",
              },
              {
                push: "groups",
                reg: /^group:(\w*) (.*)/,
                names: ["type", "mids"],
                format: "group:%s %s",
              },
              { name: "rtcpMux", reg: /^(rtcp-mux)/ },
              { name: "rtcpRsize", reg: /^(rtcp-rsize)/ },
              {
                name: "sctpmap",
                reg: /^sctpmap:([\w_/]*) (\S*)(?: (\S*))?/,
                names: ["sctpmapNumber", "app", "maxMessageSize"],
                format: function (e) {
                  return null != e.maxMessageSize
                    ? "sctpmap:%s %s %s"
                    : "sctpmap:%s %s";
                },
              },
              {
                name: "xGoogleFlag",
                reg: /^x-google-flag:([^\s]*)/,
                format: "x-google-flag:%s",
              },
              {
                push: "rids",
                reg: /^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/,
                names: ["id", "direction", "params"],
                format: function (e) {
                  return e.params ? "rid:%s %s %s" : "rid:%s %s";
                },
              },
              {
                push: "imageattrs",
                reg: new RegExp(
                  "^imageattr:(\\d+|\\*)[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?"
                ),
                names: ["pt", "dir1", "attrs1", "dir2", "attrs2"],
                format: function (e) {
                  return "imageattr:%s %s %s" + (e.dir2 ? " %s %s" : "");
                },
              },
              {
                name: "simulcast",
                reg: new RegExp(
                  "^simulcast:(send|recv) ([a-zA-Z0-9\\-_~;,]+)(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?$"
                ),
                names: ["dir1", "list1", "dir2", "list2"],
                format: function (e) {
                  return "simulcast:%s %s" + (e.dir2 ? " %s %s" : "");
                },
              },
              {
                name: "simulcast_03",
                reg: /^simulcast:[\s\t]+([\S+\s\t]+)$/,
                names: ["value"],
                format: "simulcast: %s",
              },
              {
                name: "framerate",
                reg: /^framerate:(\d+(?:$|\.\d+))/,
                format: "framerate:%s",
              },
              {
                name: "sourceFilter",
                reg: /^source-filter: *(excl|incl) (\S*) (IP4|IP6|\*) (\S*) (.*)/,
                names: [
                  "filterMode",
                  "netType",
                  "addressTypes",
                  "destAddress",
                  "srcList",
                ],
                format: "source-filter: %s %s %s %s %s",
              },
              { name: "bundleOnly", reg: /^(bundle-only)/ },
              { name: "label", reg: /^label:(.+)/, format: "label:%s" },
              {
                name: "sctpPort",
                reg: /^sctp-port:(\d+)$/,
                format: "sctp-port:%s",
              },
              {
                name: "maxMessageSize",
                reg: /^max-message-size:(\d+)$/,
                format: "max-message-size:%s",
              },
              {
                push: "tsRefClocks",
                reg: /^ts-refclk:([^\s=]*)(?:=(\S*))?/,
                names: ["clksrc", "clksrcExt"],
                format: function (e) {
                  return "ts-refclk:%s" + (null != e.clksrcExt ? "=%s" : "");
                },
              },
              {
                name: "mediaClk",
                reg: /^mediaclk:(?:id=(\S*))? *([^\s=]*)(?:=(\S*))?(?: *rate=(\d+)\/(\d+))?/,
                names: [
                  "id",
                  "mediaClockName",
                  "mediaClockValue",
                  "rateNumerator",
                  "rateDenominator",
                ],
                format: function (e) {
                  var t = "mediaclk:";
                  return (
                    (t += null != e.id ? "id=%s %s" : "%v%s"),
                    (t += null != e.mediaClockValue ? "=%s" : ""),
                    (t += null != e.rateNumerator ? " rate=%s" : ""),
                    (t += null != e.rateDenominator ? "/%s" : "")
                  );
                },
              },
              { name: "keywords", reg: /^keywds:(.+)$/, format: "keywds:%s" },
              { name: "content", reg: /^content:(.+)/, format: "content:%s" },
              {
                name: "bfcpFloorCtrl",
                reg: /^floorctrl:(c-only|s-only|c-s)/,
                format: "floorctrl:%s",
              },
              { name: "bfcpConfId", reg: /^confid:(\d+)/, format: "confid:%s" },
              { name: "bfcpUserId", reg: /^userid:(\d+)/, format: "userid:%s" },
              {
                name: "bfcpFloorId",
                reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,
                names: ["id", "mStream"],
                format: "floorid:%s mstrm:%s",
              },
              { push: "invalid", names: ["value"] },
            ],
          });
          Object.keys(t).forEach(function (e) {
            t[e].forEach(function (e) {
              e.reg || (e.reg = /(.*)/), e.format || (e.format = "%s");
            });
          });
        },
        766: (e, t, r) => {
          var n = r(962),
            a = r(5776);
          (t.write = a),
            (t.parse = n.parse),
            (t.parseParams = n.parseParams),
            (t.parseFmtpConfig = n.parseFmtpConfig),
            (t.parsePayloads = n.parsePayloads),
            (t.parseRemoteCandidates = n.parseRemoteCandidates),
            (t.parseImageAttributes = n.parseImageAttributes),
            (t.parseSimulcastStreamList = n.parseSimulcastStreamList);
        },
        962: (e, t, r) => {
          var n = function (e) {
              return String(Number(e)) === e ? Number(e) : e;
            },
            a = function (e, t, r) {
              var a = e.name && e.names;
              e.push && !t[e.push]
                ? (t[e.push] = [])
                : a && !t[e.name] && (t[e.name] = {});
              var i = e.push ? {} : a ? t[e.name] : t;
              !(function (e, t, r, a) {
                if (a && !r) t[a] = n(e[1]);
                else
                  for (var i = 0; i < r.length; i += 1)
                    null != e[i + 1] && (t[r[i]] = n(e[i + 1]));
              })(r.match(e.reg), i, e.names, e.name),
                e.push && t[e.push].push(i);
            },
            i = r(6692),
            s = RegExp.prototype.test.bind(/^([a-z])=(.*)/);
          t.parse = function (e) {
            var t = {},
              r = [],
              n = t;
            return (
              e
                .split(/(\r\n|\r|\n)/)
                .filter(s)
                .forEach(function (e) {
                  var t = e[0],
                    s = e.slice(2);
                  "m" === t &&
                    (r.push({ rtp: [], fmtp: [] }), (n = r[r.length - 1]));
                  for (var o = 0; o < (i[t] || []).length; o += 1) {
                    var c = i[t][o];
                    if (c.reg.test(s)) return a(c, n, s);
                  }
                }),
              (t.media = r),
              t
            );
          };
          var o = function (e, t) {
            var r = t.split(/=(.+)/, 2);
            return (
              2 === r.length
                ? (e[r[0]] = n(r[1]))
                : 1 === r.length && t.length > 1 && (e[r[0]] = void 0),
              e
            );
          };
          (t.parseParams = function (e) {
            return e.split(/;\s?/).reduce(o, {});
          }),
            (t.parseFmtpConfig = t.parseParams),
            (t.parsePayloads = function (e) {
              return e.toString().split(" ").map(Number);
            }),
            (t.parseRemoteCandidates = function (e) {
              for (
                var t = [], r = e.split(" ").map(n), a = 0;
                a < r.length;
                a += 3
              )
                t.push({ component: r[a], ip: r[a + 1], port: r[a + 2] });
              return t;
            }),
            (t.parseImageAttributes = function (e) {
              return e.split(" ").map(function (e) {
                return e
                  .substring(1, e.length - 1)
                  .split(",")
                  .reduce(o, {});
              });
            }),
            (t.parseSimulcastStreamList = function (e) {
              return e.split(";").map(function (e) {
                return e.split(",").map(function (e) {
                  var t,
                    r = !1;
                  return (
                    "~" !== e[0]
                      ? (t = n(e))
                      : ((t = n(e.substring(1, e.length))), (r = !0)),
                    { scid: t, paused: r }
                  );
                });
              });
            });
        },
        5776: (e, t, r) => {
          var n = r(6692),
            a = /%[sdv%]/g,
            i = function (e) {
              var t = 1,
                r = arguments,
                n = r.length;
              return e.replace(a, function (e) {
                if (t >= n) return e;
                var a = r[t];
                switch (((t += 1), e)) {
                  case "%%":
                    return "%";
                  case "%s":
                    return String(a);
                  case "%d":
                    return Number(a);
                  case "%v":
                    return "";
                }
              });
            },
            s = function (e, t, r) {
              var n = [
                e +
                  "=" +
                  (t.format instanceof Function
                    ? t.format(t.push ? r : r[t.name])
                    : t.format),
              ];
              if (t.names)
                for (var a = 0; a < t.names.length; a += 1) {
                  var s = t.names[a];
                  t.name ? n.push(r[t.name][s]) : n.push(r[t.names[a]]);
                }
              else n.push(r[t.name]);
              return i.apply(null, n);
            },
            o = [
              "v",
              "o",
              "s",
              "i",
              "u",
              "e",
              "p",
              "c",
              "b",
              "t",
              "r",
              "z",
              "a",
            ],
            c = ["i", "c", "b", "a"];
          e.exports = function (e, t) {
            (t = t || {}),
              null == e.version && (e.version = 0),
              null == e.name && (e.name = " "),
              e.media.forEach(function (e) {
                null == e.payloads && (e.payloads = "");
              });
            var r = t.outerOrder || o,
              a = t.innerOrder || c,
              i = [];
            return (
              r.forEach(function (t) {
                n[t].forEach(function (r) {
                  r.name in e && null != e[r.name]
                    ? i.push(s(t, r, e))
                    : r.push in e &&
                      null != e[r.push] &&
                      e[r.push].forEach(function (e) {
                        i.push(s(t, r, e));
                      });
                });
              }),
              e.media.forEach(function (e) {
                i.push(s("m", n.m[0], e)),
                  a.forEach(function (t) {
                    n[t].forEach(function (r) {
                      r.name in e && null != e[r.name]
                        ? i.push(s(t, r, e))
                        : r.push in e &&
                          null != e[r.push] &&
                          e[r.push].forEach(function (e) {
                            i.push(s(t, r, e));
                          });
                    });
                  });
              }),
              i.join("\r\n") + "\r\n"
            );
          };
        },
        5840: (e, t, r) => {
          var n;
          if ("object" == typeof globalThis) n = globalThis;
          else
            try {
              n = r(284);
            } catch (e) {
            } finally {
              if ((n || "undefined" == typeof window || (n = window), !n))
                throw new Error("Could not determine global this");
            }
          var a = n.WebSocket || n.MozWebSocket,
            i = r(9387);
          function s(e, t) {
            return t ? new a(e, t) : new a(e);
          }
          a &&
            ["CONNECTING", "OPEN", "CLOSING", "CLOSED"].forEach(function (e) {
              Object.defineProperty(s, e, {
                get: function () {
                  return a[e];
                },
              });
            }),
            (e.exports = { w3cwebsocket: a ? s : null, version: i });
        },
        9387: (e, t, r) => {
          e.exports = r(9794).version;
        },
        7147: (e, t, r) => {
          "use strict";
          r.r(t),
            r.d(t, {
              DOMException: () => E,
              Headers: () => m,
              Request: () => w,
              Response: () => k,
              fetch: () => T,
            });
          var n =
              ("undefined" != typeof globalThis && globalThis) ||
              ("undefined" != typeof self && self) ||
              (void 0 !== r.g && r.g) ||
              {},
            a = "URLSearchParams" in n,
            i = "Symbol" in n && "iterator" in Symbol,
            s =
              "FileReader" in n &&
              "Blob" in n &&
              (function () {
                try {
                  return new Blob(), !0;
                } catch (e) {
                  return !1;
                }
              })(),
            o = "FormData" in n,
            c = "ArrayBuffer" in n;
          if (c)
            var d = [
                "[object Int8Array]",
                "[object Uint8Array]",
                "[object Uint8ClampedArray]",
                "[object Int16Array]",
                "[object Uint16Array]",
                "[object Int32Array]",
                "[object Uint32Array]",
                "[object Float32Array]",
                "[object Float64Array]",
              ],
              l =
                ArrayBuffer.isView ||
                function (e) {
                  return e && d.indexOf(Object.prototype.toString.call(e)) > -1;
                };
          function u(e) {
            if (
              ("string" != typeof e && (e = String(e)),
              /[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(e) || "" === e)
            )
              throw new TypeError(
                'Invalid character in header field name: "' + e + '"'
              );
            return e.toLowerCase();
          }
          function p(e) {
            return "string" != typeof e && (e = String(e)), e;
          }
          function h(e) {
            var t = {
              next: function () {
                var t = e.shift();
                return { done: void 0 === t, value: t };
              },
            };
            return (
              i &&
                (t[Symbol.iterator] = function () {
                  return t;
                }),
              t
            );
          }
          function m(e) {
            (this.map = {}),
              e instanceof m
                ? e.forEach(function (e, t) {
                    this.append(t, e);
                  }, this)
                : Array.isArray(e)
                ? e.forEach(function (e) {
                    if (2 != e.length)
                      throw new TypeError(
                        "Headers constructor: expected name/value pair to be length 2, found" +
                          e.length
                      );
                    this.append(e[0], e[1]);
                  }, this)
                : e &&
                  Object.getOwnPropertyNames(e).forEach(function (t) {
                    this.append(t, e[t]);
                  }, this);
          }
          function f(e) {
            if (!e._noBody)
              return e.bodyUsed
                ? Promise.reject(new TypeError("Already read"))
                : void (e.bodyUsed = !0);
          }
          function v(e) {
            return new Promise(function (t, r) {
              (e.onload = function () {
                t(e.result);
              }),
                (e.onerror = function () {
                  r(e.error);
                });
            });
          }
          function _(e) {
            var t = new FileReader(),
              r = v(t);
            return t.readAsArrayBuffer(e), r;
          }
          function g(e) {
            if (e.slice) return e.slice(0);
            var t = new Uint8Array(e.byteLength);
            return t.set(new Uint8Array(e)), t.buffer;
          }
          function y() {
            return (
              (this.bodyUsed = !1),
              (this._initBody = function (e) {
                var t;
                (this.bodyUsed = this.bodyUsed),
                  (this._bodyInit = e),
                  e
                    ? "string" == typeof e
                      ? (this._bodyText = e)
                      : s && Blob.prototype.isPrototypeOf(e)
                      ? (this._bodyBlob = e)
                      : o && FormData.prototype.isPrototypeOf(e)
                      ? (this._bodyFormData = e)
                      : a && URLSearchParams.prototype.isPrototypeOf(e)
                      ? (this._bodyText = e.toString())
                      : c && s && (t = e) && DataView.prototype.isPrototypeOf(t)
                      ? ((this._bodyArrayBuffer = g(e.buffer)),
                        (this._bodyInit = new Blob([this._bodyArrayBuffer])))
                      : c && (ArrayBuffer.prototype.isPrototypeOf(e) || l(e))
                      ? (this._bodyArrayBuffer = g(e))
                      : (this._bodyText = e = Object.prototype.toString.call(e))
                    : ((this._noBody = !0), (this._bodyText = "")),
                  this.headers.get("content-type") ||
                    ("string" == typeof e
                      ? this.headers.set(
                          "content-type",
                          "text/plain;charset=UTF-8"
                        )
                      : this._bodyBlob && this._bodyBlob.type
                      ? this.headers.set("content-type", this._bodyBlob.type)
                      : a &&
                        URLSearchParams.prototype.isPrototypeOf(e) &&
                        this.headers.set(
                          "content-type",
                          "application/x-www-form-urlencoded;charset=UTF-8"
                        ));
              }),
              s &&
                (this.blob = function () {
                  var e = f(this);
                  if (e) return e;
                  if (this._bodyBlob) return Promise.resolve(this._bodyBlob);
                  if (this._bodyArrayBuffer)
                    return Promise.resolve(new Blob([this._bodyArrayBuffer]));
                  if (this._bodyFormData)
                    throw new Error("could not read FormData body as blob");
                  return Promise.resolve(new Blob([this._bodyText]));
                }),
              (this.arrayBuffer = function () {
                if (this._bodyArrayBuffer) {
                  var e = f(this);
                  return (
                    e ||
                    (ArrayBuffer.isView(this._bodyArrayBuffer)
                      ? Promise.resolve(
                          this._bodyArrayBuffer.buffer.slice(
                            this._bodyArrayBuffer.byteOffset,
                            this._bodyArrayBuffer.byteOffset +
                              this._bodyArrayBuffer.byteLength
                          )
                        )
                      : Promise.resolve(this._bodyArrayBuffer))
                  );
                }
                if (s) return this.blob().then(_);
                throw new Error("could not read as ArrayBuffer");
              }),
              (this.text = function () {
                var e,
                  t,
                  r,
                  n,
                  a,
                  i = f(this);
                if (i) return i;
                if (this._bodyBlob)
                  return (
                    (e = this._bodyBlob),
                    (t = new FileReader()),
                    (r = v(t)),
                    (n = /charset=([A-Za-z0-9_-]+)/.exec(e.type)),
                    (a = n ? n[1] : "utf-8"),
                    t.readAsText(e, a),
                    r
                  );
                if (this._bodyArrayBuffer)
                  return Promise.resolve(
                    (function (e) {
                      for (
                        var t = new Uint8Array(e),
                          r = new Array(t.length),
                          n = 0;
                        n < t.length;
                        n++
                      )
                        r[n] = String.fromCharCode(t[n]);
                      return r.join("");
                    })(this._bodyArrayBuffer)
                  );
                if (this._bodyFormData)
                  throw new Error("could not read FormData body as text");
                return Promise.resolve(this._bodyText);
              }),
              o &&
                (this.formData = function () {
                  return this.text().then(S);
                }),
              (this.json = function () {
                return this.text().then(JSON.parse);
              }),
              this
            );
          }
          (m.prototype.append = function (e, t) {
            (e = u(e)), (t = p(t));
            var r = this.map[e];
            this.map[e] = r ? r + ", " + t : t;
          }),
            (m.prototype.delete = function (e) {
              delete this.map[u(e)];
            }),
            (m.prototype.get = function (e) {
              return (e = u(e)), this.has(e) ? this.map[e] : null;
            }),
            (m.prototype.has = function (e) {
              return this.map.hasOwnProperty(u(e));
            }),
            (m.prototype.set = function (e, t) {
              this.map[u(e)] = p(t);
            }),
            (m.prototype.forEach = function (e, t) {
              for (var r in this.map)
                this.map.hasOwnProperty(r) && e.call(t, this.map[r], r, this);
            }),
            (m.prototype.keys = function () {
              var e = [];
              return (
                this.forEach(function (t, r) {
                  e.push(r);
                }),
                h(e)
              );
            }),
            (m.prototype.values = function () {
              var e = [];
              return (
                this.forEach(function (t) {
                  e.push(t);
                }),
                h(e)
              );
            }),
            (m.prototype.entries = function () {
              var e = [];
              return (
                this.forEach(function (t, r) {
                  e.push([r, t]);
                }),
                h(e)
              );
            }),
            i && (m.prototype[Symbol.iterator] = m.prototype.entries);
          var b = [
            "CONNECT",
            "DELETE",
            "GET",
            "HEAD",
            "OPTIONS",
            "PATCH",
            "POST",
            "PUT",
            "TRACE",
          ];
          function w(e, t) {
            if (!(this instanceof w))
              throw new TypeError(
                'Please use the "new" operator, this DOM object constructor cannot be called as a function.'
              );
            var r,
              a,
              i = (t = t || {}).body;
            if (e instanceof w) {
              if (e.bodyUsed) throw new TypeError("Already read");
              (this.url = e.url),
                (this.credentials = e.credentials),
                t.headers || (this.headers = new m(e.headers)),
                (this.method = e.method),
                (this.mode = e.mode),
                (this.signal = e.signal),
                i ||
                  null == e._bodyInit ||
                  ((i = e._bodyInit), (e.bodyUsed = !0));
            } else this.url = String(e);
            if (
              ((this.credentials =
                t.credentials || this.credentials || "same-origin"),
              (!t.headers && this.headers) || (this.headers = new m(t.headers)),
              (this.method =
                ((r = t.method || this.method || "GET"),
                (a = r.toUpperCase()),
                b.indexOf(a) > -1 ? a : r)),
              (this.mode = t.mode || this.mode || null),
              (this.signal =
                t.signal ||
                this.signal ||
                (function () {
                  if ("AbortController" in n)
                    return new AbortController().signal;
                })()),
              (this.referrer = null),
              ("GET" === this.method || "HEAD" === this.method) && i)
            )
              throw new TypeError("Body not allowed for GET or HEAD requests");
            if (
              (this._initBody(i),
              !(
                ("GET" !== this.method && "HEAD" !== this.method) ||
                ("no-store" !== t.cache && "no-cache" !== t.cache)
              ))
            ) {
              var s = /([?&])_=[^&]*/;
              if (s.test(this.url))
                this.url = this.url.replace(s, "$1_=" + new Date().getTime());
              else {
                this.url +=
                  (/\?/.test(this.url) ? "&" : "?") +
                  "_=" +
                  new Date().getTime();
              }
            }
          }
          function S(e) {
            var t = new FormData();
            return (
              e
                .trim()
                .split("&")
                .forEach(function (e) {
                  if (e) {
                    var r = e.split("="),
                      n = r.shift().replace(/\+/g, " "),
                      a = r.join("=").replace(/\+/g, " ");
                    t.append(decodeURIComponent(n), decodeURIComponent(a));
                  }
                }),
              t
            );
          }
          function k(e, t) {
            if (!(this instanceof k))
              throw new TypeError(
                'Please use the "new" operator, this DOM object constructor cannot be called as a function.'
              );
            if (
              (t || (t = {}),
              (this.type = "default"),
              (this.status = void 0 === t.status ? 200 : t.status),
              this.status < 200 || this.status > 599)
            )
              throw new RangeError(
                "Failed to construct 'Response': The status provided (0) is outside the range [200, 599]."
              );
            (this.ok = this.status >= 200 && this.status < 300),
              (this.statusText =
                void 0 === t.statusText ? "" : "" + t.statusText),
              (this.headers = new m(t.headers)),
              (this.url = t.url || ""),
              this._initBody(e);
          }
          (w.prototype.clone = function () {
            return new w(this, { body: this._bodyInit });
          }),
            y.call(w.prototype),
            y.call(k.prototype),
            (k.prototype.clone = function () {
              return new k(this._bodyInit, {
                status: this.status,
                statusText: this.statusText,
                headers: new m(this.headers),
                url: this.url,
              });
            }),
            (k.error = function () {
              var e = new k(null, { status: 200, statusText: "" });
              return (e.ok = !1), (e.status = 0), (e.type = "error"), e;
            });
          var R = [301, 302, 303, 307, 308];
          k.redirect = function (e, t) {
            if (-1 === R.indexOf(t))
              throw new RangeError("Invalid status code");
            return new k(null, { status: t, headers: { location: e } });
          };
          var E = n.DOMException;
          try {
            new E();
          } catch (e) {
            ((E = function (e, t) {
              (this.message = e), (this.name = t);
              var r = Error(e);
              this.stack = r.stack;
            }).prototype = Object.create(Error.prototype)),
              (E.prototype.constructor = E);
          }
          function T(e, t) {
            return new Promise(function (r, a) {
              var i = new w(e, t);
              if (i.signal && i.signal.aborted)
                return a(new E("Aborted", "AbortError"));
              var o = new XMLHttpRequest();
              function d() {
                o.abort();
              }
              if (
                ((o.onload = function () {
                  var e,
                    t,
                    n = {
                      statusText: o.statusText,
                      headers:
                        ((e = o.getAllResponseHeaders() || ""),
                        (t = new m()),
                        e
                          .replace(/\r?\n[\t ]+/g, " ")
                          .split("\r")
                          .map(function (e) {
                            return 0 === e.indexOf("\n")
                              ? e.substr(1, e.length)
                              : e;
                          })
                          .forEach(function (e) {
                            var r = e.split(":"),
                              n = r.shift().trim();
                            if (n) {
                              var a = r.join(":").trim();
                              try {
                                t.append(n, a);
                              } catch (e) {
                                console.warn("Response " + e.message);
                              }
                            }
                          }),
                        t),
                    };
                  0 === i.url.indexOf("file://") &&
                  (o.status < 200 || o.status > 599)
                    ? (n.status = 200)
                    : (n.status = o.status),
                    (n.url =
                      "responseURL" in o
                        ? o.responseURL
                        : n.headers.get("X-Request-URL"));
                  var a = "response" in o ? o.response : o.responseText;
                  setTimeout(function () {
                    r(new k(a, n));
                  }, 0);
                }),
                (o.onerror = function () {
                  setTimeout(function () {
                    a(new TypeError("Network request failed"));
                  }, 0);
                }),
                (o.ontimeout = function () {
                  setTimeout(function () {
                    a(new TypeError("Network request timed out"));
                  }, 0);
                }),
                (o.onabort = function () {
                  setTimeout(function () {
                    a(new E("Aborted", "AbortError"));
                  }, 0);
                }),
                o.open(
                  i.method,
                  (function (e) {
                    try {
                      return "" === e && n.location.href ? n.location.href : e;
                    } catch (t) {
                      return e;
                    }
                  })(i.url),
                  !0
                ),
                "include" === i.credentials
                  ? (o.withCredentials = !0)
                  : "omit" === i.credentials && (o.withCredentials = !1),
                "responseType" in o &&
                  (s
                    ? (o.responseType = "blob")
                    : c && (o.responseType = "arraybuffer")),
                t &&
                  "object" == typeof t.headers &&
                  !(
                    t.headers instanceof m ||
                    (n.Headers && t.headers instanceof n.Headers)
                  ))
              ) {
                var l = [];
                Object.getOwnPropertyNames(t.headers).forEach(function (e) {
                  l.push(u(e)), o.setRequestHeader(e, p(t.headers[e]));
                }),
                  i.headers.forEach(function (e, t) {
                    -1 === l.indexOf(t) && o.setRequestHeader(t, e);
                  });
              } else
                i.headers.forEach(function (e, t) {
                  o.setRequestHeader(t, e);
                });
              i.signal &&
                (i.signal.addEventListener("abort", d),
                (o.onreadystatechange = function () {
                  4 === o.readyState &&
                    i.signal.removeEventListener("abort", d);
                })),
                o.send(void 0 === i._bodyInit ? null : i._bodyInit);
            });
          }
          (T.polyfill = !0),
            n.fetch ||
              ((n.fetch = T),
              (n.Headers = m),
              (n.Request = w),
              (n.Response = k));
        },
        2480: () => {},
        907: (e, t, r) => {
          "use strict";
          function n(e, t) {
            (null == t || t > e.length) && (t = e.length);
            for (var r = 0, n = new Array(t); r < t; r++) n[r] = e[r];
            return n;
          }
          r.d(t, { Z: () => n });
        },
        5861: (e, t, r) => {
          "use strict";
          function n(e, t, r, n, a, i, s) {
            try {
              var o = e[i](s),
                c = o.value;
            } catch (e) {
              return void r(e);
            }
            o.done ? t(c) : Promise.resolve(c).then(n, a);
          }
          function a(e) {
            return function () {
              var t = this,
                r = arguments;
              return new Promise(function (a, i) {
                var s = e.apply(t, r);
                function o(e) {
                  n(s, a, i, o, c, "next", e);
                }
                function c(e) {
                  n(s, a, i, o, c, "throw", e);
                }
                o(void 0);
              });
            };
          }
          r.d(t, { Z: () => a });
        },
        5671: (e, t, r) => {
          "use strict";
          function n(e, t) {
            if (!(e instanceof t))
              throw new TypeError("Cannot call a class as a function");
          }
          r.d(t, { Z: () => n });
        },
        3144: (e, t, r) => {
          "use strict";
          function n(e, t) {
            for (var r = 0; r < t.length; r++) {
              var n = t[r];
              (n.enumerable = n.enumerable || !1),
                (n.configurable = !0),
                "value" in n && (n.writable = !0),
                Object.defineProperty(e, n.key, n);
            }
          }
          function a(e, t, r) {
            return (
              t && n(e.prototype, t),
              r && n(e, r),
              Object.defineProperty(e, "prototype", { writable: !1 }),
              e
            );
          }
          r.d(t, { Z: () => a });
        },
        4942: (e, t, r) => {
          "use strict";
          function n(e, t, r) {
            return (
              t in e
                ? Object.defineProperty(e, t, {
                    value: r,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0,
                  })
                : (e[t] = r),
              e
            );
          }
          r.d(t, { Z: () => n });
        },
        885: (e, t, r) => {
          "use strict";
          r.d(t, { Z: () => a });
          var n = r(181);
          function a(e, t) {
            return (
              (function (e) {
                if (Array.isArray(e)) return e;
              })(e) ||
              (function (e, t) {
                var r =
                  null == e
                    ? null
                    : ("undefined" != typeof Symbol && e[Symbol.iterator]) ||
                      e["@@iterator"];
                if (null != r) {
                  var n,
                    a,
                    i = [],
                    s = !0,
                    o = !1;
                  try {
                    for (
                      r = r.call(e);
                      !(s = (n = r.next()).done) &&
                      (i.push(n.value), !t || i.length !== t);
                      s = !0
                    );
                  } catch (e) {
                    (o = !0), (a = e);
                  } finally {
                    try {
                      s || null == r.return || r.return();
                    } finally {
                      if (o) throw a;
                    }
                  }
                  return i;
                }
              })(e, t) ||
              (0, n.Z)(e, t) ||
              (function () {
                throw new TypeError(
                  "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                );
              })()
            );
          }
        },
        2982: (e, t, r) => {
          "use strict";
          r.d(t, { Z: () => i });
          var n = r(907);
          var a = r(181);
          function i(e) {
            return (
              (function (e) {
                if (Array.isArray(e)) return (0, n.Z)(e);
              })(e) ||
              (function (e) {
                if (
                  ("undefined" != typeof Symbol &&
                    null != e[Symbol.iterator]) ||
                  null != e["@@iterator"]
                )
                  return Array.from(e);
              })(e) ||
              (0, a.Z)(e) ||
              (function () {
                throw new TypeError(
                  "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                );
              })()
            );
          }
        },
        1002: (e, t, r) => {
          "use strict";
          function n(e) {
            return (
              (n =
                "function" == typeof Symbol &&
                "symbol" == typeof Symbol.iterator
                  ? function (e) {
                      return typeof e;
                    }
                  : function (e) {
                      return e &&
                        "function" == typeof Symbol &&
                        e.constructor === Symbol &&
                        e !== Symbol.prototype
                        ? "symbol"
                        : typeof e;
                    }),
              n(e)
            );
          }
          r.d(t, { Z: () => n });
        },
        181: (e, t, r) => {
          "use strict";
          r.d(t, { Z: () => a });
          var n = r(907);
          function a(e, t) {
            if (e) {
              if ("string" == typeof e) return (0, n.Z)(e, t);
              var r = Object.prototype.toString.call(e).slice(8, -1);
              return (
                "Object" === r && e.constructor && (r = e.constructor.name),
                "Map" === r || "Set" === r
                  ? Array.from(e)
                  : "Arguments" === r ||
                    /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                  ? (0, n.Z)(e, t)
                  : void 0
              );
            }
          }
        },
        7002: (e) => {
          "use strict";
          e.exports = JSON.parse(
            '{"name":"protoo-client","version":"4.0.6","description":"protoo JavaScript client module","author":"Iñaki Baz Castillo <ibc@aliax.net>","homepage":"https://protoo.versatica.com","license":"MIT","repository":{"type":"git","url":"https://github.com/ibc/protoo.git"},"main":"lib/index.js","keywords":["nodejs","browser","websocket"],"engines":{"node":">=8.0.0"},"scripts":{"lint":"eslint -c .eslintrc.js lib"},"dependencies":{"debug":"^4.3.1","events":"^3.2.0","retry":"^0.12.0"},"devDependencies":{"eslint":"^5.16.0"},"optionalDependencies":{"websocket":"^1.0.33"}}'
          );
        },
        9794: (e) => {
          "use strict";
          e.exports = { version: "1.0.34" };
        },
      },
      t = {};
    function r(n) {
      var a = t[n];
      if (void 0 !== a) return a.exports;
      var i = (t[n] = { exports: {} });
      return e[n].call(i.exports, i, i.exports, r), i.exports;
    }
    return (
      (r.n = (e) => {
        var t = e && e.__esModule ? () => e.default : () => e;
        return r.d(t, { a: t }), t;
      }),
      (r.d = (e, t) => {
        for (var n in t)
          r.o(t, n) &&
            !r.o(e, n) &&
            Object.defineProperty(e, n, { enumerable: !0, get: t[n] });
      }),
      (r.g = (function () {
        if ("object" == typeof globalThis) return globalThis;
        try {
          return this || new Function("return this")();
        } catch (e) {
          if ("object" == typeof window) return window;
        }
      })()),
      (r.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t)),
      (r.r = (e) => {
        "undefined" != typeof Symbol &&
          Symbol.toStringTag &&
          Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }),
          Object.defineProperty(e, "__esModule", { value: !0 });
      }),
      r(8225)
    );
  })()
);
